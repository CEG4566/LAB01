
PremierProjetFreeTROS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08006578  08006578  00016578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066b4  080066b4  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  080066b4  080066b4  000166b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066bc  080066bc  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066bc  080066bc  000166bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066c0  080066c0  000166c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080066c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf8  200000b0  08006774  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ca8  08006774  00024ca8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018c88  00000000  00000000  00020123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034f4  00000000  00000000  00038dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001490  00000000  00000000  0003c2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001002  00000000  00000000  0003d730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003343  00000000  00000000  0003e732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016f03  00000000  00000000  00041a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dae08  00000000  00000000  00058978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005990  00000000  00000000  00133780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00139110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006560 	.word	0x08006560

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	08006560 	.word	0x08006560

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fc20 	bl	8000d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f864 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f8fe 	bl	8000718 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800051c:	f000 f8d2 	bl	80006c4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000520:	f002 fc78 	bl	8002e14 <osKernelInitialize>
  buttonSemaphore = osSemaphoreNew(1, 1, NULL);
 8000524:	2200      	movs	r2, #0
 8000526:	2101      	movs	r1, #1
 8000528:	2001      	movs	r0, #1
 800052a:	f002 fd6a 	bl	8003002 <osSemaphoreNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a1a      	ldr	r2, [pc, #104]	; (800059c <main+0x90>)
 8000532:	6013      	str	r3, [r2, #0]
  toggleQueue = xQueueCreate(1, sizeof(int));
 8000534:	2200      	movs	r2, #0
 8000536:	2104      	movs	r1, #4
 8000538:	2001      	movs	r0, #1
 800053a:	f003 f849 	bl	80035d0 <xQueueGenericCreate>
 800053e:	4603      	mov	r3, r0
 8000540:	4a17      	ldr	r2, [pc, #92]	; (80005a0 <main+0x94>)
 8000542:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000544:	4a17      	ldr	r2, [pc, #92]	; (80005a4 <main+0x98>)
 8000546:	2100      	movs	r1, #0
 8000548:	4817      	ldr	r0, [pc, #92]	; (80005a8 <main+0x9c>)
 800054a:	f002 fcad 	bl	8002ea8 <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a16      	ldr	r2, [pc, #88]	; (80005ac <main+0xa0>)
 8000552:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000554:	4a16      	ldr	r2, [pc, #88]	; (80005b0 <main+0xa4>)
 8000556:	2100      	movs	r1, #0
 8000558:	4816      	ldr	r0, [pc, #88]	; (80005b4 <main+0xa8>)
 800055a:	f002 fca5 	bl	8002ea8 <osThreadNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a15      	ldr	r2, [pc, #84]	; (80005b8 <main+0xac>)
 8000562:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(StartTask3, NULL, &Task3_attributes);
 8000564:	4a15      	ldr	r2, [pc, #84]	; (80005bc <main+0xb0>)
 8000566:	2100      	movs	r1, #0
 8000568:	4815      	ldr	r0, [pc, #84]	; (80005c0 <main+0xb4>)
 800056a:	f002 fc9d 	bl	8002ea8 <osThreadNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <main+0xb8>)
 8000572:	6013      	str	r3, [r2, #0]

  /* creation of Task4 */
  Task4Handle = osThreadNew(StartTask4, NULL, &Task4_attributes);
 8000574:	4a14      	ldr	r2, [pc, #80]	; (80005c8 <main+0xbc>)
 8000576:	2100      	movs	r1, #0
 8000578:	4814      	ldr	r0, [pc, #80]	; (80005cc <main+0xc0>)
 800057a:	f002 fc95 	bl	8002ea8 <osThreadNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <main+0xc4>)
 8000582:	6013      	str	r3, [r2, #0]

  /* creation of Task5 */
  Task5Handle = osThreadNew(StartTask5, NULL, &Task5_attributes);
 8000584:	4a13      	ldr	r2, [pc, #76]	; (80005d4 <main+0xc8>)
 8000586:	2100      	movs	r1, #0
 8000588:	4813      	ldr	r0, [pc, #76]	; (80005d8 <main+0xcc>)
 800058a:	f002 fc8d 	bl	8002ea8 <osThreadNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a12      	ldr	r2, [pc, #72]	; (80005dc <main+0xd0>)
 8000592:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000594:	f002 fc62 	bl	8002e5c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8000598:	e7fe      	b.n	8000598 <main+0x8c>
 800059a:	bf00      	nop
 800059c:	2000012c 	.word	0x2000012c
 80005a0:	20000130 	.word	0x20000130
 80005a4:	080065e8 	.word	0x080065e8
 80005a8:	080007f5 	.word	0x080007f5
 80005ac:	20000114 	.word	0x20000114
 80005b0:	0800660c 	.word	0x0800660c
 80005b4:	08000871 	.word	0x08000871
 80005b8:	20000118 	.word	0x20000118
 80005bc:	08006630 	.word	0x08006630
 80005c0:	080008d5 	.word	0x080008d5
 80005c4:	2000011c 	.word	0x2000011c
 80005c8:	08006654 	.word	0x08006654
 80005cc:	08000961 	.word	0x08000961
 80005d0:	20000120 	.word	0x20000120
 80005d4:	08006678 	.word	0x08006678
 80005d8:	080009dd 	.word	0x080009dd
 80005dc:	20000124 	.word	0x20000124

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	2234      	movs	r2, #52	; 0x34
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f005 fecc 	bl	800638c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b2c      	ldr	r3, [pc, #176]	; (80006bc <SystemClock_Config+0xdc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a2b      	ldr	r2, [pc, #172]	; (80006bc <SystemClock_Config+0xdc>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40
 8000614:	4b29      	ldr	r3, [pc, #164]	; (80006bc <SystemClock_Config+0xdc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	2300      	movs	r3, #0
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <SystemClock_Config+0xe0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a25      	ldr	r2, [pc, #148]	; (80006c0 <SystemClock_Config+0xe0>)
 800062a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <SystemClock_Config+0xe0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063c:	2302      	movs	r3, #2
 800063e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000640:	2301      	movs	r3, #1
 8000642:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000644:	2310      	movs	r3, #16
 8000646:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000648:	2302      	movs	r3, #2
 800064a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064c:	2300      	movs	r3, #0
 800064e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000650:	2308      	movs	r3, #8
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000654:	23b4      	movs	r3, #180	; 0xb4
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800065c:	2302      	movs	r3, #2
 800065e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000660:	2302      	movs	r3, #2
 8000662:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	4618      	mov	r0, r3
 800066a:	f001 fa43 	bl	8001af4 <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000674:	f000 fa1c 	bl	8000ab0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000678:	f000 fe70 	bl	800135c <HAL_PWREx_EnableOverDrive>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000682:	f000 fa15 	bl	8000ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	2302      	movs	r3, #2
 800068c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000692:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069e:	f107 0308 	add.w	r3, r7, #8
 80006a2:	2105      	movs	r1, #5
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 fea9 	bl	80013fc <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006b0:	f000 f9fe 	bl	8000ab0 <Error_Handler>
  }
}
 80006b4:	bf00      	nop
 80006b6:	3750      	adds	r7, #80	; 0x50
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_USART2_UART_Init+0x50>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006fc:	f001 ff3a 	bl	8002574 <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000706:	f000 f9d3 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200000cc 	.word	0x200000cc
 8000714:	40004400 	.word	0x40004400

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a2c      	ldr	r2, [pc, #176]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a25      	ldr	r2, [pc, #148]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <MX_GPIO_Init+0xd0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <MX_GPIO_Init+0xd0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a1e      	ldr	r2, [pc, #120]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a17      	ldr	r2, [pc, #92]	; (80007e8 <MX_GPIO_Init+0xd0>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800079e:	2200      	movs	r2, #0
 80007a0:	21f8      	movs	r1, #248	; 0xf8
 80007a2:	4812      	ldr	r0, [pc, #72]	; (80007ec <MX_GPIO_Init+0xd4>)
 80007a4:	f000 fda6 	bl	80012f4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	480c      	ldr	r0, [pc, #48]	; (80007f0 <MX_GPIO_Init+0xd8>)
 80007be:	f000 fbed 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80007c2:	2338      	movs	r3, #56	; 0x38
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_GPIO_Init+0xd4>)
 80007da:	f000 fbdf 	bl	8000f9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007de:	bf00      	nop
 80007e0:	3728      	adds	r7, #40	; 0x28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020400 	.word	0x40020400
 80007f0:	40020800 	.word	0x40020800

080007f4 <StartTask1>:
  * @retval None
  */
/* USER CODE END Header_StartTask1 */

void StartTask1(void *argument)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  // Access the queue
  extern QueueHandle_t toggleQueue;

  for(;;)
  {
	  osSemaphoreAcquire(buttonSemaphore, portMAX_DELAY);
 80007fc:	4b17      	ldr	r3, [pc, #92]	; (800085c <StartTask1+0x68>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000804:	4618      	mov	r0, r3
 8000806:	f002 fc85 	bl	8003114 <osSemaphoreAcquire>
	  HAL_UART_Transmit(&huart2, dataTask1, sizeof(dataTask1), 1000);
 800080a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080e:	2211      	movs	r2, #17
 8000810:	4913      	ldr	r1, [pc, #76]	; (8000860 <StartTask1+0x6c>)
 8000812:	4814      	ldr	r0, [pc, #80]	; (8000864 <StartTask1+0x70>)
 8000814:	f001 fefe 	bl	8002614 <HAL_UART_Transmit>
	  // Toggling green light until button is pushed Green - GPIO_PIN_3
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 8000818:	2108      	movs	r1, #8
 800081a:	4813      	ldr	r0, [pc, #76]	; (8000868 <StartTask1+0x74>)
 800081c:	f000 fd83 	bl	8001326 <HAL_GPIO_TogglePin>
	  // Toggling red light for pedestrians Red - GPIO_PIN_6
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_6);
 8000820:	2140      	movs	r1, #64	; 0x40
 8000822:	4811      	ldr	r0, [pc, #68]	; (8000868 <StartTask1+0x74>)
 8000824:	f000 fd7f 	bl	8001326 <HAL_GPIO_TogglePin>
	  // Toggle back green light if push button received
	  if(xQueueReceive(toggleQueue, &toggleMessage, portMAX_DELAY) == pdPASS) {
 8000828:	4b10      	ldr	r3, [pc, #64]	; (800086c <StartTask1+0x78>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f107 010c 	add.w	r1, r7, #12
 8000830:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000834:	4618      	mov	r0, r3
 8000836:	f003 f9b9 	bl	8003bac <xQueueReceive>
 800083a:	4603      	mov	r3, r0
 800083c:	2b01      	cmp	r3, #1
 800083e:	d1dd      	bne.n	80007fc <StartTask1+0x8>
		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 8000840:	2108      	movs	r1, #8
 8000842:	4809      	ldr	r0, [pc, #36]	; (8000868 <StartTask1+0x74>)
 8000844:	f000 fd6f 	bl	8001326 <HAL_GPIO_TogglePin>
		  osSemaphoreRelease(buttonSemaphore);
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <StartTask1+0x68>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4618      	mov	r0, r3
 800084e:	f002 fcb3 	bl	80031b8 <osSemaphoreRelease>
		  break;
 8000852:	bf00      	nop
	  }

  }
  /* USER CODE END 5 */
}
 8000854:	bf00      	nop
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	2000012c 	.word	0x2000012c
 8000860:	20000000 	.word	0x20000000
 8000864:	200000cc 	.word	0x200000cc
 8000868:	40020400 	.word	0x40020400
 800086c:	20000130 	.word	0x20000130

08000870 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(buttonSemaphore, portMAX_DELAY);
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <StartTask2+0x50>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000880:	4618      	mov	r0, r3
 8000882:	f002 fc47 	bl	8003114 <osSemaphoreAcquire>
	  // Turn on the yellow light for 3s if button is pushed
	  if (flag) {
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <StartTask2+0x54>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d0f4      	beq.n	8000878 <StartTask2+0x8>
		  HAL_UART_Transmit(&huart2, dataTask2, sizeof(dataTask2), 1000);
 800088e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000892:	2211      	movs	r2, #17
 8000894:	490c      	ldr	r1, [pc, #48]	; (80008c8 <StartTask2+0x58>)
 8000896:	480d      	ldr	r0, [pc, #52]	; (80008cc <StartTask2+0x5c>)
 8000898:	f001 febc 	bl	8002614 <HAL_UART_Transmit>
		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_4);
 800089c:	2110      	movs	r1, #16
 800089e:	480c      	ldr	r0, [pc, #48]	; (80008d0 <StartTask2+0x60>)
 80008a0:	f000 fd41 	bl	8001326 <HAL_GPIO_TogglePin>
		  osDelay(3000);
 80008a4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008a8:	f002 fb90 	bl	8002fcc <osDelay>
		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_4);
 80008ac:	2110      	movs	r1, #16
 80008ae:	4808      	ldr	r0, [pc, #32]	; (80008d0 <StartTask2+0x60>)
 80008b0:	f000 fd39 	bl	8001326 <HAL_GPIO_TogglePin>
		  osSemaphoreRelease(buttonSemaphore);
 80008b4:	4b02      	ldr	r3, [pc, #8]	; (80008c0 <StartTask2+0x50>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f002 fc7d 	bl	80031b8 <osSemaphoreRelease>
	  osSemaphoreAcquire(buttonSemaphore, portMAX_DELAY);
 80008be:	e7db      	b.n	8000878 <StartTask2+0x8>
 80008c0:	2000012c 	.word	0x2000012c
 80008c4:	20000128 	.word	0x20000128
 80008c8:	20000014 	.word	0x20000014
 80008cc:	200000cc 	.word	0x200000cc
 80008d0:	40020400 	.word	0x40020400

080008d4 <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(buttonSemaphore, portMAX_DELAY);
 80008dc:	4b1b      	ldr	r3, [pc, #108]	; (800094c <StartTask3+0x78>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008e4:	4618      	mov	r0, r3
 80008e6:	f002 fc15 	bl	8003114 <osSemaphoreAcquire>
	  if (flag) {
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <StartTask3+0x7c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d0f4      	beq.n	80008dc <StartTask3+0x8>
		  HAL_UART_Transmit(&huart2, dataTask3, sizeof(dataTask3), 1000);
 80008f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f6:	2211      	movs	r2, #17
 80008f8:	4916      	ldr	r1, [pc, #88]	; (8000954 <StartTask3+0x80>)
 80008fa:	4817      	ldr	r0, [pc, #92]	; (8000958 <StartTask3+0x84>)
 80008fc:	f001 fe8a 	bl	8002614 <HAL_UART_Transmit>
		  // toggling on the red light for vehicles for 1s
		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_5);
 8000900:	2120      	movs	r1, #32
 8000902:	4816      	ldr	r0, [pc, #88]	; (800095c <StartTask3+0x88>)
 8000904:	f000 fd0f 	bl	8001326 <HAL_GPIO_TogglePin>
		  osDelay(1000);
 8000908:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800090c:	f002 fb5e 	bl	8002fcc <osDelay>

		  // Turn off the red light for pedestrians
		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_6);
 8000910:	2140      	movs	r1, #64	; 0x40
 8000912:	4812      	ldr	r0, [pc, #72]	; (800095c <StartTask3+0x88>)
 8000914:	f000 fd07 	bl	8001326 <HAL_GPIO_TogglePin>
		  // Toggle the green light for pedestrians for 10s - GPIO_PIN_7
		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 8000918:	2180      	movs	r1, #128	; 0x80
 800091a:	4810      	ldr	r0, [pc, #64]	; (800095c <StartTask3+0x88>)
 800091c:	f000 fd03 	bl	8001326 <HAL_GPIO_TogglePin>
		  osDelay(10000);
 8000920:	f242 7010 	movw	r0, #10000	; 0x2710
 8000924:	f002 fb52 	bl	8002fcc <osDelay>
		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 8000928:	2180      	movs	r1, #128	; 0x80
 800092a:	480c      	ldr	r0, [pc, #48]	; (800095c <StartTask3+0x88>)
 800092c:	f000 fcfb 	bl	8001326 <HAL_GPIO_TogglePin>

		  // Turn on the red light for pedestrians
		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_6);
 8000930:	2140      	movs	r1, #64	; 0x40
 8000932:	480a      	ldr	r0, [pc, #40]	; (800095c <StartTask3+0x88>)
 8000934:	f000 fcf7 	bl	8001326 <HAL_GPIO_TogglePin>
		  osDelay(1000);
 8000938:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800093c:	f002 fb46 	bl	8002fcc <osDelay>
		  osSemaphoreRelease(buttonSemaphore);
 8000940:	4b02      	ldr	r3, [pc, #8]	; (800094c <StartTask3+0x78>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f002 fc37 	bl	80031b8 <osSemaphoreRelease>
	  osSemaphoreAcquire(buttonSemaphore, portMAX_DELAY);
 800094a:	e7c7      	b.n	80008dc <StartTask3+0x8>
 800094c:	2000012c 	.word	0x2000012c
 8000950:	20000128 	.word	0x20000128
 8000954:	20000028 	.word	0x20000028
 8000958:	200000cc 	.word	0x200000cc
 800095c:	40020400 	.word	0x40020400

08000960 <StartTask4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask4 */
void StartTask4(void *argument)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask4 */
  /* Infinite loop */
  for(;;)
  {
	  	  osSemaphoreAcquire(buttonSemaphore, portMAX_DELAY);
 8000968:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <StartTask4+0x68>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000970:	4618      	mov	r0, r3
 8000972:	f002 fbcf 	bl	8003114 <osSemaphoreAcquire>

	 	  if(flag)
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <StartTask4+0x6c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d0f4      	beq.n	8000968 <StartTask4+0x8>
	 	  {
	 		 HAL_UART_Transmit(&huart2, dataTask4, sizeof(dataTask4), 1000);
 800097e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000982:	2211      	movs	r2, #17
 8000984:	4912      	ldr	r1, [pc, #72]	; (80009d0 <StartTask4+0x70>)
 8000986:	4813      	ldr	r0, [pc, #76]	; (80009d4 <StartTask4+0x74>)
 8000988:	f001 fe44 	bl	8002614 <HAL_UART_Transmit>
	 		 // Toggling yellow light again for 2s simultaneously with the red lights already toggled
	 		 HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_4);
 800098c:	2110      	movs	r1, #16
 800098e:	4812      	ldr	r0, [pc, #72]	; (80009d8 <StartTask4+0x78>)
 8000990:	f000 fcc9 	bl	8001326 <HAL_GPIO_TogglePin>
	 		 osDelay(2000);
 8000994:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000998:	f002 fb18 	bl	8002fcc <osDelay>
	 		 // Toggle back red lights and yellow light
	 		 HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_4);
 800099c:	2110      	movs	r1, #16
 800099e:	480e      	ldr	r0, [pc, #56]	; (80009d8 <StartTask4+0x78>)
 80009a0:	f000 fcc1 	bl	8001326 <HAL_GPIO_TogglePin>
	 		 HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_5);
 80009a4:	2120      	movs	r1, #32
 80009a6:	480c      	ldr	r0, [pc, #48]	; (80009d8 <StartTask4+0x78>)
 80009a8:	f000 fcbd 	bl	8001326 <HAL_GPIO_TogglePin>
	 		 HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_6);
 80009ac:	2140      	movs	r1, #64	; 0x40
 80009ae:	480a      	ldr	r0, [pc, #40]	; (80009d8 <StartTask4+0x78>)
 80009b0:	f000 fcb9 	bl	8001326 <HAL_GPIO_TogglePin>
	 		 flag = 0;
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <StartTask4+0x6c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
	 		 osSemaphoreRelease(buttonSemaphore);
 80009ba:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <StartTask4+0x68>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4618      	mov	r0, r3
 80009c0:	f002 fbfa 	bl	80031b8 <osSemaphoreRelease>
	  	  osSemaphoreAcquire(buttonSemaphore, portMAX_DELAY);
 80009c4:	e7d0      	b.n	8000968 <StartTask4+0x8>
 80009c6:	bf00      	nop
 80009c8:	2000012c 	.word	0x2000012c
 80009cc:	20000128 	.word	0x20000128
 80009d0:	2000003c 	.word	0x2000003c
 80009d4:	200000cc 	.word	0x200000cc
 80009d8:	40020400 	.word	0x40020400

080009dc <StartTask5>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask5 */
void StartTask5(void *argument)
{
 80009dc:	b5b0      	push	{r4, r5, r7, lr}
 80009de:	b090      	sub	sp, #64	; 0x40
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  // Access the queue
  extern QueueHandle_t toggleQueue;

  for(;;)
  {
	  uint8_t str1[] = "I am waiting push-button\r\n";
 80009e4:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <StartTask5+0x94>)
 80009e6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80009ea:	461d      	mov	r5, r3
 80009ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009f4:	c403      	stmia	r4!, {r0, r1}
 80009f6:	8022      	strh	r2, [r4, #0]
 80009f8:	3402      	adds	r4, #2
 80009fa:	0c13      	lsrs	r3, r2, #16
 80009fc:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart2, str1, sizeof(str1), 1000);
 80009fe:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a06:	221b      	movs	r2, #27
 8000a08:	481a      	ldr	r0, [pc, #104]	; (8000a74 <StartTask5+0x98>)
 8000a0a:	f001 fe03 	bl	8002614 <HAL_UART_Transmit>
	  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8000a0e:	e012      	b.n	8000a36 <StartTask5+0x5a>
		  flag = 1;
 8000a10:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <StartTask5+0x9c>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	601a      	str	r2, [r3, #0]
		  int toggleMessage = 1;
 8000a16:	2301      	movs	r3, #1
 8000a18:	60fb      	str	r3, [r7, #12]

	 	  xQueueSendToBack(toggleQueue, &toggleMessage, portMAX_DELAY);
 8000a1a:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <StartTask5+0xa0>)
 8000a1c:	6818      	ldr	r0, [r3, #0]
 8000a1e:	f107 010c 	add.w	r1, r7, #12
 8000a22:	2300      	movs	r3, #0
 8000a24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a28:	f002 fe9a 	bl	8003760 <xQueueGenericSend>
	 	  osSemaphoreRelease(buttonSemaphore);
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <StartTask5+0xa4>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f002 fbc1 	bl	80031b8 <osSemaphoreRelease>
	  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8000a36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a3a:	4812      	ldr	r0, [pc, #72]	; (8000a84 <StartTask5+0xa8>)
 8000a3c:	f000 fc42 	bl	80012c4 <HAL_GPIO_ReadPin>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1e4      	bne.n	8000a10 <StartTask5+0x34>
	  };

	  uint8_t str2[] = "I got push-button\r\n";
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <StartTask5+0xac>)
 8000a48:	f107 0410 	add.w	r4, r7, #16
 8000a4c:	461d      	mov	r5, r3
 8000a4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a52:	682b      	ldr	r3, [r5, #0]
 8000a54:	6023      	str	r3, [r4, #0]
	  HAL_UART_Transmit(&huart2, str2, sizeof(str2), 1000);
 8000a56:	f107 0110 	add.w	r1, r7, #16
 8000a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5e:	2214      	movs	r2, #20
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <StartTask5+0x98>)
 8000a62:	f001 fdd7 	bl	8002614 <HAL_UART_Transmit>
	  osDelay(500);
 8000a66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a6a:	f002 faaf 	bl	8002fcc <osDelay>
  {
 8000a6e:	e7b9      	b.n	80009e4 <StartTask5+0x8>
 8000a70:	080065a0 	.word	0x080065a0
 8000a74:	200000cc 	.word	0x200000cc
 8000a78:	20000128 	.word	0x20000128
 8000a7c:	20000130 	.word	0x20000130
 8000a80:	2000012c 	.word	0x2000012c
 8000a84:	40020800 	.word	0x40020800
 8000a88:	080065bc 	.word	0x080065bc

08000a8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a04      	ldr	r2, [pc, #16]	; (8000aac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d101      	bne.n	8000aa2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a9e:	f000 f97b 	bl	8000d98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40001000 	.word	0x40001000

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <Error_Handler+0x8>
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_MspInit+0x54>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a11      	ldr	r2, [pc, #68]	; (8000b10 <HAL_MspInit+0x54>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <HAL_MspInit+0x54>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <HAL_MspInit+0x54>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <HAL_MspInit+0x54>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <HAL_MspInit+0x54>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	210f      	movs	r1, #15
 8000afe:	f06f 0001 	mvn.w	r0, #1
 8000b02:	f000 fa21 	bl	8000f48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800

08000b14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <HAL_UART_MspInit+0x84>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d12b      	bne.n	8000b8e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <HAL_UART_MspInit+0x88>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <HAL_UART_MspInit+0x88>)
 8000b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <HAL_UART_MspInit+0x88>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <HAL_UART_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a10      	ldr	r2, [pc, #64]	; (8000b9c <HAL_UART_MspInit+0x88>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <HAL_UART_MspInit+0x88>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b6e:	230c      	movs	r3, #12
 8000b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b7e:	2307      	movs	r3, #7
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <HAL_UART_MspInit+0x8c>)
 8000b8a:	f000 fa07 	bl	8000f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	; 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40004400 	.word	0x40004400
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08e      	sub	sp, #56	; 0x38
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	4b33      	ldr	r3, [pc, #204]	; (8000c88 <HAL_InitTick+0xe4>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	4a32      	ldr	r2, [pc, #200]	; (8000c88 <HAL_InitTick+0xe4>)
 8000bbe:	f043 0310 	orr.w	r3, r3, #16
 8000bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc4:	4b30      	ldr	r3, [pc, #192]	; (8000c88 <HAL_InitTick+0xe4>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc8:	f003 0310 	and.w	r3, r3, #16
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bd0:	f107 0210 	add.w	r2, r7, #16
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 fd28 	bl	8001630 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000be0:	6a3b      	ldr	r3, [r7, #32]
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d103      	bne.n	8000bf2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bea:	f000 fcf9 	bl	80015e0 <HAL_RCC_GetPCLK1Freq>
 8000bee:	6378      	str	r0, [r7, #52]	; 0x34
 8000bf0:	e004      	b.n	8000bfc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bf2:	f000 fcf5 	bl	80015e0 <HAL_RCC_GetPCLK1Freq>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bfe:	4a23      	ldr	r2, [pc, #140]	; (8000c8c <HAL_InitTick+0xe8>)
 8000c00:	fba2 2303 	umull	r2, r3, r2, r3
 8000c04:	0c9b      	lsrs	r3, r3, #18
 8000c06:	3b01      	subs	r3, #1
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c0a:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <HAL_InitTick+0xec>)
 8000c0c:	4a21      	ldr	r2, [pc, #132]	; (8000c94 <HAL_InitTick+0xf0>)
 8000c0e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c10:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <HAL_InitTick+0xec>)
 8000c12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c16:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c18:	4a1d      	ldr	r2, [pc, #116]	; (8000c90 <HAL_InitTick+0xec>)
 8000c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c1c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	; (8000c90 <HAL_InitTick+0xec>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c24:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <HAL_InitTick+0xec>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2a:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <HAL_InitTick+0xec>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c30:	4817      	ldr	r0, [pc, #92]	; (8000c90 <HAL_InitTick+0xec>)
 8000c32:	f001 f9fd 	bl	8002030 <HAL_TIM_Base_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d11b      	bne.n	8000c7c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c44:	4812      	ldr	r0, [pc, #72]	; (8000c90 <HAL_InitTick+0xec>)
 8000c46:	f001 fa4d 	bl	80020e4 <HAL_TIM_Base_Start_IT>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d111      	bne.n	8000c7c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c58:	2036      	movs	r0, #54	; 0x36
 8000c5a:	f000 f991 	bl	8000f80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b0f      	cmp	r3, #15
 8000c62:	d808      	bhi.n	8000c76 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c64:	2200      	movs	r2, #0
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	2036      	movs	r0, #54	; 0x36
 8000c6a:	f000 f96d 	bl	8000f48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <HAL_InitTick+0xf4>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6013      	str	r3, [r2, #0]
 8000c74:	e002      	b.n	8000c7c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3738      	adds	r7, #56	; 0x38
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	431bde83 	.word	0x431bde83
 8000c90:	20000134 	.word	0x20000134
 8000c94:	40001000 	.word	0x40001000
 8000c98:	20000054 	.word	0x20000054

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <MemManage_Handler+0x4>

08000cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <TIM6_DAC_IRQHandler+0x10>)
 8000cce:	f001 fa79 	bl	80021c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000134 	.word	0x20000134

08000cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <SystemInit+0x20>)
 8000ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce6:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <SystemInit+0x20>)
 8000ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
ldr   sp, =_estack      /* set stack pointer */
 8000d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d38 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d04:	f7ff ffea 	bl	8000cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d08:	480c      	ldr	r0, [pc, #48]	; (8000d3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d0a:	490d      	ldr	r1, [pc, #52]	; (8000d40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d10:	e002      	b.n	8000d18 <LoopCopyDataInit>

08000d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d16:	3304      	adds	r3, #4

08000d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d1c:	d3f9      	bcc.n	8000d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d20:	4c0a      	ldr	r4, [pc, #40]	; (8000d4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d24:	e001      	b.n	8000d2a <LoopFillZerobss>

08000d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d28:	3204      	adds	r2, #4

08000d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d2c:	d3fb      	bcc.n	8000d26 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d2e:	f005 fb8b 	bl	8006448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d32:	f7ff fbeb 	bl	800050c <main>
  bx  lr    
 8000d36:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 8000d38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d40:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8000d44:	080066c4 	.word	0x080066c4
  ldr r2, =_sbss
 8000d48:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8000d4c:	20004ca8 	.word	0x20004ca8

08000d50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d50:	e7fe      	b.n	8000d50 <ADC_IRQHandler>
	...

08000d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <HAL_Init+0x40>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0d      	ldr	r2, [pc, #52]	; (8000d94 <HAL_Init+0x40>)
 8000d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <HAL_Init+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <HAL_Init+0x40>)
 8000d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <HAL_Init+0x40>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <HAL_Init+0x40>)
 8000d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d7c:	2003      	movs	r0, #3
 8000d7e:	f000 f8d8 	bl	8000f32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d82:	200f      	movs	r0, #15
 8000d84:	f7ff ff0e 	bl	8000ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d88:	f7ff fe98 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40023c00 	.word	0x40023c00

08000d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x20>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x24>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <HAL_IncTick+0x24>)
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000058 	.word	0x20000058
 8000dbc:	2000017c 	.word	0x2000017c

08000dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_GetTick+0x14>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	2000017c 	.word	0x2000017c

08000dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df4:	4013      	ands	r3, r2
 8000df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0a:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	60d3      	str	r3, [r2, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <__NVIC_GetPriorityGrouping+0x18>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	f003 0307 	and.w	r3, r3, #7
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	db0b      	blt.n	8000e66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	f003 021f 	and.w	r2, r3, #31
 8000e54:	4907      	ldr	r1, [pc, #28]	; (8000e74 <__NVIC_EnableIRQ+0x38>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	095b      	lsrs	r3, r3, #5
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000e100 	.word	0xe000e100

08000e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	db0a      	blt.n	8000ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	490c      	ldr	r1, [pc, #48]	; (8000ec4 <__NVIC_SetPriority+0x4c>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	0112      	lsls	r2, r2, #4
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea0:	e00a      	b.n	8000eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4908      	ldr	r1, [pc, #32]	; (8000ec8 <__NVIC_SetPriority+0x50>)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	3b04      	subs	r3, #4
 8000eb0:	0112      	lsls	r2, r2, #4
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	761a      	strb	r2, [r3, #24]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f1c3 0307 	rsb	r3, r3, #7
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	bf28      	it	cs
 8000eea:	2304      	movcs	r3, #4
 8000eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	2b06      	cmp	r3, #6
 8000ef4:	d902      	bls.n	8000efc <NVIC_EncodePriority+0x30>
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3b03      	subs	r3, #3
 8000efa:	e000      	b.n	8000efe <NVIC_EncodePriority+0x32>
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	401a      	ands	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	43d9      	mvns	r1, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	4313      	orrs	r3, r2
         );
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3724      	adds	r7, #36	; 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ff4c 	bl	8000dd8 <__NVIC_SetPriorityGrouping>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f5a:	f7ff ff61 	bl	8000e20 <__NVIC_GetPriorityGrouping>
 8000f5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	68b9      	ldr	r1, [r7, #8]
 8000f64:	6978      	ldr	r0, [r7, #20]
 8000f66:	f7ff ffb1 	bl	8000ecc <NVIC_EncodePriority>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f70:	4611      	mov	r1, r2
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff80 	bl	8000e78 <__NVIC_SetPriority>
}
 8000f78:	bf00      	nop
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ff54 	bl	8000e3c <__NVIC_EnableIRQ>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
 8000fb6:	e165      	b.n	8001284 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fb8:	2201      	movs	r2, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	f040 8154 	bne.w	800127e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d005      	beq.n	8000fee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d130      	bne.n	8001050 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	68da      	ldr	r2, [r3, #12]
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001024:	2201      	movs	r2, #1
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	091b      	lsrs	r3, r3, #4
 800103a:	f003 0201 	and.w	r2, r3, #1
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b03      	cmp	r3, #3
 800105a:	d017      	beq.n	800108c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d123      	bne.n	80010e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	08da      	lsrs	r2, r3, #3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3208      	adds	r2, #8
 80010a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	220f      	movs	r2, #15
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	691a      	ldr	r2, [r3, #16]
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	08da      	lsrs	r2, r3, #3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3208      	adds	r2, #8
 80010da:	69b9      	ldr	r1, [r7, #24]
 80010dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2203      	movs	r2, #3
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0203 	and.w	r2, r3, #3
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 80ae 	beq.w	800127e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b5d      	ldr	r3, [pc, #372]	; (800129c <HAL_GPIO_Init+0x300>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	4a5c      	ldr	r2, [pc, #368]	; (800129c <HAL_GPIO_Init+0x300>)
 800112c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b5a      	ldr	r3, [pc, #360]	; (800129c <HAL_GPIO_Init+0x300>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800113e:	4a58      	ldr	r2, [pc, #352]	; (80012a0 <HAL_GPIO_Init+0x304>)
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	3302      	adds	r3, #2
 8001146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	220f      	movs	r2, #15
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a4f      	ldr	r2, [pc, #316]	; (80012a4 <HAL_GPIO_Init+0x308>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d025      	beq.n	80011b6 <HAL_GPIO_Init+0x21a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a4e      	ldr	r2, [pc, #312]	; (80012a8 <HAL_GPIO_Init+0x30c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d01f      	beq.n	80011b2 <HAL_GPIO_Init+0x216>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a4d      	ldr	r2, [pc, #308]	; (80012ac <HAL_GPIO_Init+0x310>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d019      	beq.n	80011ae <HAL_GPIO_Init+0x212>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a4c      	ldr	r2, [pc, #304]	; (80012b0 <HAL_GPIO_Init+0x314>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d013      	beq.n	80011aa <HAL_GPIO_Init+0x20e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4b      	ldr	r2, [pc, #300]	; (80012b4 <HAL_GPIO_Init+0x318>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d00d      	beq.n	80011a6 <HAL_GPIO_Init+0x20a>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4a      	ldr	r2, [pc, #296]	; (80012b8 <HAL_GPIO_Init+0x31c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d007      	beq.n	80011a2 <HAL_GPIO_Init+0x206>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a49      	ldr	r2, [pc, #292]	; (80012bc <HAL_GPIO_Init+0x320>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d101      	bne.n	800119e <HAL_GPIO_Init+0x202>
 800119a:	2306      	movs	r3, #6
 800119c:	e00c      	b.n	80011b8 <HAL_GPIO_Init+0x21c>
 800119e:	2307      	movs	r3, #7
 80011a0:	e00a      	b.n	80011b8 <HAL_GPIO_Init+0x21c>
 80011a2:	2305      	movs	r3, #5
 80011a4:	e008      	b.n	80011b8 <HAL_GPIO_Init+0x21c>
 80011a6:	2304      	movs	r3, #4
 80011a8:	e006      	b.n	80011b8 <HAL_GPIO_Init+0x21c>
 80011aa:	2303      	movs	r3, #3
 80011ac:	e004      	b.n	80011b8 <HAL_GPIO_Init+0x21c>
 80011ae:	2302      	movs	r3, #2
 80011b0:	e002      	b.n	80011b8 <HAL_GPIO_Init+0x21c>
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <HAL_GPIO_Init+0x21c>
 80011b6:	2300      	movs	r3, #0
 80011b8:	69fa      	ldr	r2, [r7, #28]
 80011ba:	f002 0203 	and.w	r2, r2, #3
 80011be:	0092      	lsls	r2, r2, #2
 80011c0:	4093      	lsls	r3, r2
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011c8:	4935      	ldr	r1, [pc, #212]	; (80012a0 <HAL_GPIO_Init+0x304>)
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	3302      	adds	r3, #2
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d6:	4b3a      	ldr	r3, [pc, #232]	; (80012c0 <HAL_GPIO_Init+0x324>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011fa:	4a31      	ldr	r2, [pc, #196]	; (80012c0 <HAL_GPIO_Init+0x324>)
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001200:	4b2f      	ldr	r3, [pc, #188]	; (80012c0 <HAL_GPIO_Init+0x324>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001224:	4a26      	ldr	r2, [pc, #152]	; (80012c0 <HAL_GPIO_Init+0x324>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800122a:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <HAL_GPIO_Init+0x324>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800124e:	4a1c      	ldr	r2, [pc, #112]	; (80012c0 <HAL_GPIO_Init+0x324>)
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <HAL_GPIO_Init+0x324>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001278:	4a11      	ldr	r2, [pc, #68]	; (80012c0 <HAL_GPIO_Init+0x324>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3301      	adds	r3, #1
 8001282:	61fb      	str	r3, [r7, #28]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	2b0f      	cmp	r3, #15
 8001288:	f67f ae96 	bls.w	8000fb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	3724      	adds	r7, #36	; 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800
 80012a0:	40013800 	.word	0x40013800
 80012a4:	40020000 	.word	0x40020000
 80012a8:	40020400 	.word	0x40020400
 80012ac:	40020800 	.word	0x40020800
 80012b0:	40020c00 	.word	0x40020c00
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40021400 	.word	0x40021400
 80012bc:	40021800 	.word	0x40021800
 80012c0:	40013c00 	.word	0x40013c00

080012c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	691a      	ldr	r2, [r3, #16]
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012dc:	2301      	movs	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
 80012e0:	e001      	b.n	80012e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
 8001300:	4613      	mov	r3, r2
 8001302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001304:	787b      	ldrb	r3, [r7, #1]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800130a:	887a      	ldrh	r2, [r7, #2]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001310:	e003      	b.n	800131a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001312:	887b      	ldrh	r3, [r7, #2]
 8001314:	041a      	lsls	r2, r3, #16
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	619a      	str	r2, [r3, #24]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001326:	b480      	push	{r7}
 8001328:	b085      	sub	sp, #20
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	460b      	mov	r3, r1
 8001330:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001338:	887a      	ldrh	r2, [r7, #2]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4013      	ands	r3, r2
 800133e:	041a      	lsls	r2, r3, #16
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	43d9      	mvns	r1, r3
 8001344:	887b      	ldrh	r3, [r7, #2]
 8001346:	400b      	ands	r3, r1
 8001348:	431a      	orrs	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	619a      	str	r2, [r3, #24]
}
 800134e:	bf00      	nop
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	4b20      	ldr	r3, [pc, #128]	; (80013ec <HAL_PWREx_EnableOverDrive+0x90>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a1f      	ldr	r2, [pc, #124]	; (80013ec <HAL_PWREx_EnableOverDrive+0x90>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <HAL_PWREx_EnableOverDrive+0x90>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <HAL_PWREx_EnableOverDrive+0x94>)
 8001384:	2201      	movs	r2, #1
 8001386:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001388:	f7ff fd1a 	bl	8000dc0 <HAL_GetTick>
 800138c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800138e:	e009      	b.n	80013a4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001390:	f7ff fd16 	bl	8000dc0 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800139e:	d901      	bls.n	80013a4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e01f      	b.n	80013e4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013a4:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <HAL_PWREx_EnableOverDrive+0x98>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b0:	d1ee      	bne.n	8001390 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013b8:	f7ff fd02 	bl	8000dc0 <HAL_GetTick>
 80013bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013be:	e009      	b.n	80013d4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013c0:	f7ff fcfe 	bl	8000dc0 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013ce:	d901      	bls.n	80013d4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e007      	b.n	80013e4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013d4:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <HAL_PWREx_EnableOverDrive+0x98>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013e0:	d1ee      	bne.n	80013c0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40023800 	.word	0x40023800
 80013f0:	420e0040 	.word	0x420e0040
 80013f4:	40007000 	.word	0x40007000
 80013f8:	420e0044 	.word	0x420e0044

080013fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0cc      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001410:	4b68      	ldr	r3, [pc, #416]	; (80015b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 030f 	and.w	r3, r3, #15
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	429a      	cmp	r2, r3
 800141c:	d90c      	bls.n	8001438 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800141e:	4b65      	ldr	r3, [pc, #404]	; (80015b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001426:	4b63      	ldr	r3, [pc, #396]	; (80015b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	429a      	cmp	r2, r3
 8001432:	d001      	beq.n	8001438 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e0b8      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d020      	beq.n	8001486 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001450:	4b59      	ldr	r3, [pc, #356]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	4a58      	ldr	r2, [pc, #352]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001456:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800145a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001468:	4b53      	ldr	r3, [pc, #332]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	4a52      	ldr	r2, [pc, #328]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800146e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001472:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001474:	4b50      	ldr	r3, [pc, #320]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	494d      	ldr	r1, [pc, #308]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001482:	4313      	orrs	r3, r2
 8001484:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d044      	beq.n	800151c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d107      	bne.n	80014aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149a:	4b47      	ldr	r3, [pc, #284]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d119      	bne.n	80014da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e07f      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d003      	beq.n	80014ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d107      	bne.n	80014ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ba:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d109      	bne.n	80014da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e06f      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ca:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e067      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014da:	4b37      	ldr	r3, [pc, #220]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f023 0203 	bic.w	r2, r3, #3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	4934      	ldr	r1, [pc, #208]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014ec:	f7ff fc68 	bl	8000dc0 <HAL_GetTick>
 80014f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f2:	e00a      	b.n	800150a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f4:	f7ff fc64 	bl	8000dc0 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001502:	4293      	cmp	r3, r2
 8001504:	d901      	bls.n	800150a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e04f      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150a:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 020c 	and.w	r2, r3, #12
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	429a      	cmp	r2, r3
 800151a:	d1eb      	bne.n	80014f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800151c:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <HAL_RCC_ClockConfig+0x1b8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 030f 	and.w	r3, r3, #15
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d20c      	bcs.n	8001544 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152a:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <HAL_RCC_ClockConfig+0x1b8>)
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001532:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	429a      	cmp	r2, r3
 800153e:	d001      	beq.n	8001544 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e032      	b.n	80015aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	d008      	beq.n	8001562 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	4916      	ldr	r1, [pc, #88]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800155e:	4313      	orrs	r3, r2
 8001560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	2b00      	cmp	r3, #0
 800156c:	d009      	beq.n	8001582 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	490e      	ldr	r1, [pc, #56]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	4313      	orrs	r3, r2
 8001580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001582:	f000 f887 	bl	8001694 <HAL_RCC_GetSysClockFreq>
 8001586:	4602      	mov	r2, r0
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	490a      	ldr	r1, [pc, #40]	; (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 8001594:	5ccb      	ldrb	r3, [r1, r3]
 8001596:	fa22 f303 	lsr.w	r3, r2, r3
 800159a:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 800159c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_RCC_ClockConfig+0x1c8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fafe 	bl	8000ba4 <HAL_InitTick>

  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023c00 	.word	0x40023c00
 80015b8:	40023800 	.word	0x40023800
 80015bc:	0800669c 	.word	0x0800669c
 80015c0:	20000050 	.word	0x20000050
 80015c4:	20000054 	.word	0x20000054

080015c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <HAL_RCC_GetHCLKFreq+0x14>)
 80015ce:	681b      	ldr	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	20000050 	.word	0x20000050

080015e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015e4:	f7ff fff0 	bl	80015c8 <HAL_RCC_GetHCLKFreq>
 80015e8:	4602      	mov	r2, r0
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	0a9b      	lsrs	r3, r3, #10
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	4903      	ldr	r1, [pc, #12]	; (8001604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015f6:	5ccb      	ldrb	r3, [r1, r3]
 80015f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40023800 	.word	0x40023800
 8001604:	080066ac 	.word	0x080066ac

08001608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800160c:	f7ff ffdc 	bl	80015c8 <HAL_RCC_GetHCLKFreq>
 8001610:	4602      	mov	r2, r0
 8001612:	4b05      	ldr	r3, [pc, #20]	; (8001628 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	0b5b      	lsrs	r3, r3, #13
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	4903      	ldr	r1, [pc, #12]	; (800162c <HAL_RCC_GetPCLK2Freq+0x24>)
 800161e:	5ccb      	ldrb	r3, [r1, r3]
 8001620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001624:	4618      	mov	r0, r3
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40023800 	.word	0x40023800
 800162c:	080066ac 	.word	0x080066ac

08001630 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	220f      	movs	r2, #15
 800163e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_RCC_GetClockConfig+0x5c>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f003 0203 	and.w	r2, r3, #3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <HAL_RCC_GetClockConfig+0x5c>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <HAL_RCC_GetClockConfig+0x5c>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001664:	4b09      	ldr	r3, [pc, #36]	; (800168c <HAL_RCC_GetClockConfig+0x5c>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	08db      	lsrs	r3, r3, #3
 800166a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001672:	4b07      	ldr	r3, [pc, #28]	; (8001690 <HAL_RCC_GetClockConfig+0x60>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 020f 	and.w	r2, r3, #15
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	601a      	str	r2, [r3, #0]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40023800 	.word	0x40023800
 8001690:	40023c00 	.word	0x40023c00

08001694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001698:	b0ae      	sub	sp, #184	; 0xb8
 800169a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800169c:	2300      	movs	r3, #0
 800169e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016ba:	4bcb      	ldr	r3, [pc, #812]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 030c 	and.w	r3, r3, #12
 80016c2:	2b0c      	cmp	r3, #12
 80016c4:	f200 8206 	bhi.w	8001ad4 <HAL_RCC_GetSysClockFreq+0x440>
 80016c8:	a201      	add	r2, pc, #4	; (adr r2, 80016d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80016ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ce:	bf00      	nop
 80016d0:	08001705 	.word	0x08001705
 80016d4:	08001ad5 	.word	0x08001ad5
 80016d8:	08001ad5 	.word	0x08001ad5
 80016dc:	08001ad5 	.word	0x08001ad5
 80016e0:	0800170d 	.word	0x0800170d
 80016e4:	08001ad5 	.word	0x08001ad5
 80016e8:	08001ad5 	.word	0x08001ad5
 80016ec:	08001ad5 	.word	0x08001ad5
 80016f0:	08001715 	.word	0x08001715
 80016f4:	08001ad5 	.word	0x08001ad5
 80016f8:	08001ad5 	.word	0x08001ad5
 80016fc:	08001ad5 	.word	0x08001ad5
 8001700:	08001905 	.word	0x08001905
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001704:	4bb9      	ldr	r3, [pc, #740]	; (80019ec <HAL_RCC_GetSysClockFreq+0x358>)
 8001706:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800170a:	e1e7      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800170c:	4bb8      	ldr	r3, [pc, #736]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800170e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001712:	e1e3      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001714:	4bb4      	ldr	r3, [pc, #720]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800171c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001720:	4bb1      	ldr	r3, [pc, #708]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d071      	beq.n	8001810 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800172c:	4bae      	ldr	r3, [pc, #696]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	099b      	lsrs	r3, r3, #6
 8001732:	2200      	movs	r2, #0
 8001734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001738:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800173c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001744:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800174e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001752:	4622      	mov	r2, r4
 8001754:	462b      	mov	r3, r5
 8001756:	f04f 0000 	mov.w	r0, #0
 800175a:	f04f 0100 	mov.w	r1, #0
 800175e:	0159      	lsls	r1, r3, #5
 8001760:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001764:	0150      	lsls	r0, r2, #5
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4621      	mov	r1, r4
 800176c:	1a51      	subs	r1, r2, r1
 800176e:	6439      	str	r1, [r7, #64]	; 0x40
 8001770:	4629      	mov	r1, r5
 8001772:	eb63 0301 	sbc.w	r3, r3, r1
 8001776:	647b      	str	r3, [r7, #68]	; 0x44
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001784:	4649      	mov	r1, r9
 8001786:	018b      	lsls	r3, r1, #6
 8001788:	4641      	mov	r1, r8
 800178a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800178e:	4641      	mov	r1, r8
 8001790:	018a      	lsls	r2, r1, #6
 8001792:	4641      	mov	r1, r8
 8001794:	1a51      	subs	r1, r2, r1
 8001796:	63b9      	str	r1, [r7, #56]	; 0x38
 8001798:	4649      	mov	r1, r9
 800179a:	eb63 0301 	sbc.w	r3, r3, r1
 800179e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80017ac:	4649      	mov	r1, r9
 80017ae:	00cb      	lsls	r3, r1, #3
 80017b0:	4641      	mov	r1, r8
 80017b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017b6:	4641      	mov	r1, r8
 80017b8:	00ca      	lsls	r2, r1, #3
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	4603      	mov	r3, r0
 80017c0:	4622      	mov	r2, r4
 80017c2:	189b      	adds	r3, r3, r2
 80017c4:	633b      	str	r3, [r7, #48]	; 0x30
 80017c6:	462b      	mov	r3, r5
 80017c8:	460a      	mov	r2, r1
 80017ca:	eb42 0303 	adc.w	r3, r2, r3
 80017ce:	637b      	str	r3, [r7, #52]	; 0x34
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	f04f 0300 	mov.w	r3, #0
 80017d8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80017dc:	4629      	mov	r1, r5
 80017de:	024b      	lsls	r3, r1, #9
 80017e0:	4621      	mov	r1, r4
 80017e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017e6:	4621      	mov	r1, r4
 80017e8:	024a      	lsls	r2, r1, #9
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017f2:	2200      	movs	r2, #0
 80017f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80017fc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001800:	f7fe fd06 	bl	8000210 <__aeabi_uldivmod>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4613      	mov	r3, r2
 800180a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800180e:	e067      	b.n	80018e0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001810:	4b75      	ldr	r3, [pc, #468]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	099b      	lsrs	r3, r3, #6
 8001816:	2200      	movs	r2, #0
 8001818:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800181c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001820:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001828:	67bb      	str	r3, [r7, #120]	; 0x78
 800182a:	2300      	movs	r3, #0
 800182c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800182e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001832:	4622      	mov	r2, r4
 8001834:	462b      	mov	r3, r5
 8001836:	f04f 0000 	mov.w	r0, #0
 800183a:	f04f 0100 	mov.w	r1, #0
 800183e:	0159      	lsls	r1, r3, #5
 8001840:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001844:	0150      	lsls	r0, r2, #5
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4621      	mov	r1, r4
 800184c:	1a51      	subs	r1, r2, r1
 800184e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001850:	4629      	mov	r1, r5
 8001852:	eb63 0301 	sbc.w	r3, r3, r1
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001864:	4649      	mov	r1, r9
 8001866:	018b      	lsls	r3, r1, #6
 8001868:	4641      	mov	r1, r8
 800186a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800186e:	4641      	mov	r1, r8
 8001870:	018a      	lsls	r2, r1, #6
 8001872:	4641      	mov	r1, r8
 8001874:	ebb2 0a01 	subs.w	sl, r2, r1
 8001878:	4649      	mov	r1, r9
 800187a:	eb63 0b01 	sbc.w	fp, r3, r1
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	f04f 0300 	mov.w	r3, #0
 8001886:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800188a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800188e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001892:	4692      	mov	sl, r2
 8001894:	469b      	mov	fp, r3
 8001896:	4623      	mov	r3, r4
 8001898:	eb1a 0303 	adds.w	r3, sl, r3
 800189c:	623b      	str	r3, [r7, #32]
 800189e:	462b      	mov	r3, r5
 80018a0:	eb4b 0303 	adc.w	r3, fp, r3
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80018b2:	4629      	mov	r1, r5
 80018b4:	028b      	lsls	r3, r1, #10
 80018b6:	4621      	mov	r1, r4
 80018b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018bc:	4621      	mov	r1, r4
 80018be:	028a      	lsls	r2, r1, #10
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018c8:	2200      	movs	r2, #0
 80018ca:	673b      	str	r3, [r7, #112]	; 0x70
 80018cc:	677a      	str	r2, [r7, #116]	; 0x74
 80018ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80018d2:	f7fe fc9d 	bl	8000210 <__aeabi_uldivmod>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4613      	mov	r3, r2
 80018dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018e0:	4b41      	ldr	r3, [pc, #260]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	0c1b      	lsrs	r3, r3, #16
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	3301      	adds	r3, #1
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80018f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80018f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001902:	e0eb      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001904:	4b38      	ldr	r3, [pc, #224]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800190c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001910:	4b35      	ldr	r3, [pc, #212]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d06b      	beq.n	80019f4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800191c:	4b32      	ldr	r3, [pc, #200]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	099b      	lsrs	r3, r3, #6
 8001922:	2200      	movs	r2, #0
 8001924:	66bb      	str	r3, [r7, #104]	; 0x68
 8001926:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001928:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800192a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800192e:	663b      	str	r3, [r7, #96]	; 0x60
 8001930:	2300      	movs	r3, #0
 8001932:	667b      	str	r3, [r7, #100]	; 0x64
 8001934:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001938:	4622      	mov	r2, r4
 800193a:	462b      	mov	r3, r5
 800193c:	f04f 0000 	mov.w	r0, #0
 8001940:	f04f 0100 	mov.w	r1, #0
 8001944:	0159      	lsls	r1, r3, #5
 8001946:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800194a:	0150      	lsls	r0, r2, #5
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4621      	mov	r1, r4
 8001952:	1a51      	subs	r1, r2, r1
 8001954:	61b9      	str	r1, [r7, #24]
 8001956:	4629      	mov	r1, r5
 8001958:	eb63 0301 	sbc.w	r3, r3, r1
 800195c:	61fb      	str	r3, [r7, #28]
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800196a:	4659      	mov	r1, fp
 800196c:	018b      	lsls	r3, r1, #6
 800196e:	4651      	mov	r1, sl
 8001970:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001974:	4651      	mov	r1, sl
 8001976:	018a      	lsls	r2, r1, #6
 8001978:	4651      	mov	r1, sl
 800197a:	ebb2 0801 	subs.w	r8, r2, r1
 800197e:	4659      	mov	r1, fp
 8001980:	eb63 0901 	sbc.w	r9, r3, r1
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001990:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001994:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001998:	4690      	mov	r8, r2
 800199a:	4699      	mov	r9, r3
 800199c:	4623      	mov	r3, r4
 800199e:	eb18 0303 	adds.w	r3, r8, r3
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	462b      	mov	r3, r5
 80019a6:	eb49 0303 	adc.w	r3, r9, r3
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80019b8:	4629      	mov	r1, r5
 80019ba:	024b      	lsls	r3, r1, #9
 80019bc:	4621      	mov	r1, r4
 80019be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019c2:	4621      	mov	r1, r4
 80019c4:	024a      	lsls	r2, r1, #9
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019ce:	2200      	movs	r2, #0
 80019d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80019d2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80019d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80019d8:	f7fe fc1a 	bl	8000210 <__aeabi_uldivmod>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4613      	mov	r3, r2
 80019e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80019e6:	e065      	b.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x420>
 80019e8:	40023800 	.word	0x40023800
 80019ec:	00f42400 	.word	0x00f42400
 80019f0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f4:	4b3d      	ldr	r3, [pc, #244]	; (8001aec <HAL_RCC_GetSysClockFreq+0x458>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	099b      	lsrs	r3, r3, #6
 80019fa:	2200      	movs	r2, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	4611      	mov	r1, r2
 8001a00:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a04:	653b      	str	r3, [r7, #80]	; 0x50
 8001a06:	2300      	movs	r3, #0
 8001a08:	657b      	str	r3, [r7, #84]	; 0x54
 8001a0a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001a0e:	4642      	mov	r2, r8
 8001a10:	464b      	mov	r3, r9
 8001a12:	f04f 0000 	mov.w	r0, #0
 8001a16:	f04f 0100 	mov.w	r1, #0
 8001a1a:	0159      	lsls	r1, r3, #5
 8001a1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a20:	0150      	lsls	r0, r2, #5
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4641      	mov	r1, r8
 8001a28:	1a51      	subs	r1, r2, r1
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	4649      	mov	r1, r9
 8001a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001a40:	4659      	mov	r1, fp
 8001a42:	018b      	lsls	r3, r1, #6
 8001a44:	4651      	mov	r1, sl
 8001a46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a4a:	4651      	mov	r1, sl
 8001a4c:	018a      	lsls	r2, r1, #6
 8001a4e:	4651      	mov	r1, sl
 8001a50:	1a54      	subs	r4, r2, r1
 8001a52:	4659      	mov	r1, fp
 8001a54:	eb63 0501 	sbc.w	r5, r3, r1
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	00eb      	lsls	r3, r5, #3
 8001a62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a66:	00e2      	lsls	r2, r4, #3
 8001a68:	4614      	mov	r4, r2
 8001a6a:	461d      	mov	r5, r3
 8001a6c:	4643      	mov	r3, r8
 8001a6e:	18e3      	adds	r3, r4, r3
 8001a70:	603b      	str	r3, [r7, #0]
 8001a72:	464b      	mov	r3, r9
 8001a74:	eb45 0303 	adc.w	r3, r5, r3
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	f04f 0300 	mov.w	r3, #0
 8001a82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a86:	4629      	mov	r1, r5
 8001a88:	028b      	lsls	r3, r1, #10
 8001a8a:	4621      	mov	r1, r4
 8001a8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a90:	4621      	mov	r1, r4
 8001a92:	028a      	lsls	r2, r1, #10
 8001a94:	4610      	mov	r0, r2
 8001a96:	4619      	mov	r1, r3
 8001a98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001aa0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001aa2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001aa6:	f7fe fbb3 	bl	8000210 <__aeabi_uldivmod>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4613      	mov	r3, r2
 8001ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ab4:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <HAL_RCC_GetSysClockFreq+0x458>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	0f1b      	lsrs	r3, r3, #28
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001ac2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001ac6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ace:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001ad2:	e003      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001ad6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001ada:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001adc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	37b8      	adds	r7, #184	; 0xb8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800
 8001af0:	00f42400 	.word	0x00f42400

08001af4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e28d      	b.n	8002022 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 8083 	beq.w	8001c1a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b14:	4b94      	ldr	r3, [pc, #592]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d019      	beq.n	8001b54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b20:	4b91      	ldr	r3, [pc, #580]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d106      	bne.n	8001b3a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b2c:	4b8e      	ldr	r3, [pc, #568]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b38:	d00c      	beq.n	8001b54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b3a:	4b8b      	ldr	r3, [pc, #556]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b42:	2b0c      	cmp	r3, #12
 8001b44:	d112      	bne.n	8001b6c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b46:	4b88      	ldr	r3, [pc, #544]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b52:	d10b      	bne.n	8001b6c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b54:	4b84      	ldr	r3, [pc, #528]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d05b      	beq.n	8001c18 <HAL_RCC_OscConfig+0x124>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d157      	bne.n	8001c18 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e25a      	b.n	8002022 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b74:	d106      	bne.n	8001b84 <HAL_RCC_OscConfig+0x90>
 8001b76:	4b7c      	ldr	r3, [pc, #496]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a7b      	ldr	r2, [pc, #492]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e01d      	b.n	8001bc0 <HAL_RCC_OscConfig+0xcc>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b8c:	d10c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0xb4>
 8001b8e:	4b76      	ldr	r3, [pc, #472]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a75      	ldr	r2, [pc, #468]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	4b73      	ldr	r3, [pc, #460]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a72      	ldr	r2, [pc, #456]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	e00b      	b.n	8001bc0 <HAL_RCC_OscConfig+0xcc>
 8001ba8:	4b6f      	ldr	r3, [pc, #444]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a6e      	ldr	r2, [pc, #440]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	4b6c      	ldr	r3, [pc, #432]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a6b      	ldr	r2, [pc, #428]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d013      	beq.n	8001bf0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc8:	f7ff f8fa 	bl	8000dc0 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd0:	f7ff f8f6 	bl	8000dc0 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b64      	cmp	r3, #100	; 0x64
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e21f      	b.n	8002022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	4b61      	ldr	r3, [pc, #388]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0xdc>
 8001bee:	e014      	b.n	8001c1a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7ff f8e6 	bl	8000dc0 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bf8:	f7ff f8e2 	bl	8000dc0 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b64      	cmp	r3, #100	; 0x64
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e20b      	b.n	8002022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0a:	4b57      	ldr	r3, [pc, #348]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x104>
 8001c16:	e000      	b.n	8001c1a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d06f      	beq.n	8001d06 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c26:	4b50      	ldr	r3, [pc, #320]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d017      	beq.n	8001c62 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c32:	4b4d      	ldr	r3, [pc, #308]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d105      	bne.n	8001c4a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c3e:	4b4a      	ldr	r3, [pc, #296]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00b      	beq.n	8001c62 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c4a:	4b47      	ldr	r3, [pc, #284]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c52:	2b0c      	cmp	r3, #12
 8001c54:	d11c      	bne.n	8001c90 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c56:	4b44      	ldr	r3, [pc, #272]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d116      	bne.n	8001c90 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c62:	4b41      	ldr	r3, [pc, #260]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d005      	beq.n	8001c7a <HAL_RCC_OscConfig+0x186>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d001      	beq.n	8001c7a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e1d3      	b.n	8002022 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7a:	4b3b      	ldr	r3, [pc, #236]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4937      	ldr	r1, [pc, #220]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8e:	e03a      	b.n	8001d06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d020      	beq.n	8001cda <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c98:	4b34      	ldr	r3, [pc, #208]	; (8001d6c <HAL_RCC_OscConfig+0x278>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9e:	f7ff f88f 	bl	8000dc0 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca6:	f7ff f88b 	bl	8000dc0 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e1b4      	b.n	8002022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc4:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	4925      	ldr	r1, [pc, #148]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	600b      	str	r3, [r1, #0]
 8001cd8:	e015      	b.n	8001d06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cda:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <HAL_RCC_OscConfig+0x278>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce0:	f7ff f86e 	bl	8000dc0 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce8:	f7ff f86a 	bl	8000dc0 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e193      	b.n	8002022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfa:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d036      	beq.n	8001d80 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d016      	beq.n	8001d48 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <HAL_RCC_OscConfig+0x27c>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d20:	f7ff f84e 	bl	8000dc0 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d28:	f7ff f84a 	bl	8000dc0 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e173      	b.n	8002022 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f0      	beq.n	8001d28 <HAL_RCC_OscConfig+0x234>
 8001d46:	e01b      	b.n	8001d80 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <HAL_RCC_OscConfig+0x27c>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4e:	f7ff f837 	bl	8000dc0 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d54:	e00e      	b.n	8001d74 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d56:	f7ff f833 	bl	8000dc0 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d907      	bls.n	8001d74 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e15c      	b.n	8002022 <HAL_RCC_OscConfig+0x52e>
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	42470000 	.word	0x42470000
 8001d70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d74:	4b8a      	ldr	r3, [pc, #552]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1ea      	bne.n	8001d56 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 8097 	beq.w	8001ebc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d92:	4b83      	ldr	r3, [pc, #524]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10f      	bne.n	8001dbe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	4b7f      	ldr	r3, [pc, #508]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	4a7e      	ldr	r2, [pc, #504]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dac:	6413      	str	r3, [r2, #64]	; 0x40
 8001dae:	4b7c      	ldr	r3, [pc, #496]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbe:	4b79      	ldr	r3, [pc, #484]	; (8001fa4 <HAL_RCC_OscConfig+0x4b0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d118      	bne.n	8001dfc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dca:	4b76      	ldr	r3, [pc, #472]	; (8001fa4 <HAL_RCC_OscConfig+0x4b0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a75      	ldr	r2, [pc, #468]	; (8001fa4 <HAL_RCC_OscConfig+0x4b0>)
 8001dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dd6:	f7fe fff3 	bl	8000dc0 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dde:	f7fe ffef 	bl	8000dc0 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e118      	b.n	8002022 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df0:	4b6c      	ldr	r3, [pc, #432]	; (8001fa4 <HAL_RCC_OscConfig+0x4b0>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d106      	bne.n	8001e12 <HAL_RCC_OscConfig+0x31e>
 8001e04:	4b66      	ldr	r3, [pc, #408]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e08:	4a65      	ldr	r2, [pc, #404]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e10:	e01c      	b.n	8001e4c <HAL_RCC_OscConfig+0x358>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b05      	cmp	r3, #5
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x340>
 8001e1a:	4b61      	ldr	r3, [pc, #388]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1e:	4a60      	ldr	r2, [pc, #384]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001e20:	f043 0304 	orr.w	r3, r3, #4
 8001e24:	6713      	str	r3, [r2, #112]	; 0x70
 8001e26:	4b5e      	ldr	r3, [pc, #376]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2a:	4a5d      	ldr	r2, [pc, #372]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6713      	str	r3, [r2, #112]	; 0x70
 8001e32:	e00b      	b.n	8001e4c <HAL_RCC_OscConfig+0x358>
 8001e34:	4b5a      	ldr	r3, [pc, #360]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e38:	4a59      	ldr	r2, [pc, #356]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001e3a:	f023 0301 	bic.w	r3, r3, #1
 8001e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e40:	4b57      	ldr	r3, [pc, #348]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e44:	4a56      	ldr	r2, [pc, #344]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001e46:	f023 0304 	bic.w	r3, r3, #4
 8001e4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d015      	beq.n	8001e80 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e54:	f7fe ffb4 	bl	8000dc0 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5a:	e00a      	b.n	8001e72 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e5c:	f7fe ffb0 	bl	8000dc0 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e0d7      	b.n	8002022 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e72:	4b4b      	ldr	r3, [pc, #300]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0ee      	beq.n	8001e5c <HAL_RCC_OscConfig+0x368>
 8001e7e:	e014      	b.n	8001eaa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e80:	f7fe ff9e 	bl	8000dc0 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e86:	e00a      	b.n	8001e9e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e88:	f7fe ff9a 	bl	8000dc0 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e0c1      	b.n	8002022 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e9e:	4b40      	ldr	r3, [pc, #256]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1ee      	bne.n	8001e88 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eaa:	7dfb      	ldrb	r3, [r7, #23]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d105      	bne.n	8001ebc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb0:	4b3b      	ldr	r3, [pc, #236]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	4a3a      	ldr	r2, [pc, #232]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001eb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 80ad 	beq.w	8002020 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ec6:	4b36      	ldr	r3, [pc, #216]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b08      	cmp	r3, #8
 8001ed0:	d060      	beq.n	8001f94 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d145      	bne.n	8001f66 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eda:	4b33      	ldr	r3, [pc, #204]	; (8001fa8 <HAL_RCC_OscConfig+0x4b4>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7fe ff6e 	bl	8000dc0 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee8:	f7fe ff6a 	bl	8000dc0 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e093      	b.n	8002022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efa:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69da      	ldr	r2, [r3, #28]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	019b      	lsls	r3, r3, #6
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1c:	085b      	lsrs	r3, r3, #1
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	041b      	lsls	r3, r3, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f28:	061b      	lsls	r3, r3, #24
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f30:	071b      	lsls	r3, r3, #28
 8001f32:	491b      	ldr	r1, [pc, #108]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f38:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <HAL_RCC_OscConfig+0x4b4>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7fe ff3f 	bl	8000dc0 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f46:	f7fe ff3b 	bl	8000dc0 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e064      	b.n	8002022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x452>
 8001f64:	e05c      	b.n	8002020 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f66:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <HAL_RCC_OscConfig+0x4b4>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6c:	f7fe ff28 	bl	8000dc0 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f74:	f7fe ff24 	bl	8000dc0 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e04d      	b.n	8002022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f86:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0x480>
 8001f92:	e045      	b.n	8002020 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d107      	bne.n	8001fac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e040      	b.n	8002022 <HAL_RCC_OscConfig+0x52e>
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40007000 	.word	0x40007000
 8001fa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fac:	4b1f      	ldr	r3, [pc, #124]	; (800202c <HAL_RCC_OscConfig+0x538>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d030      	beq.n	800201c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d129      	bne.n	800201c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d122      	bne.n	800201c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fdc:	4013      	ands	r3, r2
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fe2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d119      	bne.n	800201c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff2:	085b      	lsrs	r3, r3, #1
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d10f      	bne.n	800201c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002006:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002008:	429a      	cmp	r2, r3
 800200a:	d107      	bne.n	800201c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002018:	429a      	cmp	r2, r3
 800201a:	d001      	beq.n	8002020 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40023800 	.word	0x40023800

08002030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e041      	b.n	80020c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d106      	bne.n	800205c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f839 	bl	80020ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2202      	movs	r2, #2
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3304      	adds	r3, #4
 800206c:	4619      	mov	r1, r3
 800206e:	4610      	mov	r0, r2
 8002070:	f000 f9c0 	bl	80023f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d001      	beq.n	80020fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e04e      	b.n	800219a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0201 	orr.w	r2, r2, #1
 8002112:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a23      	ldr	r2, [pc, #140]	; (80021a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d022      	beq.n	8002164 <HAL_TIM_Base_Start_IT+0x80>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002126:	d01d      	beq.n	8002164 <HAL_TIM_Base_Start_IT+0x80>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a1f      	ldr	r2, [pc, #124]	; (80021ac <HAL_TIM_Base_Start_IT+0xc8>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d018      	beq.n	8002164 <HAL_TIM_Base_Start_IT+0x80>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a1e      	ldr	r2, [pc, #120]	; (80021b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d013      	beq.n	8002164 <HAL_TIM_Base_Start_IT+0x80>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a1c      	ldr	r2, [pc, #112]	; (80021b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00e      	beq.n	8002164 <HAL_TIM_Base_Start_IT+0x80>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a1b      	ldr	r2, [pc, #108]	; (80021b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d009      	beq.n	8002164 <HAL_TIM_Base_Start_IT+0x80>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a19      	ldr	r2, [pc, #100]	; (80021bc <HAL_TIM_Base_Start_IT+0xd8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d004      	beq.n	8002164 <HAL_TIM_Base_Start_IT+0x80>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a18      	ldr	r2, [pc, #96]	; (80021c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d111      	bne.n	8002188 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b06      	cmp	r3, #6
 8002174:	d010      	beq.n	8002198 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f042 0201 	orr.w	r2, r2, #1
 8002184:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002186:	e007      	b.n	8002198 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0201 	orr.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40010000 	.word	0x40010000
 80021ac:	40000400 	.word	0x40000400
 80021b0:	40000800 	.word	0x40000800
 80021b4:	40000c00 	.word	0x40000c00
 80021b8:	40010400 	.word	0x40010400
 80021bc:	40014000 	.word	0x40014000
 80021c0:	40001800 	.word	0x40001800

080021c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d020      	beq.n	8002228 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d01b      	beq.n	8002228 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f06f 0202 	mvn.w	r2, #2
 80021f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f8d2 	bl	80023b8 <HAL_TIM_IC_CaptureCallback>
 8002214:	e005      	b.n	8002222 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f8c4 	bl	80023a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f8d5 	bl	80023cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b00      	cmp	r3, #0
 8002230:	d020      	beq.n	8002274 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d01b      	beq.n	8002274 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f06f 0204 	mvn.w	r2, #4
 8002244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2202      	movs	r2, #2
 800224a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f8ac 	bl	80023b8 <HAL_TIM_IC_CaptureCallback>
 8002260:	e005      	b.n	800226e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f89e 	bl	80023a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f8af 	bl	80023cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d020      	beq.n	80022c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f003 0308 	and.w	r3, r3, #8
 8002284:	2b00      	cmp	r3, #0
 8002286:	d01b      	beq.n	80022c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f06f 0208 	mvn.w	r2, #8
 8002290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2204      	movs	r2, #4
 8002296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f886 	bl	80023b8 <HAL_TIM_IC_CaptureCallback>
 80022ac:	e005      	b.n	80022ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f878 	bl	80023a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f889 	bl	80023cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d020      	beq.n	800230c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d01b      	beq.n	800230c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0210 	mvn.w	r2, #16
 80022dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2208      	movs	r2, #8
 80022e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f860 	bl	80023b8 <HAL_TIM_IC_CaptureCallback>
 80022f8:	e005      	b.n	8002306 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f852 	bl	80023a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f863 	bl	80023cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00c      	beq.n	8002330 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d007      	beq.n	8002330 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f06f 0201 	mvn.w	r2, #1
 8002328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7fe fbae 	bl	8000a8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00c      	beq.n	8002354 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002340:	2b00      	cmp	r3, #0
 8002342:	d007      	beq.n	8002354 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800234c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f906 	bl	8002560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00c      	beq.n	8002378 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002364:	2b00      	cmp	r3, #0
 8002366:	d007      	beq.n	8002378 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f834 	bl	80023e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f003 0320 	and.w	r3, r3, #32
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00c      	beq.n	800239c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f003 0320 	and.w	r3, r3, #32
 8002388:	2b00      	cmp	r3, #0
 800238a:	d007      	beq.n	800239c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0220 	mvn.w	r2, #32
 8002394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f8d8 	bl	800254c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800239c:	bf00      	nop
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a46      	ldr	r2, [pc, #280]	; (8002520 <TIM_Base_SetConfig+0x12c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d013      	beq.n	8002434 <TIM_Base_SetConfig+0x40>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002412:	d00f      	beq.n	8002434 <TIM_Base_SetConfig+0x40>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a43      	ldr	r2, [pc, #268]	; (8002524 <TIM_Base_SetConfig+0x130>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d00b      	beq.n	8002434 <TIM_Base_SetConfig+0x40>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a42      	ldr	r2, [pc, #264]	; (8002528 <TIM_Base_SetConfig+0x134>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d007      	beq.n	8002434 <TIM_Base_SetConfig+0x40>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a41      	ldr	r2, [pc, #260]	; (800252c <TIM_Base_SetConfig+0x138>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d003      	beq.n	8002434 <TIM_Base_SetConfig+0x40>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a40      	ldr	r2, [pc, #256]	; (8002530 <TIM_Base_SetConfig+0x13c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d108      	bne.n	8002446 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800243a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	4313      	orrs	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a35      	ldr	r2, [pc, #212]	; (8002520 <TIM_Base_SetConfig+0x12c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d02b      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002454:	d027      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a32      	ldr	r2, [pc, #200]	; (8002524 <TIM_Base_SetConfig+0x130>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d023      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a31      	ldr	r2, [pc, #196]	; (8002528 <TIM_Base_SetConfig+0x134>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d01f      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a30      	ldr	r2, [pc, #192]	; (800252c <TIM_Base_SetConfig+0x138>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d01b      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a2f      	ldr	r2, [pc, #188]	; (8002530 <TIM_Base_SetConfig+0x13c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d017      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a2e      	ldr	r2, [pc, #184]	; (8002534 <TIM_Base_SetConfig+0x140>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d013      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a2d      	ldr	r2, [pc, #180]	; (8002538 <TIM_Base_SetConfig+0x144>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d00f      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a2c      	ldr	r2, [pc, #176]	; (800253c <TIM_Base_SetConfig+0x148>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d00b      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a2b      	ldr	r2, [pc, #172]	; (8002540 <TIM_Base_SetConfig+0x14c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d007      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a2a      	ldr	r2, [pc, #168]	; (8002544 <TIM_Base_SetConfig+0x150>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d003      	beq.n	80024a6 <TIM_Base_SetConfig+0xb2>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a29      	ldr	r2, [pc, #164]	; (8002548 <TIM_Base_SetConfig+0x154>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d108      	bne.n	80024b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a10      	ldr	r2, [pc, #64]	; (8002520 <TIM_Base_SetConfig+0x12c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d003      	beq.n	80024ec <TIM_Base_SetConfig+0xf8>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a12      	ldr	r2, [pc, #72]	; (8002530 <TIM_Base_SetConfig+0x13c>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d103      	bne.n	80024f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	691a      	ldr	r2, [r3, #16]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b01      	cmp	r3, #1
 8002504:	d105      	bne.n	8002512 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	f023 0201 	bic.w	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	611a      	str	r2, [r3, #16]
  }
}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40010000 	.word	0x40010000
 8002524:	40000400 	.word	0x40000400
 8002528:	40000800 	.word	0x40000800
 800252c:	40000c00 	.word	0x40000c00
 8002530:	40010400 	.word	0x40010400
 8002534:	40014000 	.word	0x40014000
 8002538:	40014400 	.word	0x40014400
 800253c:	40014800 	.word	0x40014800
 8002540:	40001800 	.word	0x40001800
 8002544:	40001c00 	.word	0x40001c00
 8002548:	40002000 	.word	0x40002000

0800254c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e042      	b.n	800260c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d106      	bne.n	80025a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7fe faba 	bl	8000b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2224      	movs	r2, #36	; 0x24
 80025a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f973 	bl	80028a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695a      	ldr	r2, [r3, #20]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2220      	movs	r2, #32
 8002600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08a      	sub	sp, #40	; 0x28
 8002618:	af02      	add	r7, sp, #8
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	603b      	str	r3, [r7, #0]
 8002620:	4613      	mov	r3, r2
 8002622:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b20      	cmp	r3, #32
 8002632:	d175      	bne.n	8002720 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <HAL_UART_Transmit+0x2c>
 800263a:	88fb      	ldrh	r3, [r7, #6]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e06e      	b.n	8002722 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2221      	movs	r2, #33	; 0x21
 800264e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002652:	f7fe fbb5 	bl	8000dc0 <HAL_GetTick>
 8002656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	88fa      	ldrh	r2, [r7, #6]
 800265c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	88fa      	ldrh	r2, [r7, #6]
 8002662:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800266c:	d108      	bne.n	8002680 <HAL_UART_Transmit+0x6c>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d104      	bne.n	8002680 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	61bb      	str	r3, [r7, #24]
 800267e:	e003      	b.n	8002688 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002684:	2300      	movs	r3, #0
 8002686:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002688:	e02e      	b.n	80026e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2200      	movs	r2, #0
 8002692:	2180      	movs	r1, #128	; 0x80
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 f848 	bl	800272a <UART_WaitOnFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e03a      	b.n	8002722 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10b      	bne.n	80026ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	3302      	adds	r3, #2
 80026c6:	61bb      	str	r3, [r7, #24]
 80026c8:	e007      	b.n	80026da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	781a      	ldrb	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	3301      	adds	r3, #1
 80026d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1cb      	bne.n	800268a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2200      	movs	r2, #0
 80026fa:	2140      	movs	r1, #64	; 0x40
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 f814 	bl	800272a <UART_WaitOnFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d005      	beq.n	8002714 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2220      	movs	r2, #32
 800270c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e006      	b.n	8002722 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	e000      	b.n	8002722 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002720:	2302      	movs	r3, #2
  }
}
 8002722:	4618      	mov	r0, r3
 8002724:	3720      	adds	r7, #32
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b086      	sub	sp, #24
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	603b      	str	r3, [r7, #0]
 8002736:	4613      	mov	r3, r2
 8002738:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800273a:	e03b      	b.n	80027b4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002742:	d037      	beq.n	80027b4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002744:	f7fe fb3c 	bl	8000dc0 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	6a3a      	ldr	r2, [r7, #32]
 8002750:	429a      	cmp	r2, r3
 8002752:	d302      	bcc.n	800275a <UART_WaitOnFlagUntilTimeout+0x30>
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e03a      	b.n	80027d4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d023      	beq.n	80027b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b80      	cmp	r3, #128	; 0x80
 8002770:	d020      	beq.n	80027b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2b40      	cmp	r3, #64	; 0x40
 8002776:	d01d      	beq.n	80027b4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b08      	cmp	r3, #8
 8002784:	d116      	bne.n	80027b4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 f81d 	bl	80027dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2208      	movs	r2, #8
 80027a6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e00f      	b.n	80027d4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	4013      	ands	r3, r2
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	bf0c      	ite	eq
 80027c4:	2301      	moveq	r3, #1
 80027c6:	2300      	movne	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d0b4      	beq.n	800273c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027dc:	b480      	push	{r7}
 80027de:	b095      	sub	sp, #84	; 0x54
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	330c      	adds	r3, #12
 80027ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ee:	e853 3f00 	ldrex	r3, [r3]
 80027f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80027f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	330c      	adds	r3, #12
 8002802:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002804:	643a      	str	r2, [r7, #64]	; 0x40
 8002806:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002808:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800280a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800280c:	e841 2300 	strex	r3, r2, [r1]
 8002810:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1e5      	bne.n	80027e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	3314      	adds	r3, #20
 800281e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	e853 3f00 	ldrex	r3, [r3]
 8002826:	61fb      	str	r3, [r7, #28]
   return(result);
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f023 0301 	bic.w	r3, r3, #1
 800282e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	3314      	adds	r3, #20
 8002836:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002838:	62fa      	str	r2, [r7, #44]	; 0x2c
 800283a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800283e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002840:	e841 2300 	strex	r3, r2, [r1]
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1e5      	bne.n	8002818 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002850:	2b01      	cmp	r3, #1
 8002852:	d119      	bne.n	8002888 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	330c      	adds	r3, #12
 800285a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	e853 3f00 	ldrex	r3, [r3]
 8002862:	60bb      	str	r3, [r7, #8]
   return(result);
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f023 0310 	bic.w	r3, r3, #16
 800286a:	647b      	str	r3, [r7, #68]	; 0x44
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	330c      	adds	r3, #12
 8002872:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002874:	61ba      	str	r2, [r7, #24]
 8002876:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002878:	6979      	ldr	r1, [r7, #20]
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	e841 2300 	strex	r3, r2, [r1]
 8002880:	613b      	str	r3, [r7, #16]
   return(result);
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1e5      	bne.n	8002854 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2220      	movs	r2, #32
 800288c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002896:	bf00      	nop
 8002898:	3754      	adds	r7, #84	; 0x54
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
	...

080028a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028a8:	b0c0      	sub	sp, #256	; 0x100
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80028bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c0:	68d9      	ldr	r1, [r3, #12]
 80028c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	ea40 0301 	orr.w	r3, r0, r1
 80028cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	431a      	orrs	r2, r3
 80028dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80028fc:	f021 010c 	bic.w	r1, r1, #12
 8002900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800290a:	430b      	orrs	r3, r1
 800290c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800290e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800291a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800291e:	6999      	ldr	r1, [r3, #24]
 8002920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	ea40 0301 	orr.w	r3, r0, r1
 800292a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800292c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	4b8f      	ldr	r3, [pc, #572]	; (8002b70 <UART_SetConfig+0x2cc>)
 8002934:	429a      	cmp	r2, r3
 8002936:	d005      	beq.n	8002944 <UART_SetConfig+0xa0>
 8002938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	4b8d      	ldr	r3, [pc, #564]	; (8002b74 <UART_SetConfig+0x2d0>)
 8002940:	429a      	cmp	r2, r3
 8002942:	d104      	bne.n	800294e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002944:	f7fe fe60 	bl	8001608 <HAL_RCC_GetPCLK2Freq>
 8002948:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800294c:	e003      	b.n	8002956 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800294e:	f7fe fe47 	bl	80015e0 <HAL_RCC_GetPCLK1Freq>
 8002952:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002960:	f040 810c 	bne.w	8002b7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002964:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002968:	2200      	movs	r2, #0
 800296a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800296e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002972:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002976:	4622      	mov	r2, r4
 8002978:	462b      	mov	r3, r5
 800297a:	1891      	adds	r1, r2, r2
 800297c:	65b9      	str	r1, [r7, #88]	; 0x58
 800297e:	415b      	adcs	r3, r3
 8002980:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002982:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002986:	4621      	mov	r1, r4
 8002988:	eb12 0801 	adds.w	r8, r2, r1
 800298c:	4629      	mov	r1, r5
 800298e:	eb43 0901 	adc.w	r9, r3, r1
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800299e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029a6:	4690      	mov	r8, r2
 80029a8:	4699      	mov	r9, r3
 80029aa:	4623      	mov	r3, r4
 80029ac:	eb18 0303 	adds.w	r3, r8, r3
 80029b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80029b4:	462b      	mov	r3, r5
 80029b6:	eb49 0303 	adc.w	r3, r9, r3
 80029ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80029be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80029ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80029d2:	460b      	mov	r3, r1
 80029d4:	18db      	adds	r3, r3, r3
 80029d6:	653b      	str	r3, [r7, #80]	; 0x50
 80029d8:	4613      	mov	r3, r2
 80029da:	eb42 0303 	adc.w	r3, r2, r3
 80029de:	657b      	str	r3, [r7, #84]	; 0x54
 80029e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80029e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80029e8:	f7fd fc12 	bl	8000210 <__aeabi_uldivmod>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4b61      	ldr	r3, [pc, #388]	; (8002b78 <UART_SetConfig+0x2d4>)
 80029f2:	fba3 2302 	umull	r2, r3, r3, r2
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	011c      	lsls	r4, r3, #4
 80029fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029fe:	2200      	movs	r2, #0
 8002a00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002a0c:	4642      	mov	r2, r8
 8002a0e:	464b      	mov	r3, r9
 8002a10:	1891      	adds	r1, r2, r2
 8002a12:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a14:	415b      	adcs	r3, r3
 8002a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a1c:	4641      	mov	r1, r8
 8002a1e:	eb12 0a01 	adds.w	sl, r2, r1
 8002a22:	4649      	mov	r1, r9
 8002a24:	eb43 0b01 	adc.w	fp, r3, r1
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a3c:	4692      	mov	sl, r2
 8002a3e:	469b      	mov	fp, r3
 8002a40:	4643      	mov	r3, r8
 8002a42:	eb1a 0303 	adds.w	r3, sl, r3
 8002a46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a4a:	464b      	mov	r3, r9
 8002a4c:	eb4b 0303 	adc.w	r3, fp, r3
 8002a50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	18db      	adds	r3, r3, r3
 8002a6c:	643b      	str	r3, [r7, #64]	; 0x40
 8002a6e:	4613      	mov	r3, r2
 8002a70:	eb42 0303 	adc.w	r3, r2, r3
 8002a74:	647b      	str	r3, [r7, #68]	; 0x44
 8002a76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a7e:	f7fd fbc7 	bl	8000210 <__aeabi_uldivmod>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4611      	mov	r1, r2
 8002a88:	4b3b      	ldr	r3, [pc, #236]	; (8002b78 <UART_SetConfig+0x2d4>)
 8002a8a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	2264      	movs	r2, #100	; 0x64
 8002a92:	fb02 f303 	mul.w	r3, r2, r3
 8002a96:	1acb      	subs	r3, r1, r3
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a9e:	4b36      	ldr	r3, [pc, #216]	; (8002b78 <UART_SetConfig+0x2d4>)
 8002aa0:	fba3 2302 	umull	r2, r3, r3, r2
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002aac:	441c      	add	r4, r3
 8002aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ab8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002abc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002ac0:	4642      	mov	r2, r8
 8002ac2:	464b      	mov	r3, r9
 8002ac4:	1891      	adds	r1, r2, r2
 8002ac6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ac8:	415b      	adcs	r3, r3
 8002aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002acc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	1851      	adds	r1, r2, r1
 8002ad4:	6339      	str	r1, [r7, #48]	; 0x30
 8002ad6:	4649      	mov	r1, r9
 8002ad8:	414b      	adcs	r3, r1
 8002ada:	637b      	str	r3, [r7, #52]	; 0x34
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ae8:	4659      	mov	r1, fp
 8002aea:	00cb      	lsls	r3, r1, #3
 8002aec:	4651      	mov	r1, sl
 8002aee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002af2:	4651      	mov	r1, sl
 8002af4:	00ca      	lsls	r2, r1, #3
 8002af6:	4610      	mov	r0, r2
 8002af8:	4619      	mov	r1, r3
 8002afa:	4603      	mov	r3, r0
 8002afc:	4642      	mov	r2, r8
 8002afe:	189b      	adds	r3, r3, r2
 8002b00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b04:	464b      	mov	r3, r9
 8002b06:	460a      	mov	r2, r1
 8002b08:	eb42 0303 	adc.w	r3, r2, r3
 8002b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b24:	460b      	mov	r3, r1
 8002b26:	18db      	adds	r3, r3, r3
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	eb42 0303 	adc.w	r3, r2, r3
 8002b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b3a:	f7fd fb69 	bl	8000210 <__aeabi_uldivmod>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <UART_SetConfig+0x2d4>)
 8002b44:	fba3 1302 	umull	r1, r3, r3, r2
 8002b48:	095b      	lsrs	r3, r3, #5
 8002b4a:	2164      	movs	r1, #100	; 0x64
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	3332      	adds	r3, #50	; 0x32
 8002b56:	4a08      	ldr	r2, [pc, #32]	; (8002b78 <UART_SetConfig+0x2d4>)
 8002b58:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	f003 0207 	and.w	r2, r3, #7
 8002b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4422      	add	r2, r4
 8002b6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b6c:	e106      	b.n	8002d7c <UART_SetConfig+0x4d8>
 8002b6e:	bf00      	nop
 8002b70:	40011000 	.word	0x40011000
 8002b74:	40011400 	.word	0x40011400
 8002b78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b80:	2200      	movs	r2, #0
 8002b82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002b8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002b8e:	4642      	mov	r2, r8
 8002b90:	464b      	mov	r3, r9
 8002b92:	1891      	adds	r1, r2, r2
 8002b94:	6239      	str	r1, [r7, #32]
 8002b96:	415b      	adcs	r3, r3
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
 8002b9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b9e:	4641      	mov	r1, r8
 8002ba0:	1854      	adds	r4, r2, r1
 8002ba2:	4649      	mov	r1, r9
 8002ba4:	eb43 0501 	adc.w	r5, r3, r1
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	f04f 0300 	mov.w	r3, #0
 8002bb0:	00eb      	lsls	r3, r5, #3
 8002bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bb6:	00e2      	lsls	r2, r4, #3
 8002bb8:	4614      	mov	r4, r2
 8002bba:	461d      	mov	r5, r3
 8002bbc:	4643      	mov	r3, r8
 8002bbe:	18e3      	adds	r3, r4, r3
 8002bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002bc4:	464b      	mov	r3, r9
 8002bc6:	eb45 0303 	adc.w	r3, r5, r3
 8002bca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002bea:	4629      	mov	r1, r5
 8002bec:	008b      	lsls	r3, r1, #2
 8002bee:	4621      	mov	r1, r4
 8002bf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	008a      	lsls	r2, r1, #2
 8002bf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002bfc:	f7fd fb08 	bl	8000210 <__aeabi_uldivmod>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4b60      	ldr	r3, [pc, #384]	; (8002d88 <UART_SetConfig+0x4e4>)
 8002c06:	fba3 2302 	umull	r2, r3, r3, r2
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	011c      	lsls	r4, r3, #4
 8002c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c12:	2200      	movs	r2, #0
 8002c14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c20:	4642      	mov	r2, r8
 8002c22:	464b      	mov	r3, r9
 8002c24:	1891      	adds	r1, r2, r2
 8002c26:	61b9      	str	r1, [r7, #24]
 8002c28:	415b      	adcs	r3, r3
 8002c2a:	61fb      	str	r3, [r7, #28]
 8002c2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c30:	4641      	mov	r1, r8
 8002c32:	1851      	adds	r1, r2, r1
 8002c34:	6139      	str	r1, [r7, #16]
 8002c36:	4649      	mov	r1, r9
 8002c38:	414b      	adcs	r3, r1
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c48:	4659      	mov	r1, fp
 8002c4a:	00cb      	lsls	r3, r1, #3
 8002c4c:	4651      	mov	r1, sl
 8002c4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c52:	4651      	mov	r1, sl
 8002c54:	00ca      	lsls	r2, r1, #3
 8002c56:	4610      	mov	r0, r2
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4642      	mov	r2, r8
 8002c5e:	189b      	adds	r3, r3, r2
 8002c60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c64:	464b      	mov	r3, r9
 8002c66:	460a      	mov	r2, r1
 8002c68:	eb42 0303 	adc.w	r3, r2, r3
 8002c6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002c88:	4649      	mov	r1, r9
 8002c8a:	008b      	lsls	r3, r1, #2
 8002c8c:	4641      	mov	r1, r8
 8002c8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c92:	4641      	mov	r1, r8
 8002c94:	008a      	lsls	r2, r1, #2
 8002c96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002c9a:	f7fd fab9 	bl	8000210 <__aeabi_uldivmod>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4b38      	ldr	r3, [pc, #224]	; (8002d88 <UART_SetConfig+0x4e4>)
 8002ca6:	fba3 2301 	umull	r2, r3, r3, r1
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	2264      	movs	r2, #100	; 0x64
 8002cae:	fb02 f303 	mul.w	r3, r2, r3
 8002cb2:	1acb      	subs	r3, r1, r3
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	3332      	adds	r3, #50	; 0x32
 8002cb8:	4a33      	ldr	r2, [pc, #204]	; (8002d88 <UART_SetConfig+0x4e4>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cc4:	441c      	add	r4, r3
 8002cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cca:	2200      	movs	r2, #0
 8002ccc:	673b      	str	r3, [r7, #112]	; 0x70
 8002cce:	677a      	str	r2, [r7, #116]	; 0x74
 8002cd0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002cd4:	4642      	mov	r2, r8
 8002cd6:	464b      	mov	r3, r9
 8002cd8:	1891      	adds	r1, r2, r2
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	415b      	adcs	r3, r3
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ce4:	4641      	mov	r1, r8
 8002ce6:	1851      	adds	r1, r2, r1
 8002ce8:	6039      	str	r1, [r7, #0]
 8002cea:	4649      	mov	r1, r9
 8002cec:	414b      	adcs	r3, r1
 8002cee:	607b      	str	r3, [r7, #4]
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	f04f 0300 	mov.w	r3, #0
 8002cf8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cfc:	4659      	mov	r1, fp
 8002cfe:	00cb      	lsls	r3, r1, #3
 8002d00:	4651      	mov	r1, sl
 8002d02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d06:	4651      	mov	r1, sl
 8002d08:	00ca      	lsls	r2, r1, #3
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4642      	mov	r2, r8
 8002d12:	189b      	adds	r3, r3, r2
 8002d14:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d16:	464b      	mov	r3, r9
 8002d18:	460a      	mov	r2, r1
 8002d1a:	eb42 0303 	adc.w	r3, r2, r3
 8002d1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	663b      	str	r3, [r7, #96]	; 0x60
 8002d2a:	667a      	str	r2, [r7, #100]	; 0x64
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d38:	4649      	mov	r1, r9
 8002d3a:	008b      	lsls	r3, r1, #2
 8002d3c:	4641      	mov	r1, r8
 8002d3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d42:	4641      	mov	r1, r8
 8002d44:	008a      	lsls	r2, r1, #2
 8002d46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d4a:	f7fd fa61 	bl	8000210 <__aeabi_uldivmod>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <UART_SetConfig+0x4e4>)
 8002d54:	fba3 1302 	umull	r1, r3, r3, r2
 8002d58:	095b      	lsrs	r3, r3, #5
 8002d5a:	2164      	movs	r1, #100	; 0x64
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	3332      	adds	r3, #50	; 0x32
 8002d66:	4a08      	ldr	r2, [pc, #32]	; (8002d88 <UART_SetConfig+0x4e4>)
 8002d68:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6c:	095b      	lsrs	r3, r3, #5
 8002d6e:	f003 020f 	and.w	r2, r3, #15
 8002d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4422      	add	r2, r4
 8002d7a:	609a      	str	r2, [r3, #8]
}
 8002d7c:	bf00      	nop
 8002d7e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002d82:	46bd      	mov	sp, r7
 8002d84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d88:	51eb851f 	.word	0x51eb851f

08002d8c <__NVIC_SetPriority>:
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	6039      	str	r1, [r7, #0]
 8002d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	db0a      	blt.n	8002db6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	490c      	ldr	r1, [pc, #48]	; (8002dd8 <__NVIC_SetPriority+0x4c>)
 8002da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002daa:	0112      	lsls	r2, r2, #4
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	440b      	add	r3, r1
 8002db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002db4:	e00a      	b.n	8002dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	4908      	ldr	r1, [pc, #32]	; (8002ddc <__NVIC_SetPriority+0x50>)
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	3b04      	subs	r3, #4
 8002dc4:	0112      	lsls	r2, r2, #4
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	440b      	add	r3, r1
 8002dca:	761a      	strb	r2, [r3, #24]
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	e000e100 	.word	0xe000e100
 8002ddc:	e000ed00 	.word	0xe000ed00

08002de0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002de4:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <SysTick_Handler+0x1c>)
 8002de6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002de8:	f002 f968 	bl	80050bc <xTaskGetSchedulerState>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d001      	beq.n	8002df6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002df2:	f003 f851 	bl	8005e98 <xPortSysTickHandler>
  }
}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	e000e010 	.word	0xe000e010

08002e00 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002e04:	2100      	movs	r1, #0
 8002e06:	f06f 0004 	mvn.w	r0, #4
 8002e0a:	f7ff ffbf 	bl	8002d8c <__NVIC_SetPriority>
#endif
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e1a:	f3ef 8305 	mrs	r3, IPSR
 8002e1e:	603b      	str	r3, [r7, #0]
  return(result);
 8002e20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002e26:	f06f 0305 	mvn.w	r3, #5
 8002e2a:	607b      	str	r3, [r7, #4]
 8002e2c:	e00c      	b.n	8002e48 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <osKernelInitialize+0x44>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d105      	bne.n	8002e42 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002e36:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <osKernelInitialize+0x44>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	607b      	str	r3, [r7, #4]
 8002e40:	e002      	b.n	8002e48 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002e48:	687b      	ldr	r3, [r7, #4]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	20000180 	.word	0x20000180

08002e5c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e62:	f3ef 8305 	mrs	r3, IPSR
 8002e66:	603b      	str	r3, [r7, #0]
  return(result);
 8002e68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002e6e:	f06f 0305 	mvn.w	r3, #5
 8002e72:	607b      	str	r3, [r7, #4]
 8002e74:	e010      	b.n	8002e98 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002e76:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <osKernelStart+0x48>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d109      	bne.n	8002e92 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002e7e:	f7ff ffbf 	bl	8002e00 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002e82:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <osKernelStart+0x48>)
 8002e84:	2202      	movs	r2, #2
 8002e86:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002e88:	f001 fcbc 	bl	8004804 <vTaskStartScheduler>
      stat = osOK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	607b      	str	r3, [r7, #4]
 8002e90:	e002      	b.n	8002e98 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002e92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002e98:	687b      	ldr	r3, [r7, #4]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000180 	.word	0x20000180

08002ea8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08e      	sub	sp, #56	; 0x38
 8002eac:	af04      	add	r7, sp, #16
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002eb8:	f3ef 8305 	mrs	r3, IPSR
 8002ebc:	617b      	str	r3, [r7, #20]
  return(result);
 8002ebe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d17e      	bne.n	8002fc2 <osThreadNew+0x11a>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d07b      	beq.n	8002fc2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002eca:	2380      	movs	r3, #128	; 0x80
 8002ecc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002ece:	2318      	movs	r3, #24
 8002ed0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002eda:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d045      	beq.n	8002f6e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <osThreadNew+0x48>
        name = attr->name;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d008      	beq.n	8002f16 <osThreadNew+0x6e>
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	2b38      	cmp	r3, #56	; 0x38
 8002f08:	d805      	bhi.n	8002f16 <osThreadNew+0x6e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <osThreadNew+0x72>
        return (NULL);
 8002f16:	2300      	movs	r3, #0
 8002f18:	e054      	b.n	8002fc4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	089b      	lsrs	r3, r3, #2
 8002f28:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00e      	beq.n	8002f50 <osThreadNew+0xa8>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2ba7      	cmp	r3, #167	; 0xa7
 8002f38:	d90a      	bls.n	8002f50 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d006      	beq.n	8002f50 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <osThreadNew+0xa8>
        mem = 1;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	61bb      	str	r3, [r7, #24]
 8002f4e:	e010      	b.n	8002f72 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10c      	bne.n	8002f72 <osThreadNew+0xca>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d108      	bne.n	8002f72 <osThreadNew+0xca>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d104      	bne.n	8002f72 <osThreadNew+0xca>
          mem = 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61bb      	str	r3, [r7, #24]
 8002f6c:	e001      	b.n	8002f72 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d110      	bne.n	8002f9a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f80:	9202      	str	r2, [sp, #8]
 8002f82:	9301      	str	r3, [sp, #4]
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	6a3a      	ldr	r2, [r7, #32]
 8002f8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f001 fa4c 	bl	800442c <xTaskCreateStatic>
 8002f94:	4603      	mov	r3, r0
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	e013      	b.n	8002fc2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d110      	bne.n	8002fc2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	f107 0310 	add.w	r3, r7, #16
 8002fa8:	9301      	str	r3, [sp, #4]
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f001 fa97 	bl	80044e6 <xTaskCreate>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d001      	beq.n	8002fc2 <osThreadNew+0x11a>
            hTask = NULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002fc2:	693b      	ldr	r3, [r7, #16]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3728      	adds	r7, #40	; 0x28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fd4:	f3ef 8305 	mrs	r3, IPSR
 8002fd8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fda:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <osDelay+0x1c>
    stat = osErrorISR;
 8002fe0:	f06f 0305 	mvn.w	r3, #5
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	e007      	b.n	8002ff8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f001 fbd2 	bl	800479c <vTaskDelay>
    }
  }

  return (stat);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003002:	b580      	push	{r7, lr}
 8003004:	b08a      	sub	sp, #40	; 0x28
 8003006:	af02      	add	r7, sp, #8
 8003008:	60f8      	str	r0, [r7, #12]
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800300e:	2300      	movs	r3, #0
 8003010:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003012:	f3ef 8305 	mrs	r3, IPSR
 8003016:	613b      	str	r3, [r7, #16]
  return(result);
 8003018:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800301a:	2b00      	cmp	r3, #0
 800301c:	d175      	bne.n	800310a <osSemaphoreNew+0x108>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d072      	beq.n	800310a <osSemaphoreNew+0x108>
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	429a      	cmp	r2, r3
 800302a:	d86e      	bhi.n	800310a <osSemaphoreNew+0x108>
    mem = -1;
 800302c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003030:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d015      	beq.n	8003064 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d006      	beq.n	800304e <osSemaphoreNew+0x4c>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2b4f      	cmp	r3, #79	; 0x4f
 8003046:	d902      	bls.n	800304e <osSemaphoreNew+0x4c>
        mem = 1;
 8003048:	2301      	movs	r3, #1
 800304a:	61bb      	str	r3, [r7, #24]
 800304c:	e00c      	b.n	8003068 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d108      	bne.n	8003068 <osSemaphoreNew+0x66>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d104      	bne.n	8003068 <osSemaphoreNew+0x66>
          mem = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	61bb      	str	r3, [r7, #24]
 8003062:	e001      	b.n	8003068 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003064:	2300      	movs	r3, #0
 8003066:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800306e:	d04c      	beq.n	800310a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d128      	bne.n	80030c8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d10a      	bne.n	8003092 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2203      	movs	r2, #3
 8003082:	9200      	str	r2, [sp, #0]
 8003084:	2200      	movs	r2, #0
 8003086:	2100      	movs	r1, #0
 8003088:	2001      	movs	r0, #1
 800308a:	f000 fa29 	bl	80034e0 <xQueueGenericCreateStatic>
 800308e:	61f8      	str	r0, [r7, #28]
 8003090:	e005      	b.n	800309e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003092:	2203      	movs	r2, #3
 8003094:	2100      	movs	r1, #0
 8003096:	2001      	movs	r0, #1
 8003098:	f000 fa9a 	bl	80035d0 <xQueueGenericCreate>
 800309c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d022      	beq.n	80030ea <osSemaphoreNew+0xe8>
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d01f      	beq.n	80030ea <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80030aa:	2300      	movs	r3, #0
 80030ac:	2200      	movs	r2, #0
 80030ae:	2100      	movs	r1, #0
 80030b0:	69f8      	ldr	r0, [r7, #28]
 80030b2:	f000 fb55 	bl	8003760 <xQueueGenericSend>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d016      	beq.n	80030ea <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80030bc:	69f8      	ldr	r0, [r7, #28]
 80030be:	f000 ffe1 	bl	8004084 <vQueueDelete>
            hSemaphore = NULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
 80030c6:	e010      	b.n	80030ea <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d108      	bne.n	80030e0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	461a      	mov	r2, r3
 80030d4:	68b9      	ldr	r1, [r7, #8]
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 fad7 	bl	800368a <xQueueCreateCountingSemaphoreStatic>
 80030dc:	61f8      	str	r0, [r7, #28]
 80030de:	e004      	b.n	80030ea <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80030e0:	68b9      	ldr	r1, [r7, #8]
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 fb08 	bl	80036f8 <xQueueCreateCountingSemaphore>
 80030e8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00c      	beq.n	800310a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <osSemaphoreNew+0xfc>
          name = attr->name;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	e001      	b.n	8003102 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003102:	6979      	ldr	r1, [r7, #20]
 8003104:	69f8      	ldr	r0, [r7, #28]
 8003106:	f001 f909 	bl	800431c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800310a:	69fb      	ldr	r3, [r7, #28]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3720      	adds	r7, #32
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003122:	2300      	movs	r3, #0
 8003124:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d103      	bne.n	8003134 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800312c:	f06f 0303 	mvn.w	r3, #3
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	e039      	b.n	80031a8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003134:	f3ef 8305 	mrs	r3, IPSR
 8003138:	60fb      	str	r3, [r7, #12]
  return(result);
 800313a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800313c:	2b00      	cmp	r3, #0
 800313e:	d022      	beq.n	8003186 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8003146:	f06f 0303 	mvn.w	r3, #3
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	e02c      	b.n	80031a8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800314e:	2300      	movs	r3, #0
 8003150:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003152:	f107 0308 	add.w	r3, r7, #8
 8003156:	461a      	mov	r2, r3
 8003158:	2100      	movs	r1, #0
 800315a:	6938      	ldr	r0, [r7, #16]
 800315c:	f000 ff12 	bl	8003f84 <xQueueReceiveFromISR>
 8003160:	4603      	mov	r3, r0
 8003162:	2b01      	cmp	r3, #1
 8003164:	d003      	beq.n	800316e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8003166:	f06f 0302 	mvn.w	r3, #2
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	e01c      	b.n	80031a8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d019      	beq.n	80031a8 <osSemaphoreAcquire+0x94>
 8003174:	4b0f      	ldr	r3, [pc, #60]	; (80031b4 <osSemaphoreAcquire+0xa0>)
 8003176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	f3bf 8f4f 	dsb	sy
 8003180:	f3bf 8f6f 	isb	sy
 8003184:	e010      	b.n	80031a8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003186:	6839      	ldr	r1, [r7, #0]
 8003188:	6938      	ldr	r0, [r7, #16]
 800318a:	f000 fdef 	bl	8003d6c <xQueueSemaphoreTake>
 800318e:	4603      	mov	r3, r0
 8003190:	2b01      	cmp	r3, #1
 8003192:	d009      	beq.n	80031a8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800319a:	f06f 0301 	mvn.w	r3, #1
 800319e:	617b      	str	r3, [r7, #20]
 80031a0:	e002      	b.n	80031a8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80031a2:	f06f 0302 	mvn.w	r3, #2
 80031a6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80031a8:	697b      	ldr	r3, [r7, #20]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	e000ed04 	.word	0xe000ed04

080031b8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d103      	bne.n	80031d6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80031ce:	f06f 0303 	mvn.w	r3, #3
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	e02c      	b.n	8003230 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031d6:	f3ef 8305 	mrs	r3, IPSR
 80031da:	60fb      	str	r3, [r7, #12]
  return(result);
 80031dc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d01a      	beq.n	8003218 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80031e6:	f107 0308 	add.w	r3, r7, #8
 80031ea:	4619      	mov	r1, r3
 80031ec:	6938      	ldr	r0, [r7, #16]
 80031ee:	f000 fc50 	bl	8003a92 <xQueueGiveFromISR>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d003      	beq.n	8003200 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80031f8:	f06f 0302 	mvn.w	r3, #2
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	e017      	b.n	8003230 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d014      	beq.n	8003230 <osSemaphoreRelease+0x78>
 8003206:	4b0d      	ldr	r3, [pc, #52]	; (800323c <osSemaphoreRelease+0x84>)
 8003208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	f3bf 8f4f 	dsb	sy
 8003212:	f3bf 8f6f 	isb	sy
 8003216:	e00b      	b.n	8003230 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003218:	2300      	movs	r3, #0
 800321a:	2200      	movs	r2, #0
 800321c:	2100      	movs	r1, #0
 800321e:	6938      	ldr	r0, [r7, #16]
 8003220:	f000 fa9e 	bl	8003760 <xQueueGenericSend>
 8003224:	4603      	mov	r3, r0
 8003226:	2b01      	cmp	r3, #1
 8003228:	d002      	beq.n	8003230 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800322a:	f06f 0302 	mvn.w	r3, #2
 800322e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003230:	697b      	ldr	r3, [r7, #20]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	e000ed04 	.word	0xe000ed04

08003240 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4a07      	ldr	r2, [pc, #28]	; (800326c <vApplicationGetIdleTaskMemory+0x2c>)
 8003250:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	4a06      	ldr	r2, [pc, #24]	; (8003270 <vApplicationGetIdleTaskMemory+0x30>)
 8003256:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2280      	movs	r2, #128	; 0x80
 800325c:	601a      	str	r2, [r3, #0]
}
 800325e:	bf00      	nop
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20000184 	.word	0x20000184
 8003270:	2000022c 	.word	0x2000022c

08003274 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4a07      	ldr	r2, [pc, #28]	; (80032a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003284:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	4a06      	ldr	r2, [pc, #24]	; (80032a4 <vApplicationGetTimerTaskMemory+0x30>)
 800328a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003292:	601a      	str	r2, [r3, #0]
}
 8003294:	bf00      	nop
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	2000042c 	.word	0x2000042c
 80032a4:	200004d4 	.word	0x200004d4

080032a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f103 0208 	add.w	r2, r3, #8
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f103 0208 	add.w	r2, r3, #8
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f103 0208 	add.w	r2, r3, #8
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003302:	b480      	push	{r7}
 8003304:	b085      	sub	sp, #20
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	601a      	str	r2, [r3, #0]
}
 800333e:	bf00      	nop
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800334a:	b480      	push	{r7}
 800334c:	b085      	sub	sp, #20
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
 8003352:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003360:	d103      	bne.n	800336a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	e00c      	b.n	8003384 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	3308      	adds	r3, #8
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	e002      	b.n	8003378 <vListInsert+0x2e>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	429a      	cmp	r2, r3
 8003382:	d2f6      	bcs.n	8003372 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	601a      	str	r2, [r3, #0]
}
 80033b0:	bf00      	nop
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6892      	ldr	r2, [r2, #8]
 80033d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6852      	ldr	r2, [r2, #4]
 80033dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d103      	bne.n	80033f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	1e5a      	subs	r2, r3, #1
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10a      	bne.n	800343a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003428:	f383 8811 	msr	BASEPRI, r3
 800342c:	f3bf 8f6f 	isb	sy
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003436:	bf00      	nop
 8003438:	e7fe      	b.n	8003438 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800343a:	f002 fc9b 	bl	8005d74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003446:	68f9      	ldr	r1, [r7, #12]
 8003448:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800344a:	fb01 f303 	mul.w	r3, r1, r3
 800344e:	441a      	add	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346a:	3b01      	subs	r3, #1
 800346c:	68f9      	ldr	r1, [r7, #12]
 800346e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003470:	fb01 f303 	mul.w	r3, r1, r3
 8003474:	441a      	add	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	22ff      	movs	r2, #255	; 0xff
 800347e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	22ff      	movs	r2, #255	; 0xff
 8003486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d114      	bne.n	80034ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01a      	beq.n	80034ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	3310      	adds	r3, #16
 800349c:	4618      	mov	r0, r3
 800349e:	f001 fc4b 	bl	8004d38 <xTaskRemoveFromEventList>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d012      	beq.n	80034ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80034a8:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <xQueueGenericReset+0xcc>)
 80034aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	e009      	b.n	80034ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	3310      	adds	r3, #16
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff fef2 	bl	80032a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	3324      	adds	r3, #36	; 0x24
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff feed 	bl	80032a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80034ce:	f002 fc81 	bl	8005dd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80034d2:	2301      	movs	r3, #1
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	e000ed04 	.word	0xe000ed04

080034e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08e      	sub	sp, #56	; 0x38
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10a      	bne.n	800350a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80034f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f8:	f383 8811 	msr	BASEPRI, r3
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003506:	bf00      	nop
 8003508:	e7fe      	b.n	8003508 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10a      	bne.n	8003526 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003522:	bf00      	nop
 8003524:	e7fe      	b.n	8003524 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <xQueueGenericCreateStatic+0x52>
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <xQueueGenericCreateStatic+0x56>
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <xQueueGenericCreateStatic+0x58>
 8003536:	2300      	movs	r3, #0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10a      	bne.n	8003552 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800353c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003540:	f383 8811 	msr	BASEPRI, r3
 8003544:	f3bf 8f6f 	isb	sy
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	623b      	str	r3, [r7, #32]
}
 800354e:	bf00      	nop
 8003550:	e7fe      	b.n	8003550 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d102      	bne.n	800355e <xQueueGenericCreateStatic+0x7e>
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <xQueueGenericCreateStatic+0x82>
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <xQueueGenericCreateStatic+0x84>
 8003562:	2300      	movs	r3, #0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10a      	bne.n	800357e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356c:	f383 8811 	msr	BASEPRI, r3
 8003570:	f3bf 8f6f 	isb	sy
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	61fb      	str	r3, [r7, #28]
}
 800357a:	bf00      	nop
 800357c:	e7fe      	b.n	800357c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800357e:	2350      	movs	r3, #80	; 0x50
 8003580:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2b50      	cmp	r3, #80	; 0x50
 8003586:	d00a      	beq.n	800359e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358c:	f383 8811 	msr	BASEPRI, r3
 8003590:	f3bf 8f6f 	isb	sy
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	61bb      	str	r3, [r7, #24]
}
 800359a:	bf00      	nop
 800359c:	e7fe      	b.n	800359c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800359e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80035a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00d      	beq.n	80035c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80035aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80035b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	4613      	mov	r3, r2
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	68b9      	ldr	r1, [r7, #8]
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 f83f 	bl	8003644 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80035c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3730      	adds	r7, #48	; 0x30
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08a      	sub	sp, #40	; 0x28
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	4613      	mov	r3, r2
 80035dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10a      	bne.n	80035fa <xQueueGenericCreate+0x2a>
	__asm volatile
 80035e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e8:	f383 8811 	msr	BASEPRI, r3
 80035ec:	f3bf 8f6f 	isb	sy
 80035f0:	f3bf 8f4f 	dsb	sy
 80035f4:	613b      	str	r3, [r7, #16]
}
 80035f6:	bf00      	nop
 80035f8:	e7fe      	b.n	80035f8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	fb02 f303 	mul.w	r3, r2, r3
 8003602:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	3350      	adds	r3, #80	; 0x50
 8003608:	4618      	mov	r0, r3
 800360a:	f002 fcd5 	bl	8005fb8 <pvPortMalloc>
 800360e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d011      	beq.n	800363a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	3350      	adds	r3, #80	; 0x50
 800361e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003628:	79fa      	ldrb	r2, [r7, #7]
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	4613      	mov	r3, r2
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	68b9      	ldr	r1, [r7, #8]
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 f805 	bl	8003644 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800363a:	69bb      	ldr	r3, [r7, #24]
	}
 800363c:	4618      	mov	r0, r3
 800363e:	3720      	adds	r7, #32
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d103      	bne.n	8003660 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	e002      	b.n	8003666 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003672:	2101      	movs	r1, #1
 8003674:	69b8      	ldr	r0, [r7, #24]
 8003676:	f7ff fecb 	bl	8003410 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	78fa      	ldrb	r2, [r7, #3]
 800367e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003682:	bf00      	nop
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800368a:	b580      	push	{r7, lr}
 800368c:	b08a      	sub	sp, #40	; 0x28
 800368e:	af02      	add	r7, sp, #8
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10a      	bne.n	80036b2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800369c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a0:	f383 8811 	msr	BASEPRI, r3
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	61bb      	str	r3, [r7, #24]
}
 80036ae:	bf00      	nop
 80036b0:	e7fe      	b.n	80036b0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d90a      	bls.n	80036d0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80036ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036be:	f383 8811 	msr	BASEPRI, r3
 80036c2:	f3bf 8f6f 	isb	sy
 80036c6:	f3bf 8f4f 	dsb	sy
 80036ca:	617b      	str	r3, [r7, #20]
}
 80036cc:	bf00      	nop
 80036ce:	e7fe      	b.n	80036ce <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80036d0:	2302      	movs	r3, #2
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	2100      	movs	r1, #0
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f7ff ff00 	bl	80034e0 <xQueueGenericCreateStatic>
 80036e0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80036ee:	69fb      	ldr	r3, [r7, #28]
	}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3720      	adds	r7, #32
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10a      	bne.n	800371e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370c:	f383 8811 	msr	BASEPRI, r3
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	613b      	str	r3, [r7, #16]
}
 800371a:	bf00      	nop
 800371c:	e7fe      	b.n	800371c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	429a      	cmp	r2, r3
 8003724:	d90a      	bls.n	800373c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8003726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372a:	f383 8811 	msr	BASEPRI, r3
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	f3bf 8f4f 	dsb	sy
 8003736:	60fb      	str	r3, [r7, #12]
}
 8003738:	bf00      	nop
 800373a:	e7fe      	b.n	800373a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800373c:	2202      	movs	r2, #2
 800373e:	2100      	movs	r1, #0
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff ff45 	bl	80035d0 <xQueueGenericCreate>
 8003746:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003754:	697b      	ldr	r3, [r7, #20]
	}
 8003756:	4618      	mov	r0, r3
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08e      	sub	sp, #56	; 0x38
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800376e:	2300      	movs	r3, #0
 8003770:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10a      	bne.n	8003792 <xQueueGenericSend+0x32>
	__asm volatile
 800377c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800378e:	bf00      	nop
 8003790:	e7fe      	b.n	8003790 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d103      	bne.n	80037a0 <xQueueGenericSend+0x40>
 8003798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <xQueueGenericSend+0x44>
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <xQueueGenericSend+0x46>
 80037a4:	2300      	movs	r3, #0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10a      	bne.n	80037c0 <xQueueGenericSend+0x60>
	__asm volatile
 80037aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ae:	f383 8811 	msr	BASEPRI, r3
 80037b2:	f3bf 8f6f 	isb	sy
 80037b6:	f3bf 8f4f 	dsb	sy
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037bc:	bf00      	nop
 80037be:	e7fe      	b.n	80037be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d103      	bne.n	80037ce <xQueueGenericSend+0x6e>
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <xQueueGenericSend+0x72>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <xQueueGenericSend+0x74>
 80037d2:	2300      	movs	r3, #0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10a      	bne.n	80037ee <xQueueGenericSend+0x8e>
	__asm volatile
 80037d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037dc:	f383 8811 	msr	BASEPRI, r3
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	623b      	str	r3, [r7, #32]
}
 80037ea:	bf00      	nop
 80037ec:	e7fe      	b.n	80037ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037ee:	f001 fc65 	bl	80050bc <xTaskGetSchedulerState>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d102      	bne.n	80037fe <xQueueGenericSend+0x9e>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <xQueueGenericSend+0xa2>
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <xQueueGenericSend+0xa4>
 8003802:	2300      	movs	r3, #0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10a      	bne.n	800381e <xQueueGenericSend+0xbe>
	__asm volatile
 8003808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	61fb      	str	r3, [r7, #28]
}
 800381a:	bf00      	nop
 800381c:	e7fe      	b.n	800381c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800381e:	f002 faa9 	bl	8005d74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382a:	429a      	cmp	r2, r3
 800382c:	d302      	bcc.n	8003834 <xQueueGenericSend+0xd4>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d129      	bne.n	8003888 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800383a:	f000 fc5e 	bl	80040fa <prvCopyDataToQueue>
 800383e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	2b00      	cmp	r3, #0
 8003846:	d010      	beq.n	800386a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384a:	3324      	adds	r3, #36	; 0x24
 800384c:	4618      	mov	r0, r3
 800384e:	f001 fa73 	bl	8004d38 <xTaskRemoveFromEventList>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d013      	beq.n	8003880 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003858:	4b3f      	ldr	r3, [pc, #252]	; (8003958 <xQueueGenericSend+0x1f8>)
 800385a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	e00a      	b.n	8003880 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800386a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386c:	2b00      	cmp	r3, #0
 800386e:	d007      	beq.n	8003880 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003870:	4b39      	ldr	r3, [pc, #228]	; (8003958 <xQueueGenericSend+0x1f8>)
 8003872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003880:	f002 faa8 	bl	8005dd4 <vPortExitCritical>
				return pdPASS;
 8003884:	2301      	movs	r3, #1
 8003886:	e063      	b.n	8003950 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d103      	bne.n	8003896 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800388e:	f002 faa1 	bl	8005dd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003892:	2300      	movs	r3, #0
 8003894:	e05c      	b.n	8003950 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003898:	2b00      	cmp	r3, #0
 800389a:	d106      	bne.n	80038aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800389c:	f107 0314 	add.w	r3, r7, #20
 80038a0:	4618      	mov	r0, r3
 80038a2:	f001 faad 	bl	8004e00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038a6:	2301      	movs	r3, #1
 80038a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038aa:	f002 fa93 	bl	8005dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038ae:	f001 f819 	bl	80048e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038b2:	f002 fa5f 	bl	8005d74 <vPortEnterCritical>
 80038b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038bc:	b25b      	sxtb	r3, r3
 80038be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038c2:	d103      	bne.n	80038cc <xQueueGenericSend+0x16c>
 80038c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038d2:	b25b      	sxtb	r3, r3
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038d8:	d103      	bne.n	80038e2 <xQueueGenericSend+0x182>
 80038da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038e2:	f002 fa77 	bl	8005dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038e6:	1d3a      	adds	r2, r7, #4
 80038e8:	f107 0314 	add.w	r3, r7, #20
 80038ec:	4611      	mov	r1, r2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f001 fa9c 	bl	8004e2c <xTaskCheckForTimeOut>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d124      	bne.n	8003944 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80038fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038fc:	f000 fcf5 	bl	80042ea <prvIsQueueFull>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d018      	beq.n	8003938 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003908:	3310      	adds	r3, #16
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	4611      	mov	r1, r2
 800390e:	4618      	mov	r0, r3
 8003910:	f001 f9c2 	bl	8004c98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003916:	f000 fc80 	bl	800421a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800391a:	f000 fff1 	bl	8004900 <xTaskResumeAll>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	f47f af7c 	bne.w	800381e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003926:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <xQueueGenericSend+0x1f8>)
 8003928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	f3bf 8f6f 	isb	sy
 8003936:	e772      	b.n	800381e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003938:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800393a:	f000 fc6e 	bl	800421a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800393e:	f000 ffdf 	bl	8004900 <xTaskResumeAll>
 8003942:	e76c      	b.n	800381e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003946:	f000 fc68 	bl	800421a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800394a:	f000 ffd9 	bl	8004900 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800394e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003950:	4618      	mov	r0, r3
 8003952:	3738      	adds	r7, #56	; 0x38
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	e000ed04 	.word	0xe000ed04

0800395c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b090      	sub	sp, #64	; 0x40
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800396e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10a      	bne.n	800398a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003978:	f383 8811 	msr	BASEPRI, r3
 800397c:	f3bf 8f6f 	isb	sy
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003986:	bf00      	nop
 8003988:	e7fe      	b.n	8003988 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d103      	bne.n	8003998 <xQueueGenericSendFromISR+0x3c>
 8003990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <xQueueGenericSendFromISR+0x40>
 8003998:	2301      	movs	r3, #1
 800399a:	e000      	b.n	800399e <xQueueGenericSendFromISR+0x42>
 800399c:	2300      	movs	r3, #0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10a      	bne.n	80039b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80039a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039b4:	bf00      	nop
 80039b6:	e7fe      	b.n	80039b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d103      	bne.n	80039c6 <xQueueGenericSendFromISR+0x6a>
 80039be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <xQueueGenericSendFromISR+0x6e>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <xQueueGenericSendFromISR+0x70>
 80039ca:	2300      	movs	r3, #0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10a      	bne.n	80039e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80039d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	623b      	str	r3, [r7, #32]
}
 80039e2:	bf00      	nop
 80039e4:	e7fe      	b.n	80039e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80039e6:	f002 faa7 	bl	8005f38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80039ea:	f3ef 8211 	mrs	r2, BASEPRI
 80039ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	61fa      	str	r2, [r7, #28]
 8003a00:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a02:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a04:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d302      	bcc.n	8003a18 <xQueueGenericSendFromISR+0xbc>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d12f      	bne.n	8003a78 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a26:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	68b9      	ldr	r1, [r7, #8]
 8003a2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a2e:	f000 fb64 	bl	80040fa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a32:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003a36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a3a:	d112      	bne.n	8003a62 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d016      	beq.n	8003a72 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a46:	3324      	adds	r3, #36	; 0x24
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f001 f975 	bl	8004d38 <xTaskRemoveFromEventList>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00e      	beq.n	8003a72 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00b      	beq.n	8003a72 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	e007      	b.n	8003a72 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003a62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a66:	3301      	adds	r3, #1
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	b25a      	sxtb	r2, r3
 8003a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003a72:	2301      	movs	r3, #1
 8003a74:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003a76:	e001      	b.n	8003a7c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a7e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003a86:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3740      	adds	r7, #64	; 0x40
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b08e      	sub	sp, #56	; 0x38
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10a      	bne.n	8003abc <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	623b      	str	r3, [r7, #32]
}
 8003ab8:	bf00      	nop
 8003aba:	e7fe      	b.n	8003aba <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <xQueueGiveFromISR+0x48>
	__asm volatile
 8003ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac8:	f383 8811 	msr	BASEPRI, r3
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	61fb      	str	r3, [r7, #28]
}
 8003ad6:	bf00      	nop
 8003ad8:	e7fe      	b.n	8003ad8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d103      	bne.n	8003aea <xQueueGiveFromISR+0x58>
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <xQueueGiveFromISR+0x5c>
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <xQueueGiveFromISR+0x5e>
 8003aee:	2300      	movs	r3, #0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10a      	bne.n	8003b0a <xQueueGiveFromISR+0x78>
	__asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	61bb      	str	r3, [r7, #24]
}
 8003b06:	bf00      	nop
 8003b08:	e7fe      	b.n	8003b08 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b0a:	f002 fa15 	bl	8005f38 <vPortValidateInterruptPriority>
	__asm volatile
 8003b0e:	f3ef 8211 	mrs	r2, BASEPRI
 8003b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	617a      	str	r2, [r7, #20]
 8003b24:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003b26:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d22b      	bcs.n	8003b92 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b54:	d112      	bne.n	8003b7c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d016      	beq.n	8003b8c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b60:	3324      	adds	r3, #36	; 0x24
 8003b62:	4618      	mov	r0, r3
 8003b64:	f001 f8e8 	bl	8004d38 <xTaskRemoveFromEventList>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00e      	beq.n	8003b8c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00b      	beq.n	8003b8c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2201      	movs	r2, #1
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	e007      	b.n	8003b8c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b80:	3301      	adds	r3, #1
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	b25a      	sxtb	r2, r3
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b90:	e001      	b.n	8003b96 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	637b      	str	r3, [r7, #52]	; 0x34
 8003b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b98:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f383 8811 	msr	BASEPRI, r3
}
 8003ba0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3738      	adds	r7, #56	; 0x38
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08c      	sub	sp, #48	; 0x30
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10a      	bne.n	8003bdc <xQueueReceive+0x30>
	__asm volatile
 8003bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bca:	f383 8811 	msr	BASEPRI, r3
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	623b      	str	r3, [r7, #32]
}
 8003bd8:	bf00      	nop
 8003bda:	e7fe      	b.n	8003bda <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d103      	bne.n	8003bea <xQueueReceive+0x3e>
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <xQueueReceive+0x42>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <xQueueReceive+0x44>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10a      	bne.n	8003c0a <xQueueReceive+0x5e>
	__asm volatile
 8003bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf8:	f383 8811 	msr	BASEPRI, r3
 8003bfc:	f3bf 8f6f 	isb	sy
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	61fb      	str	r3, [r7, #28]
}
 8003c06:	bf00      	nop
 8003c08:	e7fe      	b.n	8003c08 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c0a:	f001 fa57 	bl	80050bc <xTaskGetSchedulerState>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d102      	bne.n	8003c1a <xQueueReceive+0x6e>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <xQueueReceive+0x72>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <xQueueReceive+0x74>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10a      	bne.n	8003c3a <xQueueReceive+0x8e>
	__asm volatile
 8003c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	61bb      	str	r3, [r7, #24]
}
 8003c36:	bf00      	nop
 8003c38:	e7fe      	b.n	8003c38 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c3a:	f002 f89b 	bl	8005d74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d01f      	beq.n	8003c8a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c4a:	68b9      	ldr	r1, [r7, #8]
 8003c4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c4e:	f000 fabe 	bl	80041ce <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	1e5a      	subs	r2, r3, #1
 8003c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00f      	beq.n	8003c82 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c64:	3310      	adds	r3, #16
 8003c66:	4618      	mov	r0, r3
 8003c68:	f001 f866 	bl	8004d38 <xTaskRemoveFromEventList>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d007      	beq.n	8003c82 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c72:	4b3d      	ldr	r3, [pc, #244]	; (8003d68 <xQueueReceive+0x1bc>)
 8003c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c82:	f002 f8a7 	bl	8005dd4 <vPortExitCritical>
				return pdPASS;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e069      	b.n	8003d5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d103      	bne.n	8003c98 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c90:	f002 f8a0 	bl	8005dd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c94:	2300      	movs	r3, #0
 8003c96:	e062      	b.n	8003d5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d106      	bne.n	8003cac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c9e:	f107 0310 	add.w	r3, r7, #16
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f001 f8ac 	bl	8004e00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cac:	f002 f892 	bl	8005dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cb0:	f000 fe18 	bl	80048e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cb4:	f002 f85e 	bl	8005d74 <vPortEnterCritical>
 8003cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cbe:	b25b      	sxtb	r3, r3
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cc4:	d103      	bne.n	8003cce <xQueueReceive+0x122>
 8003cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cd4:	b25b      	sxtb	r3, r3
 8003cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cda:	d103      	bne.n	8003ce4 <xQueueReceive+0x138>
 8003cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ce4:	f002 f876 	bl	8005dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ce8:	1d3a      	adds	r2, r7, #4
 8003cea:	f107 0310 	add.w	r3, r7, #16
 8003cee:	4611      	mov	r1, r2
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f001 f89b 	bl	8004e2c <xTaskCheckForTimeOut>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d123      	bne.n	8003d44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cfe:	f000 fade 	bl	80042be <prvIsQueueEmpty>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d017      	beq.n	8003d38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0a:	3324      	adds	r3, #36	; 0x24
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	4611      	mov	r1, r2
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 ffc1 	bl	8004c98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d18:	f000 fa7f 	bl	800421a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d1c:	f000 fdf0 	bl	8004900 <xTaskResumeAll>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d189      	bne.n	8003c3a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003d26:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <xQueueReceive+0x1bc>)
 8003d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	f3bf 8f6f 	isb	sy
 8003d36:	e780      	b.n	8003c3a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d3a:	f000 fa6e 	bl	800421a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d3e:	f000 fddf 	bl	8004900 <xTaskResumeAll>
 8003d42:	e77a      	b.n	8003c3a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d46:	f000 fa68 	bl	800421a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d4a:	f000 fdd9 	bl	8004900 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d50:	f000 fab5 	bl	80042be <prvIsQueueEmpty>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f43f af6f 	beq.w	8003c3a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3730      	adds	r7, #48	; 0x30
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	e000ed04 	.word	0xe000ed04

08003d6c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08e      	sub	sp, #56	; 0x38
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d76:	2300      	movs	r3, #0
 8003d78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10a      	bne.n	8003d9e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8c:	f383 8811 	msr	BASEPRI, r3
 8003d90:	f3bf 8f6f 	isb	sy
 8003d94:	f3bf 8f4f 	dsb	sy
 8003d98:	623b      	str	r3, [r7, #32]
}
 8003d9a:	bf00      	nop
 8003d9c:	e7fe      	b.n	8003d9c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	61fb      	str	r3, [r7, #28]
}
 8003db8:	bf00      	nop
 8003dba:	e7fe      	b.n	8003dba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dbc:	f001 f97e 	bl	80050bc <xTaskGetSchedulerState>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d102      	bne.n	8003dcc <xQueueSemaphoreTake+0x60>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <xQueueSemaphoreTake+0x64>
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e000      	b.n	8003dd2 <xQueueSemaphoreTake+0x66>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10a      	bne.n	8003dec <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dda:	f383 8811 	msr	BASEPRI, r3
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	61bb      	str	r3, [r7, #24]
}
 8003de8:	bf00      	nop
 8003dea:	e7fe      	b.n	8003dea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dec:	f001 ffc2 	bl	8005d74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d024      	beq.n	8003e46 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfe:	1e5a      	subs	r2, r3, #1
 8003e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e02:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d104      	bne.n	8003e16 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003e0c:	f001 facc 	bl	80053a8 <pvTaskIncrementMutexHeldCount>
 8003e10:	4602      	mov	r2, r0
 8003e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e14:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00f      	beq.n	8003e3e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e20:	3310      	adds	r3, #16
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 ff88 	bl	8004d38 <xTaskRemoveFromEventList>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d007      	beq.n	8003e3e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e2e:	4b54      	ldr	r3, [pc, #336]	; (8003f80 <xQueueSemaphoreTake+0x214>)
 8003e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e3e:	f001 ffc9 	bl	8005dd4 <vPortExitCritical>
				return pdPASS;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e097      	b.n	8003f76 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d111      	bne.n	8003e70 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	617b      	str	r3, [r7, #20]
}
 8003e64:	bf00      	nop
 8003e66:	e7fe      	b.n	8003e66 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003e68:	f001 ffb4 	bl	8005dd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	e082      	b.n	8003f76 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d106      	bne.n	8003e84 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e76:	f107 030c 	add.w	r3, r7, #12
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 ffc0 	bl	8004e00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e80:	2301      	movs	r3, #1
 8003e82:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e84:	f001 ffa6 	bl	8005dd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e88:	f000 fd2c 	bl	80048e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e8c:	f001 ff72 	bl	8005d74 <vPortEnterCritical>
 8003e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e96:	b25b      	sxtb	r3, r3
 8003e98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e9c:	d103      	bne.n	8003ea6 <xQueueSemaphoreTake+0x13a>
 8003e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003eac:	b25b      	sxtb	r3, r3
 8003eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eb2:	d103      	bne.n	8003ebc <xQueueSemaphoreTake+0x150>
 8003eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ebc:	f001 ff8a 	bl	8005dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ec0:	463a      	mov	r2, r7
 8003ec2:	f107 030c 	add.w	r3, r7, #12
 8003ec6:	4611      	mov	r1, r2
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 ffaf 	bl	8004e2c <xTaskCheckForTimeOut>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d132      	bne.n	8003f3a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ed4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ed6:	f000 f9f2 	bl	80042be <prvIsQueueEmpty>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d026      	beq.n	8003f2e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d109      	bne.n	8003efc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003ee8:	f001 ff44 	bl	8005d74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f001 f901 	bl	80050f8 <xTaskPriorityInherit>
 8003ef6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003ef8:	f001 ff6c 	bl	8005dd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efe:	3324      	adds	r3, #36	; 0x24
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	4611      	mov	r1, r2
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 fec7 	bl	8004c98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f0c:	f000 f985 	bl	800421a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f10:	f000 fcf6 	bl	8004900 <xTaskResumeAll>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f47f af68 	bne.w	8003dec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003f1c:	4b18      	ldr	r3, [pc, #96]	; (8003f80 <xQueueSemaphoreTake+0x214>)
 8003f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	e75e      	b.n	8003dec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003f2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f30:	f000 f973 	bl	800421a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f34:	f000 fce4 	bl	8004900 <xTaskResumeAll>
 8003f38:	e758      	b.n	8003dec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003f3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f3c:	f000 f96d 	bl	800421a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f40:	f000 fcde 	bl	8004900 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f46:	f000 f9ba 	bl	80042be <prvIsQueueEmpty>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f43f af4d 	beq.w	8003dec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00d      	beq.n	8003f74 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003f58:	f001 ff0c 	bl	8005d74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003f5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f5e:	f000 f8b4 	bl	80040ca <prvGetDisinheritPriorityAfterTimeout>
 8003f62:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f001 f99a 	bl	80052a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003f70:	f001 ff30 	bl	8005dd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3738      	adds	r7, #56	; 0x38
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	e000ed04 	.word	0xe000ed04

08003f84 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08e      	sub	sp, #56	; 0x38
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10a      	bne.n	8003fb0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9e:	f383 8811 	msr	BASEPRI, r3
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	623b      	str	r3, [r7, #32]
}
 8003fac:	bf00      	nop
 8003fae:	e7fe      	b.n	8003fae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d103      	bne.n	8003fbe <xQueueReceiveFromISR+0x3a>
 8003fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <xQueueReceiveFromISR+0x3e>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <xQueueReceiveFromISR+0x40>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10a      	bne.n	8003fde <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fcc:	f383 8811 	msr	BASEPRI, r3
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	61fb      	str	r3, [r7, #28]
}
 8003fda:	bf00      	nop
 8003fdc:	e7fe      	b.n	8003fdc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fde:	f001 ffab 	bl	8005f38 <vPortValidateInterruptPriority>
	__asm volatile
 8003fe2:	f3ef 8211 	mrs	r2, BASEPRI
 8003fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fea:	f383 8811 	msr	BASEPRI, r3
 8003fee:	f3bf 8f6f 	isb	sy
 8003ff2:	f3bf 8f4f 	dsb	sy
 8003ff6:	61ba      	str	r2, [r7, #24]
 8003ff8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003ffa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004002:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004006:	2b00      	cmp	r3, #0
 8004008:	d02f      	beq.n	800406a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800400a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004014:	68b9      	ldr	r1, [r7, #8]
 8004016:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004018:	f000 f8d9 	bl	80041ce <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800401c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401e:	1e5a      	subs	r2, r3, #1
 8004020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004022:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004024:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800402c:	d112      	bne.n	8004054 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800402e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d016      	beq.n	8004064 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	3310      	adds	r3, #16
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fe7c 	bl	8004d38 <xTaskRemoveFromEventList>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00e      	beq.n	8004064 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00b      	beq.n	8004064 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	e007      	b.n	8004064 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004058:	3301      	adds	r3, #1
 800405a:	b2db      	uxtb	r3, r3
 800405c:	b25a      	sxtb	r2, r3
 800405e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004064:	2301      	movs	r3, #1
 8004066:	637b      	str	r3, [r7, #52]	; 0x34
 8004068:	e001      	b.n	800406e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800406a:	2300      	movs	r3, #0
 800406c:	637b      	str	r3, [r7, #52]	; 0x34
 800406e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004070:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f383 8811 	msr	BASEPRI, r3
}
 8004078:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800407a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800407c:	4618      	mov	r0, r3
 800407e:	3738      	adds	r7, #56	; 0x38
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10a      	bne.n	80040ac <vQueueDelete+0x28>
	__asm volatile
 8004096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409a:	f383 8811 	msr	BASEPRI, r3
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	60bb      	str	r3, [r7, #8]
}
 80040a8:	bf00      	nop
 80040aa:	e7fe      	b.n	80040aa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 f95f 	bl	8004370 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d102      	bne.n	80040c2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f002 f847 	bl	8006150 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80040c2:	bf00      	nop
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80040ca:	b480      	push	{r7}
 80040cc:	b085      	sub	sp, #20
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d006      	beq.n	80040e8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	e001      	b.n	80040ec <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80040e8:	2300      	movs	r3, #0
 80040ea:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80040ec:	68fb      	ldr	r3, [r7, #12]
	}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b086      	sub	sp, #24
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10d      	bne.n	8004134 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d14d      	bne.n	80041bc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	4618      	mov	r0, r3
 8004126:	f001 f84f 	bl	80051c8 <xTaskPriorityDisinherit>
 800412a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	609a      	str	r2, [r3, #8]
 8004132:	e043      	b.n	80041bc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d119      	bne.n	800416e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6858      	ldr	r0, [r3, #4]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	461a      	mov	r2, r3
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	f002 f9a5 	bl	8006494 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	441a      	add	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	429a      	cmp	r2, r3
 8004162:	d32b      	bcc.n	80041bc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	605a      	str	r2, [r3, #4]
 800416c:	e026      	b.n	80041bc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	68d8      	ldr	r0, [r3, #12]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	461a      	mov	r2, r3
 8004178:	68b9      	ldr	r1, [r7, #8]
 800417a:	f002 f98b 	bl	8006494 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	425b      	negs	r3, r3
 8004188:	441a      	add	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d207      	bcs.n	80041aa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	425b      	negs	r3, r3
 80041a4:	441a      	add	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d105      	bne.n	80041bc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	3b01      	subs	r3, #1
 80041ba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80041c4:	697b      	ldr	r3, [r7, #20]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b082      	sub	sp, #8
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d018      	beq.n	8004212 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e8:	441a      	add	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d303      	bcc.n	8004202 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68d9      	ldr	r1, [r3, #12]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	461a      	mov	r2, r3
 800420c:	6838      	ldr	r0, [r7, #0]
 800420e:	f002 f941 	bl	8006494 <memcpy>
	}
}
 8004212:	bf00      	nop
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004222:	f001 fda7 	bl	8005d74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800422c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800422e:	e011      	b.n	8004254 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	2b00      	cmp	r3, #0
 8004236:	d012      	beq.n	800425e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3324      	adds	r3, #36	; 0x24
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fd7b 	bl	8004d38 <xTaskRemoveFromEventList>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004248:	f000 fe52 	bl	8004ef0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	3b01      	subs	r3, #1
 8004250:	b2db      	uxtb	r3, r3
 8004252:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004258:	2b00      	cmp	r3, #0
 800425a:	dce9      	bgt.n	8004230 <prvUnlockQueue+0x16>
 800425c:	e000      	b.n	8004260 <prvUnlockQueue+0x46>
					break;
 800425e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	22ff      	movs	r2, #255	; 0xff
 8004264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004268:	f001 fdb4 	bl	8005dd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800426c:	f001 fd82 	bl	8005d74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004276:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004278:	e011      	b.n	800429e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d012      	beq.n	80042a8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3310      	adds	r3, #16
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fd56 	bl	8004d38 <xTaskRemoveFromEventList>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004292:	f000 fe2d 	bl	8004ef0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004296:	7bbb      	ldrb	r3, [r7, #14]
 8004298:	3b01      	subs	r3, #1
 800429a:	b2db      	uxtb	r3, r3
 800429c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800429e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	dce9      	bgt.n	800427a <prvUnlockQueue+0x60>
 80042a6:	e000      	b.n	80042aa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80042a8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	22ff      	movs	r2, #255	; 0xff
 80042ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80042b2:	f001 fd8f 	bl	8005dd4 <vPortExitCritical>
}
 80042b6:	bf00      	nop
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042c6:	f001 fd55 	bl	8005d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d102      	bne.n	80042d8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80042d2:	2301      	movs	r3, #1
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	e001      	b.n	80042dc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80042d8:	2300      	movs	r3, #0
 80042da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042dc:	f001 fd7a 	bl	8005dd4 <vPortExitCritical>

	return xReturn;
 80042e0:	68fb      	ldr	r3, [r7, #12]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b084      	sub	sp, #16
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042f2:	f001 fd3f 	bl	8005d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fe:	429a      	cmp	r2, r3
 8004300:	d102      	bne.n	8004308 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004302:	2301      	movs	r3, #1
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	e001      	b.n	800430c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004308:	2300      	movs	r3, #0
 800430a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800430c:	f001 fd62 	bl	8005dd4 <vPortExitCritical>

	return xReturn;
 8004310:	68fb      	ldr	r3, [r7, #12]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	e014      	b.n	8004356 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800432c:	4a0f      	ldr	r2, [pc, #60]	; (800436c <vQueueAddToRegistry+0x50>)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10b      	bne.n	8004350 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004338:	490c      	ldr	r1, [pc, #48]	; (800436c <vQueueAddToRegistry+0x50>)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004342:	4a0a      	ldr	r2, [pc, #40]	; (800436c <vQueueAddToRegistry+0x50>)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	4413      	add	r3, r2
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800434e:	e006      	b.n	800435e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3301      	adds	r3, #1
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2b07      	cmp	r3, #7
 800435a:	d9e7      	bls.n	800432c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800435c:	bf00      	nop
 800435e:	bf00      	nop
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	200008d4 	.word	0x200008d4

08004370 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004378:	2300      	movs	r3, #0
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	e016      	b.n	80043ac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800437e:	4a10      	ldr	r2, [pc, #64]	; (80043c0 <vQueueUnregisterQueue+0x50>)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	4413      	add	r3, r2
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	429a      	cmp	r2, r3
 800438c:	d10b      	bne.n	80043a6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800438e:	4a0c      	ldr	r2, [pc, #48]	; (80043c0 <vQueueUnregisterQueue+0x50>)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2100      	movs	r1, #0
 8004394:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004398:	4a09      	ldr	r2, [pc, #36]	; (80043c0 <vQueueUnregisterQueue+0x50>)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	4413      	add	r3, r2
 80043a0:	2200      	movs	r2, #0
 80043a2:	605a      	str	r2, [r3, #4]
				break;
 80043a4:	e006      	b.n	80043b4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3301      	adds	r3, #1
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b07      	cmp	r3, #7
 80043b0:	d9e5      	bls.n	800437e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80043b2:	bf00      	nop
 80043b4:	bf00      	nop
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	200008d4 	.word	0x200008d4

080043c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80043d4:	f001 fcce 	bl	8005d74 <vPortEnterCritical>
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043de:	b25b      	sxtb	r3, r3
 80043e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043e4:	d103      	bne.n	80043ee <vQueueWaitForMessageRestricted+0x2a>
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043f4:	b25b      	sxtb	r3, r3
 80043f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043fa:	d103      	bne.n	8004404 <vQueueWaitForMessageRestricted+0x40>
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004404:	f001 fce6 	bl	8005dd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440c:	2b00      	cmp	r3, #0
 800440e:	d106      	bne.n	800441e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	3324      	adds	r3, #36	; 0x24
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	68b9      	ldr	r1, [r7, #8]
 8004418:	4618      	mov	r0, r3
 800441a:	f000 fc61 	bl	8004ce0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800441e:	6978      	ldr	r0, [r7, #20]
 8004420:	f7ff fefb 	bl	800421a <prvUnlockQueue>
	}
 8004424:	bf00      	nop
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08e      	sub	sp, #56	; 0x38
 8004430:	af04      	add	r7, sp, #16
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800443a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10a      	bne.n	8004456 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	623b      	str	r3, [r7, #32]
}
 8004452:	bf00      	nop
 8004454:	e7fe      	b.n	8004454 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10a      	bne.n	8004472 <xTaskCreateStatic+0x46>
	__asm volatile
 800445c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004460:	f383 8811 	msr	BASEPRI, r3
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	61fb      	str	r3, [r7, #28]
}
 800446e:	bf00      	nop
 8004470:	e7fe      	b.n	8004470 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004472:	23a8      	movs	r3, #168	; 0xa8
 8004474:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	2ba8      	cmp	r3, #168	; 0xa8
 800447a:	d00a      	beq.n	8004492 <xTaskCreateStatic+0x66>
	__asm volatile
 800447c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	61bb      	str	r3, [r7, #24]
}
 800448e:	bf00      	nop
 8004490:	e7fe      	b.n	8004490 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004492:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004496:	2b00      	cmp	r3, #0
 8004498:	d01e      	beq.n	80044d8 <xTaskCreateStatic+0xac>
 800449a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800449c:	2b00      	cmp	r3, #0
 800449e:	d01b      	beq.n	80044d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	2202      	movs	r2, #2
 80044ae:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80044b2:	2300      	movs	r3, #0
 80044b4:	9303      	str	r3, [sp, #12]
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	9302      	str	r3, [sp, #8]
 80044ba:	f107 0314 	add.w	r3, r7, #20
 80044be:	9301      	str	r3, [sp, #4]
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	68b9      	ldr	r1, [r7, #8]
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 f850 	bl	8004570 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044d2:	f000 f8f3 	bl	80046bc <prvAddNewTaskToReadyList>
 80044d6:	e001      	b.n	80044dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80044d8:	2300      	movs	r3, #0
 80044da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80044dc:	697b      	ldr	r3, [r7, #20]
	}
 80044de:	4618      	mov	r0, r3
 80044e0:	3728      	adds	r7, #40	; 0x28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b08c      	sub	sp, #48	; 0x30
 80044ea:	af04      	add	r7, sp, #16
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	603b      	str	r3, [r7, #0]
 80044f2:	4613      	mov	r3, r2
 80044f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80044f6:	88fb      	ldrh	r3, [r7, #6]
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4618      	mov	r0, r3
 80044fc:	f001 fd5c 	bl	8005fb8 <pvPortMalloc>
 8004500:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00e      	beq.n	8004526 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004508:	20a8      	movs	r0, #168	; 0xa8
 800450a:	f001 fd55 	bl	8005fb8 <pvPortMalloc>
 800450e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	631a      	str	r2, [r3, #48]	; 0x30
 800451c:	e005      	b.n	800452a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800451e:	6978      	ldr	r0, [r7, #20]
 8004520:	f001 fe16 	bl	8006150 <vPortFree>
 8004524:	e001      	b.n	800452a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004526:	2300      	movs	r3, #0
 8004528:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d017      	beq.n	8004560 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004538:	88fa      	ldrh	r2, [r7, #6]
 800453a:	2300      	movs	r3, #0
 800453c:	9303      	str	r3, [sp, #12]
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	9302      	str	r3, [sp, #8]
 8004542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004544:	9301      	str	r3, [sp, #4]
 8004546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68b9      	ldr	r1, [r7, #8]
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f80e 	bl	8004570 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004554:	69f8      	ldr	r0, [r7, #28]
 8004556:	f000 f8b1 	bl	80046bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800455a:	2301      	movs	r3, #1
 800455c:	61bb      	str	r3, [r7, #24]
 800455e:	e002      	b.n	8004566 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004564:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004566:	69bb      	ldr	r3, [r7, #24]
	}
 8004568:	4618      	mov	r0, r3
 800456a:	3720      	adds	r7, #32
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800457e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004580:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	461a      	mov	r2, r3
 8004588:	21a5      	movs	r1, #165	; 0xa5
 800458a:	f001 feff 	bl	800638c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004598:	3b01      	subs	r3, #1
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	f023 0307 	bic.w	r3, r3, #7
 80045a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	617b      	str	r3, [r7, #20]
}
 80045c4:	bf00      	nop
 80045c6:	e7fe      	b.n	80045c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d01f      	beq.n	800460e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045ce:	2300      	movs	r3, #0
 80045d0:	61fb      	str	r3, [r7, #28]
 80045d2:	e012      	b.n	80045fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	4413      	add	r3, r2
 80045da:	7819      	ldrb	r1, [r3, #0]
 80045dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	4413      	add	r3, r2
 80045e2:	3334      	adds	r3, #52	; 0x34
 80045e4:	460a      	mov	r2, r1
 80045e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	4413      	add	r3, r2
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d006      	beq.n	8004602 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	3301      	adds	r3, #1
 80045f8:	61fb      	str	r3, [r7, #28]
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	2b0f      	cmp	r3, #15
 80045fe:	d9e9      	bls.n	80045d4 <prvInitialiseNewTask+0x64>
 8004600:	e000      	b.n	8004604 <prvInitialiseNewTask+0x94>
			{
				break;
 8004602:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800460c:	e003      	b.n	8004616 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800460e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004618:	2b37      	cmp	r3, #55	; 0x37
 800461a:	d901      	bls.n	8004620 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800461c:	2337      	movs	r3, #55	; 0x37
 800461e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004624:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800462a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800462c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462e:	2200      	movs	r2, #0
 8004630:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	3304      	adds	r3, #4
 8004636:	4618      	mov	r0, r3
 8004638:	f7fe fe56 	bl	80032e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800463c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463e:	3318      	adds	r3, #24
 8004640:	4618      	mov	r0, r3
 8004642:	f7fe fe51 	bl	80032e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800464a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800464c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004654:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800465a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800465c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465e:	2200      	movs	r2, #0
 8004660:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004666:	2200      	movs	r2, #0
 8004668:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800466c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466e:	3354      	adds	r3, #84	; 0x54
 8004670:	224c      	movs	r2, #76	; 0x4c
 8004672:	2100      	movs	r1, #0
 8004674:	4618      	mov	r0, r3
 8004676:	f001 fe89 	bl	800638c <memset>
 800467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467c:	4a0c      	ldr	r2, [pc, #48]	; (80046b0 <prvInitialiseNewTask+0x140>)
 800467e:	659a      	str	r2, [r3, #88]	; 0x58
 8004680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004682:	4a0c      	ldr	r2, [pc, #48]	; (80046b4 <prvInitialiseNewTask+0x144>)
 8004684:	65da      	str	r2, [r3, #92]	; 0x5c
 8004686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004688:	4a0b      	ldr	r2, [pc, #44]	; (80046b8 <prvInitialiseNewTask+0x148>)
 800468a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	68f9      	ldr	r1, [r7, #12]
 8004690:	69b8      	ldr	r0, [r7, #24]
 8004692:	f001 fa3f 	bl	8005b14 <pxPortInitialiseStack>
 8004696:	4602      	mov	r2, r0
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800469c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80046a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046a8:	bf00      	nop
 80046aa:	3720      	adds	r7, #32
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20004b68 	.word	0x20004b68
 80046b4:	20004bd0 	.word	0x20004bd0
 80046b8:	20004c38 	.word	0x20004c38

080046bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80046c4:	f001 fb56 	bl	8005d74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80046c8:	4b2d      	ldr	r3, [pc, #180]	; (8004780 <prvAddNewTaskToReadyList+0xc4>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3301      	adds	r3, #1
 80046ce:	4a2c      	ldr	r2, [pc, #176]	; (8004780 <prvAddNewTaskToReadyList+0xc4>)
 80046d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80046d2:	4b2c      	ldr	r3, [pc, #176]	; (8004784 <prvAddNewTaskToReadyList+0xc8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d109      	bne.n	80046ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80046da:	4a2a      	ldr	r2, [pc, #168]	; (8004784 <prvAddNewTaskToReadyList+0xc8>)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80046e0:	4b27      	ldr	r3, [pc, #156]	; (8004780 <prvAddNewTaskToReadyList+0xc4>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d110      	bne.n	800470a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80046e8:	f000 fc26 	bl	8004f38 <prvInitialiseTaskLists>
 80046ec:	e00d      	b.n	800470a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80046ee:	4b26      	ldr	r3, [pc, #152]	; (8004788 <prvAddNewTaskToReadyList+0xcc>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d109      	bne.n	800470a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80046f6:	4b23      	ldr	r3, [pc, #140]	; (8004784 <prvAddNewTaskToReadyList+0xc8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	429a      	cmp	r2, r3
 8004702:	d802      	bhi.n	800470a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004704:	4a1f      	ldr	r2, [pc, #124]	; (8004784 <prvAddNewTaskToReadyList+0xc8>)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800470a:	4b20      	ldr	r3, [pc, #128]	; (800478c <prvAddNewTaskToReadyList+0xd0>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3301      	adds	r3, #1
 8004710:	4a1e      	ldr	r2, [pc, #120]	; (800478c <prvAddNewTaskToReadyList+0xd0>)
 8004712:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004714:	4b1d      	ldr	r3, [pc, #116]	; (800478c <prvAddNewTaskToReadyList+0xd0>)
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004720:	4b1b      	ldr	r3, [pc, #108]	; (8004790 <prvAddNewTaskToReadyList+0xd4>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	429a      	cmp	r2, r3
 8004726:	d903      	bls.n	8004730 <prvAddNewTaskToReadyList+0x74>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472c:	4a18      	ldr	r2, [pc, #96]	; (8004790 <prvAddNewTaskToReadyList+0xd4>)
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004734:	4613      	mov	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4a15      	ldr	r2, [pc, #84]	; (8004794 <prvAddNewTaskToReadyList+0xd8>)
 800473e:	441a      	add	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3304      	adds	r3, #4
 8004744:	4619      	mov	r1, r3
 8004746:	4610      	mov	r0, r2
 8004748:	f7fe fddb 	bl	8003302 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800474c:	f001 fb42 	bl	8005dd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004750:	4b0d      	ldr	r3, [pc, #52]	; (8004788 <prvAddNewTaskToReadyList+0xcc>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00e      	beq.n	8004776 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004758:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <prvAddNewTaskToReadyList+0xc8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	429a      	cmp	r2, r3
 8004764:	d207      	bcs.n	8004776 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004766:	4b0c      	ldr	r3, [pc, #48]	; (8004798 <prvAddNewTaskToReadyList+0xdc>)
 8004768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004776:	bf00      	nop
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	20000de8 	.word	0x20000de8
 8004784:	20000914 	.word	0x20000914
 8004788:	20000df4 	.word	0x20000df4
 800478c:	20000e04 	.word	0x20000e04
 8004790:	20000df0 	.word	0x20000df0
 8004794:	20000918 	.word	0x20000918
 8004798:	e000ed04 	.word	0xe000ed04

0800479c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80047a4:	2300      	movs	r3, #0
 80047a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d017      	beq.n	80047de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80047ae:	4b13      	ldr	r3, [pc, #76]	; (80047fc <vTaskDelay+0x60>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <vTaskDelay+0x30>
	__asm volatile
 80047b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	60bb      	str	r3, [r7, #8]
}
 80047c8:	bf00      	nop
 80047ca:	e7fe      	b.n	80047ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80047cc:	f000 f88a 	bl	80048e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80047d0:	2100      	movs	r1, #0
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 fdfc 	bl	80053d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80047d8:	f000 f892 	bl	8004900 <xTaskResumeAll>
 80047dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d107      	bne.n	80047f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80047e4:	4b06      	ldr	r3, [pc, #24]	; (8004800 <vTaskDelay+0x64>)
 80047e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047f4:	bf00      	nop
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	20000e10 	.word	0x20000e10
 8004800:	e000ed04 	.word	0xe000ed04

08004804 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b08a      	sub	sp, #40	; 0x28
 8004808:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800480a:	2300      	movs	r3, #0
 800480c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800480e:	2300      	movs	r3, #0
 8004810:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004812:	463a      	mov	r2, r7
 8004814:	1d39      	adds	r1, r7, #4
 8004816:	f107 0308 	add.w	r3, r7, #8
 800481a:	4618      	mov	r0, r3
 800481c:	f7fe fd10 	bl	8003240 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004820:	6839      	ldr	r1, [r7, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	9202      	str	r2, [sp, #8]
 8004828:	9301      	str	r3, [sp, #4]
 800482a:	2300      	movs	r3, #0
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	2300      	movs	r3, #0
 8004830:	460a      	mov	r2, r1
 8004832:	4924      	ldr	r1, [pc, #144]	; (80048c4 <vTaskStartScheduler+0xc0>)
 8004834:	4824      	ldr	r0, [pc, #144]	; (80048c8 <vTaskStartScheduler+0xc4>)
 8004836:	f7ff fdf9 	bl	800442c <xTaskCreateStatic>
 800483a:	4603      	mov	r3, r0
 800483c:	4a23      	ldr	r2, [pc, #140]	; (80048cc <vTaskStartScheduler+0xc8>)
 800483e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004840:	4b22      	ldr	r3, [pc, #136]	; (80048cc <vTaskStartScheduler+0xc8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004848:	2301      	movs	r3, #1
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	e001      	b.n	8004852 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d102      	bne.n	800485e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004858:	f000 fe0e 	bl	8005478 <xTimerCreateTimerTask>
 800485c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d11b      	bne.n	800489c <vTaskStartScheduler+0x98>
	__asm volatile
 8004864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	613b      	str	r3, [r7, #16]
}
 8004876:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004878:	4b15      	ldr	r3, [pc, #84]	; (80048d0 <vTaskStartScheduler+0xcc>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3354      	adds	r3, #84	; 0x54
 800487e:	4a15      	ldr	r2, [pc, #84]	; (80048d4 <vTaskStartScheduler+0xd0>)
 8004880:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004882:	4b15      	ldr	r3, [pc, #84]	; (80048d8 <vTaskStartScheduler+0xd4>)
 8004884:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004888:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800488a:	4b14      	ldr	r3, [pc, #80]	; (80048dc <vTaskStartScheduler+0xd8>)
 800488c:	2201      	movs	r2, #1
 800488e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004890:	4b13      	ldr	r3, [pc, #76]	; (80048e0 <vTaskStartScheduler+0xdc>)
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004896:	f001 f9cb 	bl	8005c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800489a:	e00e      	b.n	80048ba <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048a2:	d10a      	bne.n	80048ba <vTaskStartScheduler+0xb6>
	__asm volatile
 80048a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	60fb      	str	r3, [r7, #12]
}
 80048b6:	bf00      	nop
 80048b8:	e7fe      	b.n	80048b8 <vTaskStartScheduler+0xb4>
}
 80048ba:	bf00      	nop
 80048bc:	3718      	adds	r7, #24
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	080065d0 	.word	0x080065d0
 80048c8:	08004f09 	.word	0x08004f09
 80048cc:	20000e0c 	.word	0x20000e0c
 80048d0:	20000914 	.word	0x20000914
 80048d4:	200000ac 	.word	0x200000ac
 80048d8:	20000e08 	.word	0x20000e08
 80048dc:	20000df4 	.word	0x20000df4
 80048e0:	20000dec 	.word	0x20000dec

080048e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80048e8:	4b04      	ldr	r3, [pc, #16]	; (80048fc <vTaskSuspendAll+0x18>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3301      	adds	r3, #1
 80048ee:	4a03      	ldr	r2, [pc, #12]	; (80048fc <vTaskSuspendAll+0x18>)
 80048f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80048f2:	bf00      	nop
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	20000e10 	.word	0x20000e10

08004900 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004906:	2300      	movs	r3, #0
 8004908:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800490a:	2300      	movs	r3, #0
 800490c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800490e:	4b42      	ldr	r3, [pc, #264]	; (8004a18 <xTaskResumeAll+0x118>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10a      	bne.n	800492c <xTaskResumeAll+0x2c>
	__asm volatile
 8004916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	603b      	str	r3, [r7, #0]
}
 8004928:	bf00      	nop
 800492a:	e7fe      	b.n	800492a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800492c:	f001 fa22 	bl	8005d74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004930:	4b39      	ldr	r3, [pc, #228]	; (8004a18 <xTaskResumeAll+0x118>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3b01      	subs	r3, #1
 8004936:	4a38      	ldr	r2, [pc, #224]	; (8004a18 <xTaskResumeAll+0x118>)
 8004938:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800493a:	4b37      	ldr	r3, [pc, #220]	; (8004a18 <xTaskResumeAll+0x118>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d162      	bne.n	8004a08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004942:	4b36      	ldr	r3, [pc, #216]	; (8004a1c <xTaskResumeAll+0x11c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d05e      	beq.n	8004a08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800494a:	e02f      	b.n	80049ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800494c:	4b34      	ldr	r3, [pc, #208]	; (8004a20 <xTaskResumeAll+0x120>)
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	3318      	adds	r3, #24
 8004958:	4618      	mov	r0, r3
 800495a:	f7fe fd2f 	bl	80033bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	3304      	adds	r3, #4
 8004962:	4618      	mov	r0, r3
 8004964:	f7fe fd2a 	bl	80033bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800496c:	4b2d      	ldr	r3, [pc, #180]	; (8004a24 <xTaskResumeAll+0x124>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	429a      	cmp	r2, r3
 8004972:	d903      	bls.n	800497c <xTaskResumeAll+0x7c>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	4a2a      	ldr	r2, [pc, #168]	; (8004a24 <xTaskResumeAll+0x124>)
 800497a:	6013      	str	r3, [r2, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004980:	4613      	mov	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4a27      	ldr	r2, [pc, #156]	; (8004a28 <xTaskResumeAll+0x128>)
 800498a:	441a      	add	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	3304      	adds	r3, #4
 8004990:	4619      	mov	r1, r3
 8004992:	4610      	mov	r0, r2
 8004994:	f7fe fcb5 	bl	8003302 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800499c:	4b23      	ldr	r3, [pc, #140]	; (8004a2c <xTaskResumeAll+0x12c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d302      	bcc.n	80049ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80049a6:	4b22      	ldr	r3, [pc, #136]	; (8004a30 <xTaskResumeAll+0x130>)
 80049a8:	2201      	movs	r2, #1
 80049aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049ac:	4b1c      	ldr	r3, [pc, #112]	; (8004a20 <xTaskResumeAll+0x120>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1cb      	bne.n	800494c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80049ba:	f000 fb5f 	bl	800507c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80049be:	4b1d      	ldr	r3, [pc, #116]	; (8004a34 <xTaskResumeAll+0x134>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d010      	beq.n	80049ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80049ca:	f000 f847 	bl	8004a5c <xTaskIncrementTick>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80049d4:	4b16      	ldr	r3, [pc, #88]	; (8004a30 <xTaskResumeAll+0x130>)
 80049d6:	2201      	movs	r2, #1
 80049d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	3b01      	subs	r3, #1
 80049de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f1      	bne.n	80049ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80049e6:	4b13      	ldr	r3, [pc, #76]	; (8004a34 <xTaskResumeAll+0x134>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80049ec:	4b10      	ldr	r3, [pc, #64]	; (8004a30 <xTaskResumeAll+0x130>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d009      	beq.n	8004a08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80049f4:	2301      	movs	r3, #1
 80049f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80049f8:	4b0f      	ldr	r3, [pc, #60]	; (8004a38 <xTaskResumeAll+0x138>)
 80049fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a08:	f001 f9e4 	bl	8005dd4 <vPortExitCritical>

	return xAlreadyYielded;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	20000e10 	.word	0x20000e10
 8004a1c:	20000de8 	.word	0x20000de8
 8004a20:	20000da8 	.word	0x20000da8
 8004a24:	20000df0 	.word	0x20000df0
 8004a28:	20000918 	.word	0x20000918
 8004a2c:	20000914 	.word	0x20000914
 8004a30:	20000dfc 	.word	0x20000dfc
 8004a34:	20000df8 	.word	0x20000df8
 8004a38:	e000ed04 	.word	0xe000ed04

08004a3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004a42:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <xTaskGetTickCount+0x1c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004a48:	687b      	ldr	r3, [r7, #4]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	20000dec 	.word	0x20000dec

08004a5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a62:	2300      	movs	r3, #0
 8004a64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a66:	4b4f      	ldr	r3, [pc, #316]	; (8004ba4 <xTaskIncrementTick+0x148>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f040 808f 	bne.w	8004b8e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a70:	4b4d      	ldr	r3, [pc, #308]	; (8004ba8 <xTaskIncrementTick+0x14c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3301      	adds	r3, #1
 8004a76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a78:	4a4b      	ldr	r2, [pc, #300]	; (8004ba8 <xTaskIncrementTick+0x14c>)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d120      	bne.n	8004ac6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a84:	4b49      	ldr	r3, [pc, #292]	; (8004bac <xTaskIncrementTick+0x150>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <xTaskIncrementTick+0x48>
	__asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	603b      	str	r3, [r7, #0]
}
 8004aa0:	bf00      	nop
 8004aa2:	e7fe      	b.n	8004aa2 <xTaskIncrementTick+0x46>
 8004aa4:	4b41      	ldr	r3, [pc, #260]	; (8004bac <xTaskIncrementTick+0x150>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	4b41      	ldr	r3, [pc, #260]	; (8004bb0 <xTaskIncrementTick+0x154>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a3f      	ldr	r2, [pc, #252]	; (8004bac <xTaskIncrementTick+0x150>)
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	4a3f      	ldr	r2, [pc, #252]	; (8004bb0 <xTaskIncrementTick+0x154>)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	4b3e      	ldr	r3, [pc, #248]	; (8004bb4 <xTaskIncrementTick+0x158>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3301      	adds	r3, #1
 8004abe:	4a3d      	ldr	r2, [pc, #244]	; (8004bb4 <xTaskIncrementTick+0x158>)
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	f000 fadb 	bl	800507c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ac6:	4b3c      	ldr	r3, [pc, #240]	; (8004bb8 <xTaskIncrementTick+0x15c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d349      	bcc.n	8004b64 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ad0:	4b36      	ldr	r3, [pc, #216]	; (8004bac <xTaskIncrementTick+0x150>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d104      	bne.n	8004ae4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ada:	4b37      	ldr	r3, [pc, #220]	; (8004bb8 <xTaskIncrementTick+0x15c>)
 8004adc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ae0:	601a      	str	r2, [r3, #0]
					break;
 8004ae2:	e03f      	b.n	8004b64 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ae4:	4b31      	ldr	r3, [pc, #196]	; (8004bac <xTaskIncrementTick+0x150>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d203      	bcs.n	8004b04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004afc:	4a2e      	ldr	r2, [pc, #184]	; (8004bb8 <xTaskIncrementTick+0x15c>)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b02:	e02f      	b.n	8004b64 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	3304      	adds	r3, #4
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fe fc57 	bl	80033bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d004      	beq.n	8004b20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	3318      	adds	r3, #24
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fe fc4e 	bl	80033bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b24:	4b25      	ldr	r3, [pc, #148]	; (8004bbc <xTaskIncrementTick+0x160>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d903      	bls.n	8004b34 <xTaskIncrementTick+0xd8>
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b30:	4a22      	ldr	r2, [pc, #136]	; (8004bbc <xTaskIncrementTick+0x160>)
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4a1f      	ldr	r2, [pc, #124]	; (8004bc0 <xTaskIncrementTick+0x164>)
 8004b42:	441a      	add	r2, r3
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	3304      	adds	r3, #4
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	f7fe fbd9 	bl	8003302 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b54:	4b1b      	ldr	r3, [pc, #108]	; (8004bc4 <xTaskIncrementTick+0x168>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d3b8      	bcc.n	8004ad0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b62:	e7b5      	b.n	8004ad0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b64:	4b17      	ldr	r3, [pc, #92]	; (8004bc4 <xTaskIncrementTick+0x168>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b6a:	4915      	ldr	r1, [pc, #84]	; (8004bc0 <xTaskIncrementTick+0x164>)
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d901      	bls.n	8004b80 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004b80:	4b11      	ldr	r3, [pc, #68]	; (8004bc8 <xTaskIncrementTick+0x16c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d007      	beq.n	8004b98 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	e004      	b.n	8004b98 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004b8e:	4b0f      	ldr	r3, [pc, #60]	; (8004bcc <xTaskIncrementTick+0x170>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3301      	adds	r3, #1
 8004b94:	4a0d      	ldr	r2, [pc, #52]	; (8004bcc <xTaskIncrementTick+0x170>)
 8004b96:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004b98:	697b      	ldr	r3, [r7, #20]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000e10 	.word	0x20000e10
 8004ba8:	20000dec 	.word	0x20000dec
 8004bac:	20000da0 	.word	0x20000da0
 8004bb0:	20000da4 	.word	0x20000da4
 8004bb4:	20000e00 	.word	0x20000e00
 8004bb8:	20000e08 	.word	0x20000e08
 8004bbc:	20000df0 	.word	0x20000df0
 8004bc0:	20000918 	.word	0x20000918
 8004bc4:	20000914 	.word	0x20000914
 8004bc8:	20000dfc 	.word	0x20000dfc
 8004bcc:	20000df8 	.word	0x20000df8

08004bd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004bd6:	4b2a      	ldr	r3, [pc, #168]	; (8004c80 <vTaskSwitchContext+0xb0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004bde:	4b29      	ldr	r3, [pc, #164]	; (8004c84 <vTaskSwitchContext+0xb4>)
 8004be0:	2201      	movs	r2, #1
 8004be2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004be4:	e046      	b.n	8004c74 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004be6:	4b27      	ldr	r3, [pc, #156]	; (8004c84 <vTaskSwitchContext+0xb4>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bec:	4b26      	ldr	r3, [pc, #152]	; (8004c88 <vTaskSwitchContext+0xb8>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	e010      	b.n	8004c16 <vTaskSwitchContext+0x46>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10a      	bne.n	8004c10 <vTaskSwitchContext+0x40>
	__asm volatile
 8004bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	607b      	str	r3, [r7, #4]
}
 8004c0c:	bf00      	nop
 8004c0e:	e7fe      	b.n	8004c0e <vTaskSwitchContext+0x3e>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	491d      	ldr	r1, [pc, #116]	; (8004c8c <vTaskSwitchContext+0xbc>)
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4413      	add	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	440b      	add	r3, r1
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0e4      	beq.n	8004bf4 <vTaskSwitchContext+0x24>
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4a15      	ldr	r2, [pc, #84]	; (8004c8c <vTaskSwitchContext+0xbc>)
 8004c36:	4413      	add	r3, r2
 8004c38:	60bb      	str	r3, [r7, #8]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	605a      	str	r2, [r3, #4]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	3308      	adds	r3, #8
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d104      	bne.n	8004c5a <vTaskSwitchContext+0x8a>
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	605a      	str	r2, [r3, #4]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	4a0b      	ldr	r2, [pc, #44]	; (8004c90 <vTaskSwitchContext+0xc0>)
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	4a08      	ldr	r2, [pc, #32]	; (8004c88 <vTaskSwitchContext+0xb8>)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c6a:	4b09      	ldr	r3, [pc, #36]	; (8004c90 <vTaskSwitchContext+0xc0>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3354      	adds	r3, #84	; 0x54
 8004c70:	4a08      	ldr	r2, [pc, #32]	; (8004c94 <vTaskSwitchContext+0xc4>)
 8004c72:	6013      	str	r3, [r2, #0]
}
 8004c74:	bf00      	nop
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	20000e10 	.word	0x20000e10
 8004c84:	20000dfc 	.word	0x20000dfc
 8004c88:	20000df0 	.word	0x20000df0
 8004c8c:	20000918 	.word	0x20000918
 8004c90:	20000914 	.word	0x20000914
 8004c94:	200000ac 	.word	0x200000ac

08004c98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10a      	bne.n	8004cbe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	60fb      	str	r3, [r7, #12]
}
 8004cba:	bf00      	nop
 8004cbc:	e7fe      	b.n	8004cbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004cbe:	4b07      	ldr	r3, [pc, #28]	; (8004cdc <vTaskPlaceOnEventList+0x44>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3318      	adds	r3, #24
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fe fb3f 	bl	800334a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ccc:	2101      	movs	r1, #1
 8004cce:	6838      	ldr	r0, [r7, #0]
 8004cd0:	f000 fb7e 	bl	80053d0 <prvAddCurrentTaskToDelayedList>
}
 8004cd4:	bf00      	nop
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	20000914 	.word	0x20000914

08004ce0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10a      	bne.n	8004d08 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	617b      	str	r3, [r7, #20]
}
 8004d04:	bf00      	nop
 8004d06:	e7fe      	b.n	8004d06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d08:	4b0a      	ldr	r3, [pc, #40]	; (8004d34 <vTaskPlaceOnEventListRestricted+0x54>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3318      	adds	r3, #24
 8004d0e:	4619      	mov	r1, r3
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f7fe faf6 	bl	8003302 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d002      	beq.n	8004d22 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004d1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d20:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004d22:	6879      	ldr	r1, [r7, #4]
 8004d24:	68b8      	ldr	r0, [r7, #8]
 8004d26:	f000 fb53 	bl	80053d0 <prvAddCurrentTaskToDelayedList>
	}
 8004d2a:	bf00      	nop
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	20000914 	.word	0x20000914

08004d38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10a      	bne.n	8004d64 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d52:	f383 8811 	msr	BASEPRI, r3
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	60fb      	str	r3, [r7, #12]
}
 8004d60:	bf00      	nop
 8004d62:	e7fe      	b.n	8004d62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	3318      	adds	r3, #24
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7fe fb27 	bl	80033bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d6e:	4b1e      	ldr	r3, [pc, #120]	; (8004de8 <xTaskRemoveFromEventList+0xb0>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d11d      	bne.n	8004db2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	3304      	adds	r3, #4
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fe fb1e 	bl	80033bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d84:	4b19      	ldr	r3, [pc, #100]	; (8004dec <xTaskRemoveFromEventList+0xb4>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d903      	bls.n	8004d94 <xTaskRemoveFromEventList+0x5c>
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d90:	4a16      	ldr	r2, [pc, #88]	; (8004dec <xTaskRemoveFromEventList+0xb4>)
 8004d92:	6013      	str	r3, [r2, #0]
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d98:	4613      	mov	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4a13      	ldr	r2, [pc, #76]	; (8004df0 <xTaskRemoveFromEventList+0xb8>)
 8004da2:	441a      	add	r2, r3
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	3304      	adds	r3, #4
 8004da8:	4619      	mov	r1, r3
 8004daa:	4610      	mov	r0, r2
 8004dac:	f7fe faa9 	bl	8003302 <vListInsertEnd>
 8004db0:	e005      	b.n	8004dbe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	3318      	adds	r3, #24
 8004db6:	4619      	mov	r1, r3
 8004db8:	480e      	ldr	r0, [pc, #56]	; (8004df4 <xTaskRemoveFromEventList+0xbc>)
 8004dba:	f7fe faa2 	bl	8003302 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc2:	4b0d      	ldr	r3, [pc, #52]	; (8004df8 <xTaskRemoveFromEventList+0xc0>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d905      	bls.n	8004dd8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004dd0:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <xTaskRemoveFromEventList+0xc4>)
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	e001      	b.n	8004ddc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004ddc:	697b      	ldr	r3, [r7, #20]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3718      	adds	r7, #24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	20000e10 	.word	0x20000e10
 8004dec:	20000df0 	.word	0x20000df0
 8004df0:	20000918 	.word	0x20000918
 8004df4:	20000da8 	.word	0x20000da8
 8004df8:	20000914 	.word	0x20000914
 8004dfc:	20000dfc 	.word	0x20000dfc

08004e00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e08:	4b06      	ldr	r3, [pc, #24]	; (8004e24 <vTaskInternalSetTimeOutState+0x24>)
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004e10:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <vTaskInternalSetTimeOutState+0x28>)
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	605a      	str	r2, [r3, #4]
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	20000e00 	.word	0x20000e00
 8004e28:	20000dec 	.word	0x20000dec

08004e2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b088      	sub	sp, #32
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10a      	bne.n	8004e52 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	613b      	str	r3, [r7, #16]
}
 8004e4e:	bf00      	nop
 8004e50:	e7fe      	b.n	8004e50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10a      	bne.n	8004e6e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5c:	f383 8811 	msr	BASEPRI, r3
 8004e60:	f3bf 8f6f 	isb	sy
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	60fb      	str	r3, [r7, #12]
}
 8004e6a:	bf00      	nop
 8004e6c:	e7fe      	b.n	8004e6c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004e6e:	f000 ff81 	bl	8005d74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004e72:	4b1d      	ldr	r3, [pc, #116]	; (8004ee8 <xTaskCheckForTimeOut+0xbc>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e8a:	d102      	bne.n	8004e92 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	61fb      	str	r3, [r7, #28]
 8004e90:	e023      	b.n	8004eda <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	4b15      	ldr	r3, [pc, #84]	; (8004eec <xTaskCheckForTimeOut+0xc0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d007      	beq.n	8004eae <xTaskCheckForTimeOut+0x82>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d302      	bcc.n	8004eae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	61fb      	str	r3, [r7, #28]
 8004eac:	e015      	b.n	8004eda <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d20b      	bcs.n	8004ed0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	1ad2      	subs	r2, r2, r3
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7ff ff9b 	bl	8004e00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	61fb      	str	r3, [r7, #28]
 8004ece:	e004      	b.n	8004eda <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004eda:	f000 ff7b 	bl	8005dd4 <vPortExitCritical>

	return xReturn;
 8004ede:	69fb      	ldr	r3, [r7, #28]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3720      	adds	r7, #32
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	20000dec 	.word	0x20000dec
 8004eec:	20000e00 	.word	0x20000e00

08004ef0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ef4:	4b03      	ldr	r3, [pc, #12]	; (8004f04 <vTaskMissedYield+0x14>)
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	601a      	str	r2, [r3, #0]
}
 8004efa:	bf00      	nop
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	20000dfc 	.word	0x20000dfc

08004f08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f10:	f000 f852 	bl	8004fb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f14:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <prvIdleTask+0x28>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d9f9      	bls.n	8004f10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f1c:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <prvIdleTask+0x2c>)
 8004f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004f2c:	e7f0      	b.n	8004f10 <prvIdleTask+0x8>
 8004f2e:	bf00      	nop
 8004f30:	20000918 	.word	0x20000918
 8004f34:	e000ed04 	.word	0xe000ed04

08004f38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f3e:	2300      	movs	r3, #0
 8004f40:	607b      	str	r3, [r7, #4]
 8004f42:	e00c      	b.n	8004f5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	4613      	mov	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4a12      	ldr	r2, [pc, #72]	; (8004f98 <prvInitialiseTaskLists+0x60>)
 8004f50:	4413      	add	r3, r2
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fe f9a8 	bl	80032a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	607b      	str	r3, [r7, #4]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b37      	cmp	r3, #55	; 0x37
 8004f62:	d9ef      	bls.n	8004f44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f64:	480d      	ldr	r0, [pc, #52]	; (8004f9c <prvInitialiseTaskLists+0x64>)
 8004f66:	f7fe f99f 	bl	80032a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f6a:	480d      	ldr	r0, [pc, #52]	; (8004fa0 <prvInitialiseTaskLists+0x68>)
 8004f6c:	f7fe f99c 	bl	80032a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f70:	480c      	ldr	r0, [pc, #48]	; (8004fa4 <prvInitialiseTaskLists+0x6c>)
 8004f72:	f7fe f999 	bl	80032a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f76:	480c      	ldr	r0, [pc, #48]	; (8004fa8 <prvInitialiseTaskLists+0x70>)
 8004f78:	f7fe f996 	bl	80032a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f7c:	480b      	ldr	r0, [pc, #44]	; (8004fac <prvInitialiseTaskLists+0x74>)
 8004f7e:	f7fe f993 	bl	80032a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f82:	4b0b      	ldr	r3, [pc, #44]	; (8004fb0 <prvInitialiseTaskLists+0x78>)
 8004f84:	4a05      	ldr	r2, [pc, #20]	; (8004f9c <prvInitialiseTaskLists+0x64>)
 8004f86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f88:	4b0a      	ldr	r3, [pc, #40]	; (8004fb4 <prvInitialiseTaskLists+0x7c>)
 8004f8a:	4a05      	ldr	r2, [pc, #20]	; (8004fa0 <prvInitialiseTaskLists+0x68>)
 8004f8c:	601a      	str	r2, [r3, #0]
}
 8004f8e:	bf00      	nop
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20000918 	.word	0x20000918
 8004f9c:	20000d78 	.word	0x20000d78
 8004fa0:	20000d8c 	.word	0x20000d8c
 8004fa4:	20000da8 	.word	0x20000da8
 8004fa8:	20000dbc 	.word	0x20000dbc
 8004fac:	20000dd4 	.word	0x20000dd4
 8004fb0:	20000da0 	.word	0x20000da0
 8004fb4:	20000da4 	.word	0x20000da4

08004fb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fbe:	e019      	b.n	8004ff4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004fc0:	f000 fed8 	bl	8005d74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fc4:	4b10      	ldr	r3, [pc, #64]	; (8005008 <prvCheckTasksWaitingTermination+0x50>)
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3304      	adds	r3, #4
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fe f9f3 	bl	80033bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004fd6:	4b0d      	ldr	r3, [pc, #52]	; (800500c <prvCheckTasksWaitingTermination+0x54>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	4a0b      	ldr	r2, [pc, #44]	; (800500c <prvCheckTasksWaitingTermination+0x54>)
 8004fde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004fe0:	4b0b      	ldr	r3, [pc, #44]	; (8005010 <prvCheckTasksWaitingTermination+0x58>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	4a0a      	ldr	r2, [pc, #40]	; (8005010 <prvCheckTasksWaitingTermination+0x58>)
 8004fe8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004fea:	f000 fef3 	bl	8005dd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f810 	bl	8005014 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ff4:	4b06      	ldr	r3, [pc, #24]	; (8005010 <prvCheckTasksWaitingTermination+0x58>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1e1      	bne.n	8004fc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ffc:	bf00      	nop
 8004ffe:	bf00      	nop
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	20000dbc 	.word	0x20000dbc
 800500c:	20000de8 	.word	0x20000de8
 8005010:	20000dd0 	.word	0x20000dd0

08005014 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3354      	adds	r3, #84	; 0x54
 8005020:	4618      	mov	r0, r3
 8005022:	f001 f9bb 	bl	800639c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800502c:	2b00      	cmp	r3, #0
 800502e:	d108      	bne.n	8005042 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005034:	4618      	mov	r0, r3
 8005036:	f001 f88b 	bl	8006150 <vPortFree>
				vPortFree( pxTCB );
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f001 f888 	bl	8006150 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005040:	e018      	b.n	8005074 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005048:	2b01      	cmp	r3, #1
 800504a:	d103      	bne.n	8005054 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f001 f87f 	bl	8006150 <vPortFree>
	}
 8005052:	e00f      	b.n	8005074 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800505a:	2b02      	cmp	r3, #2
 800505c:	d00a      	beq.n	8005074 <prvDeleteTCB+0x60>
	__asm volatile
 800505e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	60fb      	str	r3, [r7, #12]
}
 8005070:	bf00      	nop
 8005072:	e7fe      	b.n	8005072 <prvDeleteTCB+0x5e>
	}
 8005074:	bf00      	nop
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005082:	4b0c      	ldr	r3, [pc, #48]	; (80050b4 <prvResetNextTaskUnblockTime+0x38>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d104      	bne.n	8005096 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800508c:	4b0a      	ldr	r3, [pc, #40]	; (80050b8 <prvResetNextTaskUnblockTime+0x3c>)
 800508e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005092:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005094:	e008      	b.n	80050a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005096:	4b07      	ldr	r3, [pc, #28]	; (80050b4 <prvResetNextTaskUnblockTime+0x38>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	4a04      	ldr	r2, [pc, #16]	; (80050b8 <prvResetNextTaskUnblockTime+0x3c>)
 80050a6:	6013      	str	r3, [r2, #0]
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	20000da0 	.word	0x20000da0
 80050b8:	20000e08 	.word	0x20000e08

080050bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80050c2:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <xTaskGetSchedulerState+0x34>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d102      	bne.n	80050d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80050ca:	2301      	movs	r3, #1
 80050cc:	607b      	str	r3, [r7, #4]
 80050ce:	e008      	b.n	80050e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050d0:	4b08      	ldr	r3, [pc, #32]	; (80050f4 <xTaskGetSchedulerState+0x38>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d102      	bne.n	80050de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80050d8:	2302      	movs	r3, #2
 80050da:	607b      	str	r3, [r7, #4]
 80050dc:	e001      	b.n	80050e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80050de:	2300      	movs	r3, #0
 80050e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80050e2:	687b      	ldr	r3, [r7, #4]
	}
 80050e4:	4618      	mov	r0, r3
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	20000df4 	.word	0x20000df4
 80050f4:	20000e10 	.word	0x20000e10

080050f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005104:	2300      	movs	r3, #0
 8005106:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d051      	beq.n	80051b2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005112:	4b2a      	ldr	r3, [pc, #168]	; (80051bc <xTaskPriorityInherit+0xc4>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005118:	429a      	cmp	r2, r3
 800511a:	d241      	bcs.n	80051a0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	2b00      	cmp	r3, #0
 8005122:	db06      	blt.n	8005132 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005124:	4b25      	ldr	r3, [pc, #148]	; (80051bc <xTaskPriorityInherit+0xc4>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	6959      	ldr	r1, [r3, #20]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800513a:	4613      	mov	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4a1f      	ldr	r2, [pc, #124]	; (80051c0 <xTaskPriorityInherit+0xc8>)
 8005144:	4413      	add	r3, r2
 8005146:	4299      	cmp	r1, r3
 8005148:	d122      	bne.n	8005190 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	3304      	adds	r3, #4
 800514e:	4618      	mov	r0, r3
 8005150:	f7fe f934 	bl	80033bc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005154:	4b19      	ldr	r3, [pc, #100]	; (80051bc <xTaskPriorityInherit+0xc4>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005162:	4b18      	ldr	r3, [pc, #96]	; (80051c4 <xTaskPriorityInherit+0xcc>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	429a      	cmp	r2, r3
 8005168:	d903      	bls.n	8005172 <xTaskPriorityInherit+0x7a>
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516e:	4a15      	ldr	r2, [pc, #84]	; (80051c4 <xTaskPriorityInherit+0xcc>)
 8005170:	6013      	str	r3, [r2, #0]
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005176:	4613      	mov	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4a10      	ldr	r2, [pc, #64]	; (80051c0 <xTaskPriorityInherit+0xc8>)
 8005180:	441a      	add	r2, r3
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	3304      	adds	r3, #4
 8005186:	4619      	mov	r1, r3
 8005188:	4610      	mov	r0, r2
 800518a:	f7fe f8ba 	bl	8003302 <vListInsertEnd>
 800518e:	e004      	b.n	800519a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005190:	4b0a      	ldr	r3, [pc, #40]	; (80051bc <xTaskPriorityInherit+0xc4>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800519a:	2301      	movs	r3, #1
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	e008      	b.n	80051b2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051a4:	4b05      	ldr	r3, [pc, #20]	; (80051bc <xTaskPriorityInherit+0xc4>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d201      	bcs.n	80051b2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80051ae:	2301      	movs	r3, #1
 80051b0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80051b2:	68fb      	ldr	r3, [r7, #12]
	}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	20000914 	.word	0x20000914
 80051c0:	20000918 	.word	0x20000918
 80051c4:	20000df0 	.word	0x20000df0

080051c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80051d4:	2300      	movs	r3, #0
 80051d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d056      	beq.n	800528c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80051de:	4b2e      	ldr	r3, [pc, #184]	; (8005298 <xTaskPriorityDisinherit+0xd0>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d00a      	beq.n	80051fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80051e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	60fb      	str	r3, [r7, #12]
}
 80051fa:	bf00      	nop
 80051fc:	e7fe      	b.n	80051fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10a      	bne.n	800521c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	60bb      	str	r3, [r7, #8]
}
 8005218:	bf00      	nop
 800521a:	e7fe      	b.n	800521a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005220:	1e5a      	subs	r2, r3, #1
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800522e:	429a      	cmp	r2, r3
 8005230:	d02c      	beq.n	800528c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005236:	2b00      	cmp	r3, #0
 8005238:	d128      	bne.n	800528c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	3304      	adds	r3, #4
 800523e:	4618      	mov	r0, r3
 8005240:	f7fe f8bc 	bl	80033bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800525c:	4b0f      	ldr	r3, [pc, #60]	; (800529c <xTaskPriorityDisinherit+0xd4>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	429a      	cmp	r2, r3
 8005262:	d903      	bls.n	800526c <xTaskPriorityDisinherit+0xa4>
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	4a0c      	ldr	r2, [pc, #48]	; (800529c <xTaskPriorityDisinherit+0xd4>)
 800526a:	6013      	str	r3, [r2, #0]
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005270:	4613      	mov	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4a09      	ldr	r2, [pc, #36]	; (80052a0 <xTaskPriorityDisinherit+0xd8>)
 800527a:	441a      	add	r2, r3
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	3304      	adds	r3, #4
 8005280:	4619      	mov	r1, r3
 8005282:	4610      	mov	r0, r2
 8005284:	f7fe f83d 	bl	8003302 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005288:	2301      	movs	r3, #1
 800528a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800528c:	697b      	ldr	r3, [r7, #20]
	}
 800528e:	4618      	mov	r0, r3
 8005290:	3718      	adds	r7, #24
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	20000914 	.word	0x20000914
 800529c:	20000df0 	.word	0x20000df0
 80052a0:	20000918 	.word	0x20000918

080052a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b088      	sub	sp, #32
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80052b2:	2301      	movs	r3, #1
 80052b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d06a      	beq.n	8005392 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10a      	bne.n	80052da <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	60fb      	str	r3, [r7, #12]
}
 80052d6:	bf00      	nop
 80052d8:	e7fe      	b.n	80052d8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d902      	bls.n	80052ea <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	61fb      	str	r3, [r7, #28]
 80052e8:	e002      	b.n	80052f0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ee:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d04b      	beq.n	8005392 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	429a      	cmp	r2, r3
 8005302:	d146      	bne.n	8005392 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005304:	4b25      	ldr	r3, [pc, #148]	; (800539c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	429a      	cmp	r2, r3
 800530c:	d10a      	bne.n	8005324 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	60bb      	str	r3, [r7, #8]
}
 8005320:	bf00      	nop
 8005322:	e7fe      	b.n	8005322 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005328:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	69fa      	ldr	r2, [r7, #28]
 800532e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	2b00      	cmp	r3, #0
 8005336:	db04      	blt.n	8005342 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	6959      	ldr	r1, [r3, #20]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4613      	mov	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4413      	add	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4a13      	ldr	r2, [pc, #76]	; (80053a0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005352:	4413      	add	r3, r2
 8005354:	4299      	cmp	r1, r3
 8005356:	d11c      	bne.n	8005392 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	3304      	adds	r3, #4
 800535c:	4618      	mov	r0, r3
 800535e:	f7fe f82d 	bl	80033bc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005366:	4b0f      	ldr	r3, [pc, #60]	; (80053a4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d903      	bls.n	8005376 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005372:	4a0c      	ldr	r2, [pc, #48]	; (80053a4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800537a:	4613      	mov	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4a07      	ldr	r2, [pc, #28]	; (80053a0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005384:	441a      	add	r2, r3
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	3304      	adds	r3, #4
 800538a:	4619      	mov	r1, r3
 800538c:	4610      	mov	r0, r2
 800538e:	f7fd ffb8 	bl	8003302 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005392:	bf00      	nop
 8005394:	3720      	adds	r7, #32
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20000914 	.word	0x20000914
 80053a0:	20000918 	.word	0x20000918
 80053a4:	20000df0 	.word	0x20000df0

080053a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80053ac:	4b07      	ldr	r3, [pc, #28]	; (80053cc <pvTaskIncrementMutexHeldCount+0x24>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d004      	beq.n	80053be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80053b4:	4b05      	ldr	r3, [pc, #20]	; (80053cc <pvTaskIncrementMutexHeldCount+0x24>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053ba:	3201      	adds	r2, #1
 80053bc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80053be:	4b03      	ldr	r3, [pc, #12]	; (80053cc <pvTaskIncrementMutexHeldCount+0x24>)
 80053c0:	681b      	ldr	r3, [r3, #0]
	}
 80053c2:	4618      	mov	r0, r3
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	20000914 	.word	0x20000914

080053d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80053da:	4b21      	ldr	r3, [pc, #132]	; (8005460 <prvAddCurrentTaskToDelayedList+0x90>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053e0:	4b20      	ldr	r3, [pc, #128]	; (8005464 <prvAddCurrentTaskToDelayedList+0x94>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3304      	adds	r3, #4
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fd ffe8 	bl	80033bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053f2:	d10a      	bne.n	800540a <prvAddCurrentTaskToDelayedList+0x3a>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d007      	beq.n	800540a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053fa:	4b1a      	ldr	r3, [pc, #104]	; (8005464 <prvAddCurrentTaskToDelayedList+0x94>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	3304      	adds	r3, #4
 8005400:	4619      	mov	r1, r3
 8005402:	4819      	ldr	r0, [pc, #100]	; (8005468 <prvAddCurrentTaskToDelayedList+0x98>)
 8005404:	f7fd ff7d 	bl	8003302 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005408:	e026      	b.n	8005458 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4413      	add	r3, r2
 8005410:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005412:	4b14      	ldr	r3, [pc, #80]	; (8005464 <prvAddCurrentTaskToDelayedList+0x94>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	429a      	cmp	r2, r3
 8005420:	d209      	bcs.n	8005436 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005422:	4b12      	ldr	r3, [pc, #72]	; (800546c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	4b0f      	ldr	r3, [pc, #60]	; (8005464 <prvAddCurrentTaskToDelayedList+0x94>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3304      	adds	r3, #4
 800542c:	4619      	mov	r1, r3
 800542e:	4610      	mov	r0, r2
 8005430:	f7fd ff8b 	bl	800334a <vListInsert>
}
 8005434:	e010      	b.n	8005458 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005436:	4b0e      	ldr	r3, [pc, #56]	; (8005470 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	4b0a      	ldr	r3, [pc, #40]	; (8005464 <prvAddCurrentTaskToDelayedList+0x94>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3304      	adds	r3, #4
 8005440:	4619      	mov	r1, r3
 8005442:	4610      	mov	r0, r2
 8005444:	f7fd ff81 	bl	800334a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005448:	4b0a      	ldr	r3, [pc, #40]	; (8005474 <prvAddCurrentTaskToDelayedList+0xa4>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	429a      	cmp	r2, r3
 8005450:	d202      	bcs.n	8005458 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005452:	4a08      	ldr	r2, [pc, #32]	; (8005474 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	6013      	str	r3, [r2, #0]
}
 8005458:	bf00      	nop
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	20000dec 	.word	0x20000dec
 8005464:	20000914 	.word	0x20000914
 8005468:	20000dd4 	.word	0x20000dd4
 800546c:	20000da4 	.word	0x20000da4
 8005470:	20000da0 	.word	0x20000da0
 8005474:	20000e08 	.word	0x20000e08

08005478 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b08a      	sub	sp, #40	; 0x28
 800547c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800547e:	2300      	movs	r3, #0
 8005480:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005482:	f000 fb07 	bl	8005a94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005486:	4b1c      	ldr	r3, [pc, #112]	; (80054f8 <xTimerCreateTimerTask+0x80>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d021      	beq.n	80054d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800548e:	2300      	movs	r3, #0
 8005490:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005492:	2300      	movs	r3, #0
 8005494:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005496:	1d3a      	adds	r2, r7, #4
 8005498:	f107 0108 	add.w	r1, r7, #8
 800549c:	f107 030c 	add.w	r3, r7, #12
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7fd fee7 	bl	8003274 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	9202      	str	r2, [sp, #8]
 80054ae:	9301      	str	r3, [sp, #4]
 80054b0:	2302      	movs	r3, #2
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	2300      	movs	r3, #0
 80054b6:	460a      	mov	r2, r1
 80054b8:	4910      	ldr	r1, [pc, #64]	; (80054fc <xTimerCreateTimerTask+0x84>)
 80054ba:	4811      	ldr	r0, [pc, #68]	; (8005500 <xTimerCreateTimerTask+0x88>)
 80054bc:	f7fe ffb6 	bl	800442c <xTaskCreateStatic>
 80054c0:	4603      	mov	r3, r0
 80054c2:	4a10      	ldr	r2, [pc, #64]	; (8005504 <xTimerCreateTimerTask+0x8c>)
 80054c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80054c6:	4b0f      	ldr	r3, [pc, #60]	; (8005504 <xTimerCreateTimerTask+0x8c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80054ce:	2301      	movs	r3, #1
 80054d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10a      	bne.n	80054ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 80054d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054dc:	f383 8811 	msr	BASEPRI, r3
 80054e0:	f3bf 8f6f 	isb	sy
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	613b      	str	r3, [r7, #16]
}
 80054ea:	bf00      	nop
 80054ec:	e7fe      	b.n	80054ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80054ee:	697b      	ldr	r3, [r7, #20]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3718      	adds	r7, #24
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	20000e44 	.word	0x20000e44
 80054fc:	080065d8 	.word	0x080065d8
 8005500:	0800563d 	.word	0x0800563d
 8005504:	20000e48 	.word	0x20000e48

08005508 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b08a      	sub	sp, #40	; 0x28
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
 8005514:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005516:	2300      	movs	r3, #0
 8005518:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10a      	bne.n	8005536 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	623b      	str	r3, [r7, #32]
}
 8005532:	bf00      	nop
 8005534:	e7fe      	b.n	8005534 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005536:	4b1a      	ldr	r3, [pc, #104]	; (80055a0 <xTimerGenericCommand+0x98>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d02a      	beq.n	8005594 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2b05      	cmp	r3, #5
 800554e:	dc18      	bgt.n	8005582 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005550:	f7ff fdb4 	bl	80050bc <xTaskGetSchedulerState>
 8005554:	4603      	mov	r3, r0
 8005556:	2b02      	cmp	r3, #2
 8005558:	d109      	bne.n	800556e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800555a:	4b11      	ldr	r3, [pc, #68]	; (80055a0 <xTimerGenericCommand+0x98>)
 800555c:	6818      	ldr	r0, [r3, #0]
 800555e:	f107 0110 	add.w	r1, r7, #16
 8005562:	2300      	movs	r3, #0
 8005564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005566:	f7fe f8fb 	bl	8003760 <xQueueGenericSend>
 800556a:	6278      	str	r0, [r7, #36]	; 0x24
 800556c:	e012      	b.n	8005594 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800556e:	4b0c      	ldr	r3, [pc, #48]	; (80055a0 <xTimerGenericCommand+0x98>)
 8005570:	6818      	ldr	r0, [r3, #0]
 8005572:	f107 0110 	add.w	r1, r7, #16
 8005576:	2300      	movs	r3, #0
 8005578:	2200      	movs	r2, #0
 800557a:	f7fe f8f1 	bl	8003760 <xQueueGenericSend>
 800557e:	6278      	str	r0, [r7, #36]	; 0x24
 8005580:	e008      	b.n	8005594 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005582:	4b07      	ldr	r3, [pc, #28]	; (80055a0 <xTimerGenericCommand+0x98>)
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	f107 0110 	add.w	r1, r7, #16
 800558a:	2300      	movs	r3, #0
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	f7fe f9e5 	bl	800395c <xQueueGenericSendFromISR>
 8005592:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005596:	4618      	mov	r0, r3
 8005598:	3728      	adds	r7, #40	; 0x28
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	20000e44 	.word	0x20000e44

080055a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b088      	sub	sp, #32
 80055a8:	af02      	add	r7, sp, #8
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055ae:	4b22      	ldr	r3, [pc, #136]	; (8005638 <prvProcessExpiredTimer+0x94>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	3304      	adds	r3, #4
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fd fefd 	bl	80033bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d022      	beq.n	8005616 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	699a      	ldr	r2, [r3, #24]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	18d1      	adds	r1, r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	6978      	ldr	r0, [r7, #20]
 80055de:	f000 f8d1 	bl	8005784 <prvInsertTimerInActiveList>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d01f      	beq.n	8005628 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055e8:	2300      	movs	r3, #0
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	2300      	movs	r3, #0
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	2100      	movs	r1, #0
 80055f2:	6978      	ldr	r0, [r7, #20]
 80055f4:	f7ff ff88 	bl	8005508 <xTimerGenericCommand>
 80055f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d113      	bne.n	8005628 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	60fb      	str	r3, [r7, #12]
}
 8005612:	bf00      	nop
 8005614:	e7fe      	b.n	8005614 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800561c:	f023 0301 	bic.w	r3, r3, #1
 8005620:	b2da      	uxtb	r2, r3
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	6978      	ldr	r0, [r7, #20]
 800562e:	4798      	blx	r3
}
 8005630:	bf00      	nop
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	20000e3c 	.word	0x20000e3c

0800563c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005644:	f107 0308 	add.w	r3, r7, #8
 8005648:	4618      	mov	r0, r3
 800564a:	f000 f857 	bl	80056fc <prvGetNextExpireTime>
 800564e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	4619      	mov	r1, r3
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 f803 	bl	8005660 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800565a:	f000 f8d5 	bl	8005808 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800565e:	e7f1      	b.n	8005644 <prvTimerTask+0x8>

08005660 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800566a:	f7ff f93b 	bl	80048e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800566e:	f107 0308 	add.w	r3, r7, #8
 8005672:	4618      	mov	r0, r3
 8005674:	f000 f866 	bl	8005744 <prvSampleTimeNow>
 8005678:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d130      	bne.n	80056e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10a      	bne.n	800569c <prvProcessTimerOrBlockTask+0x3c>
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	429a      	cmp	r2, r3
 800568c:	d806      	bhi.n	800569c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800568e:	f7ff f937 	bl	8004900 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005692:	68f9      	ldr	r1, [r7, #12]
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7ff ff85 	bl	80055a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800569a:	e024      	b.n	80056e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d008      	beq.n	80056b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80056a2:	4b13      	ldr	r3, [pc, #76]	; (80056f0 <prvProcessTimerOrBlockTask+0x90>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <prvProcessTimerOrBlockTask+0x50>
 80056ac:	2301      	movs	r3, #1
 80056ae:	e000      	b.n	80056b2 <prvProcessTimerOrBlockTask+0x52>
 80056b0:	2300      	movs	r3, #0
 80056b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80056b4:	4b0f      	ldr	r3, [pc, #60]	; (80056f4 <prvProcessTimerOrBlockTask+0x94>)
 80056b6:	6818      	ldr	r0, [r3, #0]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	4619      	mov	r1, r3
 80056c2:	f7fe fe7f 	bl	80043c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80056c6:	f7ff f91b 	bl	8004900 <xTaskResumeAll>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10a      	bne.n	80056e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80056d0:	4b09      	ldr	r3, [pc, #36]	; (80056f8 <prvProcessTimerOrBlockTask+0x98>)
 80056d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	f3bf 8f6f 	isb	sy
}
 80056e0:	e001      	b.n	80056e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80056e2:	f7ff f90d 	bl	8004900 <xTaskResumeAll>
}
 80056e6:	bf00      	nop
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20000e40 	.word	0x20000e40
 80056f4:	20000e44 	.word	0x20000e44
 80056f8:	e000ed04 	.word	0xe000ed04

080056fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005704:	4b0e      	ldr	r3, [pc, #56]	; (8005740 <prvGetNextExpireTime+0x44>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <prvGetNextExpireTime+0x16>
 800570e:	2201      	movs	r2, #1
 8005710:	e000      	b.n	8005714 <prvGetNextExpireTime+0x18>
 8005712:	2200      	movs	r2, #0
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d105      	bne.n	800572c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005720:	4b07      	ldr	r3, [pc, #28]	; (8005740 <prvGetNextExpireTime+0x44>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	e001      	b.n	8005730 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005730:	68fb      	ldr	r3, [r7, #12]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	20000e3c 	.word	0x20000e3c

08005744 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800574c:	f7ff f976 	bl	8004a3c <xTaskGetTickCount>
 8005750:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005752:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <prvSampleTimeNow+0x3c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	429a      	cmp	r2, r3
 800575a:	d205      	bcs.n	8005768 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800575c:	f000 f936 	bl	80059cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	e002      	b.n	800576e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800576e:	4a04      	ldr	r2, [pc, #16]	; (8005780 <prvSampleTimeNow+0x3c>)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005774:	68fb      	ldr	r3, [r7, #12]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	20000e4c 	.word	0x20000e4c

08005784 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
 8005790:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005792:	2300      	movs	r3, #0
 8005794:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d812      	bhi.n	80057d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	1ad2      	subs	r2, r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d302      	bcc.n	80057be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80057b8:	2301      	movs	r3, #1
 80057ba:	617b      	str	r3, [r7, #20]
 80057bc:	e01b      	b.n	80057f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80057be:	4b10      	ldr	r3, [pc, #64]	; (8005800 <prvInsertTimerInActiveList+0x7c>)
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	3304      	adds	r3, #4
 80057c6:	4619      	mov	r1, r3
 80057c8:	4610      	mov	r0, r2
 80057ca:	f7fd fdbe 	bl	800334a <vListInsert>
 80057ce:	e012      	b.n	80057f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d206      	bcs.n	80057e6 <prvInsertTimerInActiveList+0x62>
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d302      	bcc.n	80057e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80057e0:	2301      	movs	r3, #1
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	e007      	b.n	80057f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80057e6:	4b07      	ldr	r3, [pc, #28]	; (8005804 <prvInsertTimerInActiveList+0x80>)
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	3304      	adds	r3, #4
 80057ee:	4619      	mov	r1, r3
 80057f0:	4610      	mov	r0, r2
 80057f2:	f7fd fdaa 	bl	800334a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80057f6:	697b      	ldr	r3, [r7, #20]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3718      	adds	r7, #24
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	20000e40 	.word	0x20000e40
 8005804:	20000e3c 	.word	0x20000e3c

08005808 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b08e      	sub	sp, #56	; 0x38
 800580c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800580e:	e0ca      	b.n	80059a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	da18      	bge.n	8005848 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005816:	1d3b      	adds	r3, r7, #4
 8005818:	3304      	adds	r3, #4
 800581a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800581c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10a      	bne.n	8005838 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	61fb      	str	r3, [r7, #28]
}
 8005834:	bf00      	nop
 8005836:	e7fe      	b.n	8005836 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800583e:	6850      	ldr	r0, [r2, #4]
 8005840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005842:	6892      	ldr	r2, [r2, #8]
 8005844:	4611      	mov	r1, r2
 8005846:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	f2c0 80ab 	blt.w	80059a6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d004      	beq.n	8005866 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585e:	3304      	adds	r3, #4
 8005860:	4618      	mov	r0, r3
 8005862:	f7fd fdab 	bl	80033bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005866:	463b      	mov	r3, r7
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff ff6b 	bl	8005744 <prvSampleTimeNow>
 800586e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b09      	cmp	r3, #9
 8005874:	f200 8096 	bhi.w	80059a4 <prvProcessReceivedCommands+0x19c>
 8005878:	a201      	add	r2, pc, #4	; (adr r2, 8005880 <prvProcessReceivedCommands+0x78>)
 800587a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587e:	bf00      	nop
 8005880:	080058a9 	.word	0x080058a9
 8005884:	080058a9 	.word	0x080058a9
 8005888:	080058a9 	.word	0x080058a9
 800588c:	0800591d 	.word	0x0800591d
 8005890:	08005931 	.word	0x08005931
 8005894:	0800597b 	.word	0x0800597b
 8005898:	080058a9 	.word	0x080058a9
 800589c:	080058a9 	.word	0x080058a9
 80058a0:	0800591d 	.word	0x0800591d
 80058a4:	08005931 	.word	0x08005931
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80058a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058ae:	f043 0301 	orr.w	r3, r3, #1
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	18d1      	adds	r1, r2, r3
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058c8:	f7ff ff5c 	bl	8005784 <prvInsertTimerInActiveList>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d069      	beq.n	80059a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d05e      	beq.n	80059a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	441a      	add	r2, r3
 80058f0:	2300      	movs	r3, #0
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	2300      	movs	r3, #0
 80058f6:	2100      	movs	r1, #0
 80058f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058fa:	f7ff fe05 	bl	8005508 <xTimerGenericCommand>
 80058fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d14f      	bne.n	80059a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	61bb      	str	r3, [r7, #24]
}
 8005918:	bf00      	nop
 800591a:	e7fe      	b.n	800591a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005922:	f023 0301 	bic.w	r3, r3, #1
 8005926:	b2da      	uxtb	r2, r3
 8005928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800592e:	e03a      	b.n	80059a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005932:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005936:	f043 0301 	orr.w	r3, r3, #1
 800593a:	b2da      	uxtb	r2, r3
 800593c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005946:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10a      	bne.n	8005966 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005954:	f383 8811 	msr	BASEPRI, r3
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	617b      	str	r3, [r7, #20]
}
 8005962:	bf00      	nop
 8005964:	e7fe      	b.n	8005964 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005968:	699a      	ldr	r2, [r3, #24]
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	18d1      	adds	r1, r2, r3
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005974:	f7ff ff06 	bl	8005784 <prvInsertTimerInActiveList>
					break;
 8005978:	e015      	b.n	80059a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800597a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d103      	bne.n	8005990 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800598a:	f000 fbe1 	bl	8006150 <vPortFree>
 800598e:	e00a      	b.n	80059a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005996:	f023 0301 	bic.w	r3, r3, #1
 800599a:	b2da      	uxtb	r2, r3
 800599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80059a2:	e000      	b.n	80059a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80059a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059a6:	4b08      	ldr	r3, [pc, #32]	; (80059c8 <prvProcessReceivedCommands+0x1c0>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	1d39      	adds	r1, r7, #4
 80059ac:	2200      	movs	r2, #0
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fe f8fc 	bl	8003bac <xQueueReceive>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f47f af2a 	bne.w	8005810 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80059bc:	bf00      	nop
 80059be:	bf00      	nop
 80059c0:	3730      	adds	r7, #48	; 0x30
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	20000e44 	.word	0x20000e44

080059cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b088      	sub	sp, #32
 80059d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059d2:	e048      	b.n	8005a66 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059d4:	4b2d      	ldr	r3, [pc, #180]	; (8005a8c <prvSwitchTimerLists+0xc0>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059de:	4b2b      	ldr	r3, [pc, #172]	; (8005a8c <prvSwitchTimerLists+0xc0>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	3304      	adds	r3, #4
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7fd fce5 	bl	80033bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d02e      	beq.n	8005a66 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	4413      	add	r3, r2
 8005a10:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d90e      	bls.n	8005a38 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a26:	4b19      	ldr	r3, [pc, #100]	; (8005a8c <prvSwitchTimerLists+0xc0>)
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	4619      	mov	r1, r3
 8005a30:	4610      	mov	r0, r2
 8005a32:	f7fd fc8a 	bl	800334a <vListInsert>
 8005a36:	e016      	b.n	8005a66 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a38:	2300      	movs	r3, #0
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	2100      	movs	r1, #0
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f7ff fd60 	bl	8005508 <xTimerGenericCommand>
 8005a48:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10a      	bne.n	8005a66 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	603b      	str	r3, [r7, #0]
}
 8005a62:	bf00      	nop
 8005a64:	e7fe      	b.n	8005a64 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a66:	4b09      	ldr	r3, [pc, #36]	; (8005a8c <prvSwitchTimerLists+0xc0>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1b1      	bne.n	80059d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005a70:	4b06      	ldr	r3, [pc, #24]	; (8005a8c <prvSwitchTimerLists+0xc0>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005a76:	4b06      	ldr	r3, [pc, #24]	; (8005a90 <prvSwitchTimerLists+0xc4>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a04      	ldr	r2, [pc, #16]	; (8005a8c <prvSwitchTimerLists+0xc0>)
 8005a7c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005a7e:	4a04      	ldr	r2, [pc, #16]	; (8005a90 <prvSwitchTimerLists+0xc4>)
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	6013      	str	r3, [r2, #0]
}
 8005a84:	bf00      	nop
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	20000e3c 	.word	0x20000e3c
 8005a90:	20000e40 	.word	0x20000e40

08005a94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005a9a:	f000 f96b 	bl	8005d74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005a9e:	4b15      	ldr	r3, [pc, #84]	; (8005af4 <prvCheckForValidListAndQueue+0x60>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d120      	bne.n	8005ae8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005aa6:	4814      	ldr	r0, [pc, #80]	; (8005af8 <prvCheckForValidListAndQueue+0x64>)
 8005aa8:	f7fd fbfe 	bl	80032a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005aac:	4813      	ldr	r0, [pc, #76]	; (8005afc <prvCheckForValidListAndQueue+0x68>)
 8005aae:	f7fd fbfb 	bl	80032a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005ab2:	4b13      	ldr	r3, [pc, #76]	; (8005b00 <prvCheckForValidListAndQueue+0x6c>)
 8005ab4:	4a10      	ldr	r2, [pc, #64]	; (8005af8 <prvCheckForValidListAndQueue+0x64>)
 8005ab6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005ab8:	4b12      	ldr	r3, [pc, #72]	; (8005b04 <prvCheckForValidListAndQueue+0x70>)
 8005aba:	4a10      	ldr	r2, [pc, #64]	; (8005afc <prvCheckForValidListAndQueue+0x68>)
 8005abc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005abe:	2300      	movs	r3, #0
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	4b11      	ldr	r3, [pc, #68]	; (8005b08 <prvCheckForValidListAndQueue+0x74>)
 8005ac4:	4a11      	ldr	r2, [pc, #68]	; (8005b0c <prvCheckForValidListAndQueue+0x78>)
 8005ac6:	2110      	movs	r1, #16
 8005ac8:	200a      	movs	r0, #10
 8005aca:	f7fd fd09 	bl	80034e0 <xQueueGenericCreateStatic>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	4a08      	ldr	r2, [pc, #32]	; (8005af4 <prvCheckForValidListAndQueue+0x60>)
 8005ad2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005ad4:	4b07      	ldr	r3, [pc, #28]	; (8005af4 <prvCheckForValidListAndQueue+0x60>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d005      	beq.n	8005ae8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005adc:	4b05      	ldr	r3, [pc, #20]	; (8005af4 <prvCheckForValidListAndQueue+0x60>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	490b      	ldr	r1, [pc, #44]	; (8005b10 <prvCheckForValidListAndQueue+0x7c>)
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fe fc1a 	bl	800431c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ae8:	f000 f974 	bl	8005dd4 <vPortExitCritical>
}
 8005aec:	bf00      	nop
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	20000e44 	.word	0x20000e44
 8005af8:	20000e14 	.word	0x20000e14
 8005afc:	20000e28 	.word	0x20000e28
 8005b00:	20000e3c 	.word	0x20000e3c
 8005b04:	20000e40 	.word	0x20000e40
 8005b08:	20000ef0 	.word	0x20000ef0
 8005b0c:	20000e50 	.word	0x20000e50
 8005b10:	080065e0 	.word	0x080065e0

08005b14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	3b04      	subs	r3, #4
 8005b24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	3b04      	subs	r3, #4
 8005b32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f023 0201 	bic.w	r2, r3, #1
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	3b04      	subs	r3, #4
 8005b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b44:	4a0c      	ldr	r2, [pc, #48]	; (8005b78 <pxPortInitialiseStack+0x64>)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3b14      	subs	r3, #20
 8005b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	3b04      	subs	r3, #4
 8005b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f06f 0202 	mvn.w	r2, #2
 8005b62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	3b20      	subs	r3, #32
 8005b68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	08005b7d 	.word	0x08005b7d

08005b7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b82:	2300      	movs	r3, #0
 8005b84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b86:	4b12      	ldr	r3, [pc, #72]	; (8005bd0 <prvTaskExitError+0x54>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b8e:	d00a      	beq.n	8005ba6 <prvTaskExitError+0x2a>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	60fb      	str	r3, [r7, #12]
}
 8005ba2:	bf00      	nop
 8005ba4:	e7fe      	b.n	8005ba4 <prvTaskExitError+0x28>
	__asm volatile
 8005ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005baa:	f383 8811 	msr	BASEPRI, r3
 8005bae:	f3bf 8f6f 	isb	sy
 8005bb2:	f3bf 8f4f 	dsb	sy
 8005bb6:	60bb      	str	r3, [r7, #8]
}
 8005bb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005bba:	bf00      	nop
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0fc      	beq.n	8005bbc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005bc2:	bf00      	nop
 8005bc4:	bf00      	nop
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	2000005c 	.word	0x2000005c
	...

08005be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005be0:	4b07      	ldr	r3, [pc, #28]	; (8005c00 <pxCurrentTCBConst2>)
 8005be2:	6819      	ldr	r1, [r3, #0]
 8005be4:	6808      	ldr	r0, [r1, #0]
 8005be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bea:	f380 8809 	msr	PSP, r0
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f04f 0000 	mov.w	r0, #0
 8005bf6:	f380 8811 	msr	BASEPRI, r0
 8005bfa:	4770      	bx	lr
 8005bfc:	f3af 8000 	nop.w

08005c00 <pxCurrentTCBConst2>:
 8005c00:	20000914 	.word	0x20000914
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c04:	bf00      	nop
 8005c06:	bf00      	nop

08005c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c08:	4808      	ldr	r0, [pc, #32]	; (8005c2c <prvPortStartFirstTask+0x24>)
 8005c0a:	6800      	ldr	r0, [r0, #0]
 8005c0c:	6800      	ldr	r0, [r0, #0]
 8005c0e:	f380 8808 	msr	MSP, r0
 8005c12:	f04f 0000 	mov.w	r0, #0
 8005c16:	f380 8814 	msr	CONTROL, r0
 8005c1a:	b662      	cpsie	i
 8005c1c:	b661      	cpsie	f
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	df00      	svc	0
 8005c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c2a:	bf00      	nop
 8005c2c:	e000ed08 	.word	0xe000ed08

08005c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c36:	4b46      	ldr	r3, [pc, #280]	; (8005d50 <xPortStartScheduler+0x120>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a46      	ldr	r2, [pc, #280]	; (8005d54 <xPortStartScheduler+0x124>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d10a      	bne.n	8005c56 <xPortStartScheduler+0x26>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	613b      	str	r3, [r7, #16]
}
 8005c52:	bf00      	nop
 8005c54:	e7fe      	b.n	8005c54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c56:	4b3e      	ldr	r3, [pc, #248]	; (8005d50 <xPortStartScheduler+0x120>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a3f      	ldr	r2, [pc, #252]	; (8005d58 <xPortStartScheduler+0x128>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d10a      	bne.n	8005c76 <xPortStartScheduler+0x46>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	60fb      	str	r3, [r7, #12]
}
 8005c72:	bf00      	nop
 8005c74:	e7fe      	b.n	8005c74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c76:	4b39      	ldr	r3, [pc, #228]	; (8005d5c <xPortStartScheduler+0x12c>)
 8005c78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	22ff      	movs	r2, #255	; 0xff
 8005c86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	4b31      	ldr	r3, [pc, #196]	; (8005d60 <xPortStartScheduler+0x130>)
 8005c9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c9e:	4b31      	ldr	r3, [pc, #196]	; (8005d64 <xPortStartScheduler+0x134>)
 8005ca0:	2207      	movs	r2, #7
 8005ca2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ca4:	e009      	b.n	8005cba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005ca6:	4b2f      	ldr	r3, [pc, #188]	; (8005d64 <xPortStartScheduler+0x134>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	4a2d      	ldr	r2, [pc, #180]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005cb0:	78fb      	ldrb	r3, [r7, #3]
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cba:	78fb      	ldrb	r3, [r7, #3]
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc2:	2b80      	cmp	r3, #128	; 0x80
 8005cc4:	d0ef      	beq.n	8005ca6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005cc6:	4b27      	ldr	r3, [pc, #156]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f1c3 0307 	rsb	r3, r3, #7
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d00a      	beq.n	8005ce8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	60bb      	str	r3, [r7, #8]
}
 8005ce4:	bf00      	nop
 8005ce6:	e7fe      	b.n	8005ce6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ce8:	4b1e      	ldr	r3, [pc, #120]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	021b      	lsls	r3, r3, #8
 8005cee:	4a1d      	ldr	r2, [pc, #116]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005cf2:	4b1c      	ldr	r3, [pc, #112]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005cfa:	4a1a      	ldr	r2, [pc, #104]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d06:	4b18      	ldr	r3, [pc, #96]	; (8005d68 <xPortStartScheduler+0x138>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a17      	ldr	r2, [pc, #92]	; (8005d68 <xPortStartScheduler+0x138>)
 8005d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d12:	4b15      	ldr	r3, [pc, #84]	; (8005d68 <xPortStartScheduler+0x138>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a14      	ldr	r2, [pc, #80]	; (8005d68 <xPortStartScheduler+0x138>)
 8005d18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d1e:	f000 f8dd 	bl	8005edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d22:	4b12      	ldr	r3, [pc, #72]	; (8005d6c <xPortStartScheduler+0x13c>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d28:	f000 f8fc 	bl	8005f24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d2c:	4b10      	ldr	r3, [pc, #64]	; (8005d70 <xPortStartScheduler+0x140>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a0f      	ldr	r2, [pc, #60]	; (8005d70 <xPortStartScheduler+0x140>)
 8005d32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d38:	f7ff ff66 	bl	8005c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d3c:	f7fe ff48 	bl	8004bd0 <vTaskSwitchContext>
	prvTaskExitError();
 8005d40:	f7ff ff1c 	bl	8005b7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	e000ed00 	.word	0xe000ed00
 8005d54:	410fc271 	.word	0x410fc271
 8005d58:	410fc270 	.word	0x410fc270
 8005d5c:	e000e400 	.word	0xe000e400
 8005d60:	20000f40 	.word	0x20000f40
 8005d64:	20000f44 	.word	0x20000f44
 8005d68:	e000ed20 	.word	0xe000ed20
 8005d6c:	2000005c 	.word	0x2000005c
 8005d70:	e000ef34 	.word	0xe000ef34

08005d74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
	__asm volatile
 8005d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	607b      	str	r3, [r7, #4]
}
 8005d8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d8e:	4b0f      	ldr	r3, [pc, #60]	; (8005dcc <vPortEnterCritical+0x58>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3301      	adds	r3, #1
 8005d94:	4a0d      	ldr	r2, [pc, #52]	; (8005dcc <vPortEnterCritical+0x58>)
 8005d96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d98:	4b0c      	ldr	r3, [pc, #48]	; (8005dcc <vPortEnterCritical+0x58>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d10f      	bne.n	8005dc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005da0:	4b0b      	ldr	r3, [pc, #44]	; (8005dd0 <vPortEnterCritical+0x5c>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	603b      	str	r3, [r7, #0]
}
 8005dbc:	bf00      	nop
 8005dbe:	e7fe      	b.n	8005dbe <vPortEnterCritical+0x4a>
	}
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	2000005c 	.word	0x2000005c
 8005dd0:	e000ed04 	.word	0xe000ed04

08005dd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005dda:	4b12      	ldr	r3, [pc, #72]	; (8005e24 <vPortExitCritical+0x50>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10a      	bne.n	8005df8 <vPortExitCritical+0x24>
	__asm volatile
 8005de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de6:	f383 8811 	msr	BASEPRI, r3
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	607b      	str	r3, [r7, #4]
}
 8005df4:	bf00      	nop
 8005df6:	e7fe      	b.n	8005df6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005df8:	4b0a      	ldr	r3, [pc, #40]	; (8005e24 <vPortExitCritical+0x50>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	4a09      	ldr	r2, [pc, #36]	; (8005e24 <vPortExitCritical+0x50>)
 8005e00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e02:	4b08      	ldr	r3, [pc, #32]	; (8005e24 <vPortExitCritical+0x50>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d105      	bne.n	8005e16 <vPortExitCritical+0x42>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	f383 8811 	msr	BASEPRI, r3
}
 8005e14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e16:	bf00      	nop
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	2000005c 	.word	0x2000005c
	...

08005e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e30:	f3ef 8009 	mrs	r0, PSP
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	4b15      	ldr	r3, [pc, #84]	; (8005e90 <pxCurrentTCBConst>)
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	f01e 0f10 	tst.w	lr, #16
 8005e40:	bf08      	it	eq
 8005e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e4a:	6010      	str	r0, [r2, #0]
 8005e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e54:	f380 8811 	msr	BASEPRI, r0
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f7fe feb6 	bl	8004bd0 <vTaskSwitchContext>
 8005e64:	f04f 0000 	mov.w	r0, #0
 8005e68:	f380 8811 	msr	BASEPRI, r0
 8005e6c:	bc09      	pop	{r0, r3}
 8005e6e:	6819      	ldr	r1, [r3, #0]
 8005e70:	6808      	ldr	r0, [r1, #0]
 8005e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e76:	f01e 0f10 	tst.w	lr, #16
 8005e7a:	bf08      	it	eq
 8005e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e80:	f380 8809 	msr	PSP, r0
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	f3af 8000 	nop.w

08005e90 <pxCurrentTCBConst>:
 8005e90:	20000914 	.word	0x20000914
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop

08005e98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	607b      	str	r3, [r7, #4]
}
 8005eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005eb2:	f7fe fdd3 	bl	8004a5c <xTaskIncrementTick>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005ebc:	4b06      	ldr	r3, [pc, #24]	; (8005ed8 <xPortSysTickHandler+0x40>)
 8005ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	f383 8811 	msr	BASEPRI, r3
}
 8005ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ed0:	bf00      	nop
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	e000ed04 	.word	0xe000ed04

08005edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005edc:	b480      	push	{r7}
 8005ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ee0:	4b0b      	ldr	r3, [pc, #44]	; (8005f10 <vPortSetupTimerInterrupt+0x34>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ee6:	4b0b      	ldr	r3, [pc, #44]	; (8005f14 <vPortSetupTimerInterrupt+0x38>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005eec:	4b0a      	ldr	r3, [pc, #40]	; (8005f18 <vPortSetupTimerInterrupt+0x3c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a0a      	ldr	r2, [pc, #40]	; (8005f1c <vPortSetupTimerInterrupt+0x40>)
 8005ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef6:	099b      	lsrs	r3, r3, #6
 8005ef8:	4a09      	ldr	r2, [pc, #36]	; (8005f20 <vPortSetupTimerInterrupt+0x44>)
 8005efa:	3b01      	subs	r3, #1
 8005efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005efe:	4b04      	ldr	r3, [pc, #16]	; (8005f10 <vPortSetupTimerInterrupt+0x34>)
 8005f00:	2207      	movs	r2, #7
 8005f02:	601a      	str	r2, [r3, #0]
}
 8005f04:	bf00      	nop
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	e000e010 	.word	0xe000e010
 8005f14:	e000e018 	.word	0xe000e018
 8005f18:	20000050 	.word	0x20000050
 8005f1c:	10624dd3 	.word	0x10624dd3
 8005f20:	e000e014 	.word	0xe000e014

08005f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f34 <vPortEnableVFP+0x10>
 8005f28:	6801      	ldr	r1, [r0, #0]
 8005f2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f2e:	6001      	str	r1, [r0, #0]
 8005f30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f32:	bf00      	nop
 8005f34:	e000ed88 	.word	0xe000ed88

08005f38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005f3e:	f3ef 8305 	mrs	r3, IPSR
 8005f42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2b0f      	cmp	r3, #15
 8005f48:	d914      	bls.n	8005f74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f4a:	4a17      	ldr	r2, [pc, #92]	; (8005fa8 <vPortValidateInterruptPriority+0x70>)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f54:	4b15      	ldr	r3, [pc, #84]	; (8005fac <vPortValidateInterruptPriority+0x74>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	7afa      	ldrb	r2, [r7, #11]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d20a      	bcs.n	8005f74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f62:	f383 8811 	msr	BASEPRI, r3
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	607b      	str	r3, [r7, #4]
}
 8005f70:	bf00      	nop
 8005f72:	e7fe      	b.n	8005f72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f74:	4b0e      	ldr	r3, [pc, #56]	; (8005fb0 <vPortValidateInterruptPriority+0x78>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f7c:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <vPortValidateInterruptPriority+0x7c>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d90a      	bls.n	8005f9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	603b      	str	r3, [r7, #0]
}
 8005f96:	bf00      	nop
 8005f98:	e7fe      	b.n	8005f98 <vPortValidateInterruptPriority+0x60>
	}
 8005f9a:	bf00      	nop
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	e000e3f0 	.word	0xe000e3f0
 8005fac:	20000f40 	.word	0x20000f40
 8005fb0:	e000ed0c 	.word	0xe000ed0c
 8005fb4:	20000f44 	.word	0x20000f44

08005fb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b08a      	sub	sp, #40	; 0x28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005fc4:	f7fe fc8e 	bl	80048e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fc8:	4b5b      	ldr	r3, [pc, #364]	; (8006138 <pvPortMalloc+0x180>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fd0:	f000 f920 	bl	8006214 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fd4:	4b59      	ldr	r3, [pc, #356]	; (800613c <pvPortMalloc+0x184>)
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f040 8093 	bne.w	8006108 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d01d      	beq.n	8006024 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005fe8:	2208      	movs	r2, #8
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4413      	add	r3, r2
 8005fee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d014      	beq.n	8006024 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f023 0307 	bic.w	r3, r3, #7
 8006000:	3308      	adds	r3, #8
 8006002:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f003 0307 	and.w	r3, r3, #7
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00a      	beq.n	8006024 <pvPortMalloc+0x6c>
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	617b      	str	r3, [r7, #20]
}
 8006020:	bf00      	nop
 8006022:	e7fe      	b.n	8006022 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d06e      	beq.n	8006108 <pvPortMalloc+0x150>
 800602a:	4b45      	ldr	r3, [pc, #276]	; (8006140 <pvPortMalloc+0x188>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	429a      	cmp	r2, r3
 8006032:	d869      	bhi.n	8006108 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006034:	4b43      	ldr	r3, [pc, #268]	; (8006144 <pvPortMalloc+0x18c>)
 8006036:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006038:	4b42      	ldr	r3, [pc, #264]	; (8006144 <pvPortMalloc+0x18c>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800603e:	e004      	b.n	800604a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	429a      	cmp	r2, r3
 8006052:	d903      	bls.n	800605c <pvPortMalloc+0xa4>
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1f1      	bne.n	8006040 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800605c:	4b36      	ldr	r3, [pc, #216]	; (8006138 <pvPortMalloc+0x180>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006062:	429a      	cmp	r2, r3
 8006064:	d050      	beq.n	8006108 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2208      	movs	r2, #8
 800606c:	4413      	add	r3, r2
 800606e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	1ad2      	subs	r2, r2, r3
 8006080:	2308      	movs	r3, #8
 8006082:	005b      	lsls	r3, r3, #1
 8006084:	429a      	cmp	r2, r3
 8006086:	d91f      	bls.n	80060c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4413      	add	r3, r2
 800608e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <pvPortMalloc+0xf8>
	__asm volatile
 800609a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	613b      	str	r3, [r7, #16]
}
 80060ac:	bf00      	nop
 80060ae:	e7fe      	b.n	80060ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	1ad2      	subs	r2, r2, r3
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060c2:	69b8      	ldr	r0, [r7, #24]
 80060c4:	f000 f908 	bl	80062d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060c8:	4b1d      	ldr	r3, [pc, #116]	; (8006140 <pvPortMalloc+0x188>)
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	4a1b      	ldr	r2, [pc, #108]	; (8006140 <pvPortMalloc+0x188>)
 80060d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060d6:	4b1a      	ldr	r3, [pc, #104]	; (8006140 <pvPortMalloc+0x188>)
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	4b1b      	ldr	r3, [pc, #108]	; (8006148 <pvPortMalloc+0x190>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d203      	bcs.n	80060ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060e2:	4b17      	ldr	r3, [pc, #92]	; (8006140 <pvPortMalloc+0x188>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a18      	ldr	r2, [pc, #96]	; (8006148 <pvPortMalloc+0x190>)
 80060e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	685a      	ldr	r2, [r3, #4]
 80060ee:	4b13      	ldr	r3, [pc, #76]	; (800613c <pvPortMalloc+0x184>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	431a      	orrs	r2, r3
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	2200      	movs	r2, #0
 80060fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80060fe:	4b13      	ldr	r3, [pc, #76]	; (800614c <pvPortMalloc+0x194>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3301      	adds	r3, #1
 8006104:	4a11      	ldr	r2, [pc, #68]	; (800614c <pvPortMalloc+0x194>)
 8006106:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006108:	f7fe fbfa 	bl	8004900 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	f003 0307 	and.w	r3, r3, #7
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <pvPortMalloc+0x174>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	60fb      	str	r3, [r7, #12]
}
 8006128:	bf00      	nop
 800612a:	e7fe      	b.n	800612a <pvPortMalloc+0x172>
	return pvReturn;
 800612c:	69fb      	ldr	r3, [r7, #28]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3728      	adds	r7, #40	; 0x28
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	20004b50 	.word	0x20004b50
 800613c:	20004b64 	.word	0x20004b64
 8006140:	20004b54 	.word	0x20004b54
 8006144:	20004b48 	.word	0x20004b48
 8006148:	20004b58 	.word	0x20004b58
 800614c:	20004b5c 	.word	0x20004b5c

08006150 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d04d      	beq.n	80061fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006162:	2308      	movs	r3, #8
 8006164:	425b      	negs	r3, r3
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	4413      	add	r3, r2
 800616a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	4b24      	ldr	r3, [pc, #144]	; (8006208 <vPortFree+0xb8>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4013      	ands	r3, r2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10a      	bne.n	8006194 <vPortFree+0x44>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	60fb      	str	r3, [r7, #12]
}
 8006190:	bf00      	nop
 8006192:	e7fe      	b.n	8006192 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00a      	beq.n	80061b2 <vPortFree+0x62>
	__asm volatile
 800619c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a0:	f383 8811 	msr	BASEPRI, r3
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	60bb      	str	r3, [r7, #8]
}
 80061ae:	bf00      	nop
 80061b0:	e7fe      	b.n	80061b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	4b14      	ldr	r3, [pc, #80]	; (8006208 <vPortFree+0xb8>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4013      	ands	r3, r2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d01e      	beq.n	80061fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d11a      	bne.n	80061fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	4b0e      	ldr	r3, [pc, #56]	; (8006208 <vPortFree+0xb8>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	43db      	mvns	r3, r3
 80061d2:	401a      	ands	r2, r3
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061d8:	f7fe fb84 	bl	80048e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	4b0a      	ldr	r3, [pc, #40]	; (800620c <vPortFree+0xbc>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4413      	add	r3, r2
 80061e6:	4a09      	ldr	r2, [pc, #36]	; (800620c <vPortFree+0xbc>)
 80061e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061ea:	6938      	ldr	r0, [r7, #16]
 80061ec:	f000 f874 	bl	80062d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80061f0:	4b07      	ldr	r3, [pc, #28]	; (8006210 <vPortFree+0xc0>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3301      	adds	r3, #1
 80061f6:	4a06      	ldr	r2, [pc, #24]	; (8006210 <vPortFree+0xc0>)
 80061f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80061fa:	f7fe fb81 	bl	8004900 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061fe:	bf00      	nop
 8006200:	3718      	adds	r7, #24
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20004b64 	.word	0x20004b64
 800620c:	20004b54 	.word	0x20004b54
 8006210:	20004b60 	.word	0x20004b60

08006214 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800621a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800621e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006220:	4b27      	ldr	r3, [pc, #156]	; (80062c0 <prvHeapInit+0xac>)
 8006222:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00c      	beq.n	8006248 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3307      	adds	r3, #7
 8006232:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f023 0307 	bic.w	r3, r3, #7
 800623a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	4a1f      	ldr	r2, [pc, #124]	; (80062c0 <prvHeapInit+0xac>)
 8006244:	4413      	add	r3, r2
 8006246:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800624c:	4a1d      	ldr	r2, [pc, #116]	; (80062c4 <prvHeapInit+0xb0>)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006252:	4b1c      	ldr	r3, [pc, #112]	; (80062c4 <prvHeapInit+0xb0>)
 8006254:	2200      	movs	r2, #0
 8006256:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	4413      	add	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006260:	2208      	movs	r2, #8
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	1a9b      	subs	r3, r3, r2
 8006266:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 0307 	bic.w	r3, r3, #7
 800626e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4a15      	ldr	r2, [pc, #84]	; (80062c8 <prvHeapInit+0xb4>)
 8006274:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006276:	4b14      	ldr	r3, [pc, #80]	; (80062c8 <prvHeapInit+0xb4>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2200      	movs	r2, #0
 800627c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800627e:	4b12      	ldr	r3, [pc, #72]	; (80062c8 <prvHeapInit+0xb4>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	1ad2      	subs	r2, r2, r3
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006294:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <prvHeapInit+0xb4>)
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	4a0a      	ldr	r2, [pc, #40]	; (80062cc <prvHeapInit+0xb8>)
 80062a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	4a09      	ldr	r2, [pc, #36]	; (80062d0 <prvHeapInit+0xbc>)
 80062aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062ac:	4b09      	ldr	r3, [pc, #36]	; (80062d4 <prvHeapInit+0xc0>)
 80062ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80062b2:	601a      	str	r2, [r3, #0]
}
 80062b4:	bf00      	nop
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	20000f48 	.word	0x20000f48
 80062c4:	20004b48 	.word	0x20004b48
 80062c8:	20004b50 	.word	0x20004b50
 80062cc:	20004b58 	.word	0x20004b58
 80062d0:	20004b54 	.word	0x20004b54
 80062d4:	20004b64 	.word	0x20004b64

080062d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062e0:	4b28      	ldr	r3, [pc, #160]	; (8006384 <prvInsertBlockIntoFreeList+0xac>)
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	e002      	b.n	80062ec <prvInsertBlockIntoFreeList+0x14>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d8f7      	bhi.n	80062e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	4413      	add	r3, r2
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	429a      	cmp	r2, r3
 8006306:	d108      	bne.n	800631a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	441a      	add	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	441a      	add	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	429a      	cmp	r2, r3
 800632c:	d118      	bne.n	8006360 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	4b15      	ldr	r3, [pc, #84]	; (8006388 <prvInsertBlockIntoFreeList+0xb0>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	429a      	cmp	r2, r3
 8006338:	d00d      	beq.n	8006356 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	441a      	add	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	e008      	b.n	8006368 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006356:	4b0c      	ldr	r3, [pc, #48]	; (8006388 <prvInsertBlockIntoFreeList+0xb0>)
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	e003      	b.n	8006368 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	429a      	cmp	r2, r3
 800636e:	d002      	beq.n	8006376 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006376:	bf00      	nop
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	20004b48 	.word	0x20004b48
 8006388:	20004b50 	.word	0x20004b50

0800638c <memset>:
 800638c:	4402      	add	r2, r0
 800638e:	4603      	mov	r3, r0
 8006390:	4293      	cmp	r3, r2
 8006392:	d100      	bne.n	8006396 <memset+0xa>
 8006394:	4770      	bx	lr
 8006396:	f803 1b01 	strb.w	r1, [r3], #1
 800639a:	e7f9      	b.n	8006390 <memset+0x4>

0800639c <_reclaim_reent>:
 800639c:	4b29      	ldr	r3, [pc, #164]	; (8006444 <_reclaim_reent+0xa8>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4283      	cmp	r3, r0
 80063a2:	b570      	push	{r4, r5, r6, lr}
 80063a4:	4604      	mov	r4, r0
 80063a6:	d04b      	beq.n	8006440 <_reclaim_reent+0xa4>
 80063a8:	69c3      	ldr	r3, [r0, #28]
 80063aa:	b143      	cbz	r3, 80063be <_reclaim_reent+0x22>
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d144      	bne.n	800643c <_reclaim_reent+0xa0>
 80063b2:	69e3      	ldr	r3, [r4, #28]
 80063b4:	6819      	ldr	r1, [r3, #0]
 80063b6:	b111      	cbz	r1, 80063be <_reclaim_reent+0x22>
 80063b8:	4620      	mov	r0, r4
 80063ba:	f000 f879 	bl	80064b0 <_free_r>
 80063be:	6961      	ldr	r1, [r4, #20]
 80063c0:	b111      	cbz	r1, 80063c8 <_reclaim_reent+0x2c>
 80063c2:	4620      	mov	r0, r4
 80063c4:	f000 f874 	bl	80064b0 <_free_r>
 80063c8:	69e1      	ldr	r1, [r4, #28]
 80063ca:	b111      	cbz	r1, 80063d2 <_reclaim_reent+0x36>
 80063cc:	4620      	mov	r0, r4
 80063ce:	f000 f86f 	bl	80064b0 <_free_r>
 80063d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80063d4:	b111      	cbz	r1, 80063dc <_reclaim_reent+0x40>
 80063d6:	4620      	mov	r0, r4
 80063d8:	f000 f86a 	bl	80064b0 <_free_r>
 80063dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063de:	b111      	cbz	r1, 80063e6 <_reclaim_reent+0x4a>
 80063e0:	4620      	mov	r0, r4
 80063e2:	f000 f865 	bl	80064b0 <_free_r>
 80063e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80063e8:	b111      	cbz	r1, 80063f0 <_reclaim_reent+0x54>
 80063ea:	4620      	mov	r0, r4
 80063ec:	f000 f860 	bl	80064b0 <_free_r>
 80063f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80063f2:	b111      	cbz	r1, 80063fa <_reclaim_reent+0x5e>
 80063f4:	4620      	mov	r0, r4
 80063f6:	f000 f85b 	bl	80064b0 <_free_r>
 80063fa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80063fc:	b111      	cbz	r1, 8006404 <_reclaim_reent+0x68>
 80063fe:	4620      	mov	r0, r4
 8006400:	f000 f856 	bl	80064b0 <_free_r>
 8006404:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006406:	b111      	cbz	r1, 800640e <_reclaim_reent+0x72>
 8006408:	4620      	mov	r0, r4
 800640a:	f000 f851 	bl	80064b0 <_free_r>
 800640e:	6a23      	ldr	r3, [r4, #32]
 8006410:	b1b3      	cbz	r3, 8006440 <_reclaim_reent+0xa4>
 8006412:	4620      	mov	r0, r4
 8006414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006418:	4718      	bx	r3
 800641a:	5949      	ldr	r1, [r1, r5]
 800641c:	b941      	cbnz	r1, 8006430 <_reclaim_reent+0x94>
 800641e:	3504      	adds	r5, #4
 8006420:	69e3      	ldr	r3, [r4, #28]
 8006422:	2d80      	cmp	r5, #128	; 0x80
 8006424:	68d9      	ldr	r1, [r3, #12]
 8006426:	d1f8      	bne.n	800641a <_reclaim_reent+0x7e>
 8006428:	4620      	mov	r0, r4
 800642a:	f000 f841 	bl	80064b0 <_free_r>
 800642e:	e7c0      	b.n	80063b2 <_reclaim_reent+0x16>
 8006430:	680e      	ldr	r6, [r1, #0]
 8006432:	4620      	mov	r0, r4
 8006434:	f000 f83c 	bl	80064b0 <_free_r>
 8006438:	4631      	mov	r1, r6
 800643a:	e7ef      	b.n	800641c <_reclaim_reent+0x80>
 800643c:	2500      	movs	r5, #0
 800643e:	e7ef      	b.n	8006420 <_reclaim_reent+0x84>
 8006440:	bd70      	pop	{r4, r5, r6, pc}
 8006442:	bf00      	nop
 8006444:	200000ac 	.word	0x200000ac

08006448 <__libc_init_array>:
 8006448:	b570      	push	{r4, r5, r6, lr}
 800644a:	4d0d      	ldr	r5, [pc, #52]	; (8006480 <__libc_init_array+0x38>)
 800644c:	4c0d      	ldr	r4, [pc, #52]	; (8006484 <__libc_init_array+0x3c>)
 800644e:	1b64      	subs	r4, r4, r5
 8006450:	10a4      	asrs	r4, r4, #2
 8006452:	2600      	movs	r6, #0
 8006454:	42a6      	cmp	r6, r4
 8006456:	d109      	bne.n	800646c <__libc_init_array+0x24>
 8006458:	4d0b      	ldr	r5, [pc, #44]	; (8006488 <__libc_init_array+0x40>)
 800645a:	4c0c      	ldr	r4, [pc, #48]	; (800648c <__libc_init_array+0x44>)
 800645c:	f000 f880 	bl	8006560 <_init>
 8006460:	1b64      	subs	r4, r4, r5
 8006462:	10a4      	asrs	r4, r4, #2
 8006464:	2600      	movs	r6, #0
 8006466:	42a6      	cmp	r6, r4
 8006468:	d105      	bne.n	8006476 <__libc_init_array+0x2e>
 800646a:	bd70      	pop	{r4, r5, r6, pc}
 800646c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006470:	4798      	blx	r3
 8006472:	3601      	adds	r6, #1
 8006474:	e7ee      	b.n	8006454 <__libc_init_array+0xc>
 8006476:	f855 3b04 	ldr.w	r3, [r5], #4
 800647a:	4798      	blx	r3
 800647c:	3601      	adds	r6, #1
 800647e:	e7f2      	b.n	8006466 <__libc_init_array+0x1e>
 8006480:	080066bc 	.word	0x080066bc
 8006484:	080066bc 	.word	0x080066bc
 8006488:	080066bc 	.word	0x080066bc
 800648c:	080066c0 	.word	0x080066c0

08006490 <__retarget_lock_acquire_recursive>:
 8006490:	4770      	bx	lr

08006492 <__retarget_lock_release_recursive>:
 8006492:	4770      	bx	lr

08006494 <memcpy>:
 8006494:	440a      	add	r2, r1
 8006496:	4291      	cmp	r1, r2
 8006498:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800649c:	d100      	bne.n	80064a0 <memcpy+0xc>
 800649e:	4770      	bx	lr
 80064a0:	b510      	push	{r4, lr}
 80064a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064aa:	4291      	cmp	r1, r2
 80064ac:	d1f9      	bne.n	80064a2 <memcpy+0xe>
 80064ae:	bd10      	pop	{r4, pc}

080064b0 <_free_r>:
 80064b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064b2:	2900      	cmp	r1, #0
 80064b4:	d044      	beq.n	8006540 <_free_r+0x90>
 80064b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064ba:	9001      	str	r0, [sp, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f1a1 0404 	sub.w	r4, r1, #4
 80064c2:	bfb8      	it	lt
 80064c4:	18e4      	addlt	r4, r4, r3
 80064c6:	f000 f83f 	bl	8006548 <__malloc_lock>
 80064ca:	4a1e      	ldr	r2, [pc, #120]	; (8006544 <_free_r+0x94>)
 80064cc:	9801      	ldr	r0, [sp, #4]
 80064ce:	6813      	ldr	r3, [r2, #0]
 80064d0:	b933      	cbnz	r3, 80064e0 <_free_r+0x30>
 80064d2:	6063      	str	r3, [r4, #4]
 80064d4:	6014      	str	r4, [r2, #0]
 80064d6:	b003      	add	sp, #12
 80064d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064dc:	f000 b83a 	b.w	8006554 <__malloc_unlock>
 80064e0:	42a3      	cmp	r3, r4
 80064e2:	d908      	bls.n	80064f6 <_free_r+0x46>
 80064e4:	6825      	ldr	r5, [r4, #0]
 80064e6:	1961      	adds	r1, r4, r5
 80064e8:	428b      	cmp	r3, r1
 80064ea:	bf01      	itttt	eq
 80064ec:	6819      	ldreq	r1, [r3, #0]
 80064ee:	685b      	ldreq	r3, [r3, #4]
 80064f0:	1949      	addeq	r1, r1, r5
 80064f2:	6021      	streq	r1, [r4, #0]
 80064f4:	e7ed      	b.n	80064d2 <_free_r+0x22>
 80064f6:	461a      	mov	r2, r3
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	b10b      	cbz	r3, 8006500 <_free_r+0x50>
 80064fc:	42a3      	cmp	r3, r4
 80064fe:	d9fa      	bls.n	80064f6 <_free_r+0x46>
 8006500:	6811      	ldr	r1, [r2, #0]
 8006502:	1855      	adds	r5, r2, r1
 8006504:	42a5      	cmp	r5, r4
 8006506:	d10b      	bne.n	8006520 <_free_r+0x70>
 8006508:	6824      	ldr	r4, [r4, #0]
 800650a:	4421      	add	r1, r4
 800650c:	1854      	adds	r4, r2, r1
 800650e:	42a3      	cmp	r3, r4
 8006510:	6011      	str	r1, [r2, #0]
 8006512:	d1e0      	bne.n	80064d6 <_free_r+0x26>
 8006514:	681c      	ldr	r4, [r3, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	6053      	str	r3, [r2, #4]
 800651a:	440c      	add	r4, r1
 800651c:	6014      	str	r4, [r2, #0]
 800651e:	e7da      	b.n	80064d6 <_free_r+0x26>
 8006520:	d902      	bls.n	8006528 <_free_r+0x78>
 8006522:	230c      	movs	r3, #12
 8006524:	6003      	str	r3, [r0, #0]
 8006526:	e7d6      	b.n	80064d6 <_free_r+0x26>
 8006528:	6825      	ldr	r5, [r4, #0]
 800652a:	1961      	adds	r1, r4, r5
 800652c:	428b      	cmp	r3, r1
 800652e:	bf04      	itt	eq
 8006530:	6819      	ldreq	r1, [r3, #0]
 8006532:	685b      	ldreq	r3, [r3, #4]
 8006534:	6063      	str	r3, [r4, #4]
 8006536:	bf04      	itt	eq
 8006538:	1949      	addeq	r1, r1, r5
 800653a:	6021      	streq	r1, [r4, #0]
 800653c:	6054      	str	r4, [r2, #4]
 800653e:	e7ca      	b.n	80064d6 <_free_r+0x26>
 8006540:	b003      	add	sp, #12
 8006542:	bd30      	pop	{r4, r5, pc}
 8006544:	20004ca4 	.word	0x20004ca4

08006548 <__malloc_lock>:
 8006548:	4801      	ldr	r0, [pc, #4]	; (8006550 <__malloc_lock+0x8>)
 800654a:	f7ff bfa1 	b.w	8006490 <__retarget_lock_acquire_recursive>
 800654e:	bf00      	nop
 8006550:	20004ca0 	.word	0x20004ca0

08006554 <__malloc_unlock>:
 8006554:	4801      	ldr	r0, [pc, #4]	; (800655c <__malloc_unlock+0x8>)
 8006556:	f7ff bf9c 	b.w	8006492 <__retarget_lock_release_recursive>
 800655a:	bf00      	nop
 800655c:	20004ca0 	.word	0x20004ca0

08006560 <_init>:
 8006560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006562:	bf00      	nop
 8006564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006566:	bc08      	pop	{r3}
 8006568:	469e      	mov	lr, r3
 800656a:	4770      	bx	lr

0800656c <_fini>:
 800656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656e:	bf00      	nop
 8006570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006572:	bc08      	pop	{r3}
 8006574:	469e      	mov	lr, r3
 8006576:	4770      	bx	lr
